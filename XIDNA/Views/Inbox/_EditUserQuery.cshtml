@model XIDNA.ViewModels.VMUserReports
@using XIDNA.ViewModels
@{
    int KPICircle = (Int32)Enum.Parse(typeof(EnumDisplayTypes), EnumDisplayTypes.KPICircle.ToString());
    int BarChart = (Int32)Enum.Parse(typeof(EnumDisplayTypes), EnumDisplayTypes.BarChart.ToString());
    int PieChart = (Int32)Enum.Parse(typeof(EnumDisplayTypes), EnumDisplayTypes.PieChart.ToString());
    int LineGraph = (Int32)Enum.Parse(typeof(EnumDisplayTypes), EnumDisplayTypes.LineChart.ToString());
    int Dashboard = (Int32)Enum.Parse(typeof(EnumLocations), EnumLocations.Dashboard.ToString());
    int Reports = (Int32)Enum.Parse(typeof(EnumLocations), EnumLocations.Reports.ToString());
    int Search = (Int32)Enum.Parse(typeof(EnumLocations), EnumLocations.Search.ToString());
    int Inbox = (Int32)Enum.Parse(typeof(EnumLocations), EnumLocations.Inbox.ToString());
    int Notifications = (Int32)Enum.Parse(typeof(EnumLocations), EnumLocations.Notifications.ToString());
    int QuickSearch = (Int32)Enum.Parse(typeof(EnumLocations), EnumLocations.QuickSearch.ToString());
    int DashboardReports = (Int32)Enum.Parse(typeof(EnumLocations), EnumLocations.DashboardReports.ToString());
    int AppDashboard = (Int32)Enum.Parse(typeof(EnumLocations), EnumLocations.AppDashboard.ToString());
}
<script>
    $(document).ready(function () {
        $('#TargetType').hide();
        $('#TargetTemplate').hide();
        $('#BODiv').hide();
        $('div.fa-hover').click(function () {
            var Text = $(this).text();
            var icon1 = $(this).closest('.fa-hover').find('i');
            var Name = $(icon1).attr('class');
            $('#IconName').val(Name);
            $('#IconDisplay').html('<i class="' + Name + '" aria-hidden="true"></i>' +" " + Text);
            $(".close").click();
        });
        if ('@Model.ID' > 0) {
            $('#IconDisplay').html('<i class="' + '@Model.Icon' + '" aria-hidden="true"></i>' + " " +'@Model.Icon');
        }
        if('@Model.TargetResultType'=="HTML"){
            $('#TargetTemplate').show();
        }
        var icon = @Html.Raw(Json.Encode(Model.Icon));
        $('#icon').val(icon);
        $('#ResetUserQuery').hide();
        if ('@Model.TypeID' == 2) {
            $('#Classes').prop("disabled", true);
            $('#Classes').val("");
        }
        else {
            $('#Classes').prop("disabled", false);
        }
        if('@Model.Location'== 40){
            $('#TargetType').show();
        }else if('@Model.Location'== 60){
            $('#BODiv').show();
        }
        if('@Model.Location' == 60)
        {
            $('#BODiv').show();
        }
        $('#TargetResultType').change(function () {
            if ($(this).val() == "HTML") {
                $('#TargetTemplate').show();
            }
            else {
                $('#TargetTemplate').hide();
            }
        });
    });
</script>

<div id="EditUserQuery">
    <h4 class="heading" style="background-color:black">@Model.UserName</h4>
    @using (Ajax.BeginForm("SaveUserQueries", "Inbox", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "QueryID", OnSuccess = "OnComplete" }, new { @id = "QueryDown", @class = "form-horizontal" }))
    {
        @Html.HiddenFor(m => m.RoleID);
        @Html.HiddenFor(m => m.ID)
        @Html.ValidationSummary(true);
        if (Model.FKiApplicationID == 0)
        {
            <div class="form-group" id="XIFKiApplicationDDL">
                <div class="col-md-3">
                    <label for="inputEmail" class="gn"> Application <span class="danger">*</span></label>
                    <select class="form-control" id="ApplicationID" name="FKiApplicationID">
                        <option value="0">--Select--</option>
                        @foreach (var items in Model.ddlApplications)
                    {
                        if (Model.FKiApplicationID == items.Value)
                        {
                                <option selected value="@items.Value">@items.text</option>
                            }
                            else
                            {
                                <option value="@items.Value">@items.text</option>
                            }
                        }
                    </select>
                </div>
            </div>
        }
        else
        {
            <input type="hidden" id="ApplicationID" name="FKiApplicationID" value="@Model.FKiApplicationID" />
        }
        @*<div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Type<span class="danger">*</span></label>
                @Html.DropDownListFor(model => model.TypeID, new SelectList(new List<Object>{
                                               new { key= "" , value = "--Select--" },
                       new { key= 1, value = "Class Specific" },
                       new { key= 2 , value = "Non Class Specific" }
                    }, "key", "Value"), new { @class = "form-control", @id = "TypeID" })
            </div>
            <div class="col-sm-7 usererror">*@
        @*<div id="ErrorMsg"></div>*@
        @*@Html.ValidationMessageFor(m => m.TypeID, "", new { @class = "red" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    <label for="inputEmail" class="gn">Class<span class="danger">*</span></label>
                    @Html.DropDownListFor(model => model.ClassID, new SelectList(Model.Classes, "Value", "text"), "--Select--", new { @class = "form-control", @id = "Classes" })
                </div>
                <div class="col-sm-7 usererror">
                    @Html.ValidationMessageFor(m => m.ClassID, "", new { @class = "red" })
                </div>
            </div>*@

        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">ID:<span class="danger"></span></label>
                @Html.DisplayFor(model => model.ID)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">1-Clicks<span class="danger"></span></label>
                @Html.DropDownListFor(model => model.ReportID, new SelectList(Model.AllOneClicks, "Value", "text"), new { @class = "form-control" })
            </div>
            <div class="col-sm-7 usererror">
                @Html.ValidationMessageFor(m => m.ReportID, "", new { @class = "red" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Display<span class="danger"></span></label>
                @Html.DropDownListFor(model => model.DisplayAs, new SelectList(Model.ReportTypes, "Value", "text"), "--Select--", new { @class = "form-control", @id = "DisplayAs" })
            </div>
            <div class="col-sm-7 usererror">
                @Html.ValidationMessageFor(m => m.DisplayAs, "", new { @class = "red" })
            </div>
        </div>
        @*<div class="form-group">
                <div class="col-md-3">
                    <label for="inputEmail" class="gn">Menu Name<span class="danger">*</span></label>
                    @Html.DropDownListFor(model => model.MenuID, new SelectList(Model.MenuList, "Value", "text"), "--Select--", new { @class = "form-control", @id = "Menus" })
                </div>
                <div class="col-sm-7 usererror">
                    @Html.ValidationMessageFor(m => m.MenuID, "", new { @class = "red" })
                </div>
            </div>*@
        @*<div class="form-group">
                <div class="col-md-3">
                    <label for="inputEmail" class="gn">1-Clicks<span class="danger">*</span></label>
                    @Html.DropDownListFor(model => model.ReportID, new SelectList(Model.SelectedReports, "Value", "text"), "--Select--", new { @class = "form-control", @Value = @Model.ReportID, @id = "Reports" })
                </div>
                <div class="col-sm-7 usererror">
                    @Html.ValidationMessageFor(m => m.ReportID, "", new { @class = "red" })
                </div>
            </div>*@
        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Location<span class="danger"></span></label>
                @Html.DropDownListFor(model => model.Location, new SelectList(Model.Locations, "Value", "text"), "--Select--", new { @class = "form-control" })
            </div>
            <div class="col-sm-7 usererror">
                @Html.ValidationMessageFor(m => m.Location, "", new { @class = "red" })
            </div>
        </div>
        <div class="form-group" id="BODiv">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Business Object<span class="danger"></span></label>
                @Html.DropDownListFor(model => model.BOID, new SelectList(Model.AllBOs
                                            , "value", "text"), new { @class = "form-control", @id = "BusinessObject" })
            </div>
            <div class="col-sm-7 qryerrormsg">
                @Html.ValidationMessageFor(model => model, null, new { @class = "red" })
            </div>
        </div>

        @*<div class="form-group" id="BODiv">
                <div class="col-md-3">
                    <label for="inputEmail" class="gn">BO<span class="danger"></span></label>
                    @Html.DropDownListFor(m => m.BO, new SelectList(new List<Object> {
                               new { key = "Leads", value = "Leads" },
                               new { key = "LeadInstances", value = "Lead Instances" }
                           }, "key", "Value"), new { @class = "form-control" })
                </div>
            </div>*@

        <div class="form-group" id="TargetType">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Target Result Type<span class="danger"></span></label>
                @Html.DropDownListFor(m => m.TargetResultType, new SelectList(new List<Object> {
                           new { key = "Progress Bar", value = "Progress Bar" },
                           new { key = "Number", value = "Number" },
                           new { key = "Progress Bar & Number", value = "Progress Bar & Number" },
                           new { key = "HTML", value = "HTML" }
                       }, "key", "Value"), new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group" id="TargetTemplate">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Template<span class="danger"></span></label>
                @Html.DropDownListFor(model => model.TargetTemplateID, new SelectList(Model.TemplateList, "Value", "text"), "--Select--", new { @class = "form-control" })
            </div>
            <div class="col-sm-7 usererror">
                @Html.ValidationMessageFor(m => m.TargetTemplateID, "", new { @class = "red" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Target<span class="danger"></span></label>
                @Html.TextBoxFor(model => model.Target, new { @class = "form-control", @placeholder = "Enter Target Value" })
            </div>
            <div class="col-sm-7 usererror">
                @Html.ValidationMessageFor(m => m.Target, "", new { @class = "red" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">XiLink<span class="danger"></span></label>
                @Html.DropDownListFor(model => model.XILinkID, new SelectList(Model.AllXiLinks
                                            , "value", "text"), new { @class = "form-control", @id = "XILinks" })
            </div>
            <div class="col-sm-7 qryerrormsg">
                @Html.ValidationMessageFor(model => model, null, new { @class = "red" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Icon<span class="danger"></span></label>
                <button type="button" data-original-title="Click to select icons" data-toggle="modal" data-target="#icn_select_modal" class="text-yellow">Select Icon</button>
                <span id="IconDisplay" style="padding-left:10px;"></span>
                <input id="IconName" type="hidden" name="Icon" />
                @{
                    Html.RenderPartial("~/Views/Master/_UIIcons.cshtml");
                }
            </div>
            @*<div class="col-sm-7 usererror">
                    @Html.ValidationMessageFor(m => m.Icon, "", new { @class = "red" })
                </div>*@
        </div>

        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Status<span class="danger"></span></label>
                @Html.DropDownListFor(m => m.StatusTypeID, new SelectList(new List<Object> {
               new { key = 10, value = "Active" },
               new { key = 20, value = "Inactive" }
           }, "key", "Value"), new { @class = "form-control", @id = "Status" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">SignalR<span class="danger"></span></label>
                @Html.CheckBoxFor(model => model.bSignalR)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-6">
                <button type="submit" class="btn btn-theme" id="querysave">Save</button>
                <button type="button" class="btn btn-theme reverse" id="ResetUserQuery">Reset</button>
                <button type="button" class="btn btn-theme decline" id="UserCancel">Cancel</button>
            </div>
        </div>
                    }
</div>
<div class="dialog-box UsercntDlg" title="Confirm Message" style="background-color:white;"></div>
<script>
    function OnComplete(e) {
        if(e>0){
            $("#UserQueryGrid").load('@Url.Action("GetUserQueries", "Inbox", new { UserID = @Model.RoleID})');
            $('#QueryDropDown select').removeAttr('disabled');
            $('#QueryDropDown select').val('');
            $("#Status").val(10);
            $('#Target').val(0);
            $('#TargetType').hide();
            $('#TargetTemplate').hide();
            $('#BODiv').hide();
            $('#IconDisplay').html('');
            $('#ResetUserQuery').show();
            $(".UsercntDlg").html('1-Click updated Successfully!');
            $(".UsercntDlg").dialog({
                title: "1-Clicks",
                modal: true,
                buttons: [
                {
                    text: "Ok",
                    click: function () {
                        $(".UsercntDlg").dialog("close");
                    }
                }
                ]
            });
        }
        else{
            $(".UsercntDlg").html('Something went wrong. Please try again!!!');
            $(".UsercntDlg").dialog({
                title: "1-Clicks",
                modal: true,
                buttons: [
                {
                    text: "Ok",
                    click: function () {
                        $(".UsercntDlg").dialog("close");
                    }
                }
                ]
            });
        }

    }
    $('#ResetUserQuery').click(function(){
        $.ajax({
            url: '@Url.Action("Usercontent", "Inbox")',
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            cache: false,
            data: { RoleID: '@Model.RoleID', Rolename:'@Model.UserName' },
            success: function (data) {
                var result = $(data).find('#QueryDropDown');
                $('#QueryDropDown').html(result.html());
            },
            error: function (data) { }
        });
        //$("#QueryDropDown").load('@Url.Action("GetUserQueries", "Inbox", new { UserID = @Model.RoleID})');
        //$('#QueryDropDown select').removeAttr('disabled');
        //$('#QueryDropDown select').val('');
        //$('#Target').val(0);
        $(this).hide();
    });
    $('#ResetUserQuery').click(function () {
        $('#UserReportForm')[0].reset();
        $('#IconDisplay').html('');
        $('.usererror span').empty();
        $('#TargetTemplate').hide();
    });
    $('#UserCancel').click(function () {
        window.close();
    });
    $('#Classes').change(function () {
        GetQueries();
    });
    $('#DisplayAs').change(function () {
        var displaytype = $('#DisplayAs :selected').val();
        if (displaytype == '@KPICircle' || displaytype == '@BarChart' || displaytype == '@PieChart' || displaytype == '@LineGraph') {
            $('#Location').html('<option value="">--Select--</option>');
            $('#Location').append('<option value="@Dashboard">Dashboard</option>');
        }
        else {
            $('#Location').html('<option value="">--Select--</option>');
            $('#Location').append('<option value="@Dashboard">Dashboard</option>');
            $('#Location').append('<option value="@Reports">Reports</option>');
            $('#Location').append('<option value="@Search">Search</option>');
            $('#Location').append('<option value="@Inbox">Inbox</option>');
            $('#Location').append('<option value="@Notifications">Notifications</option>');
            $('#Location').append('<option value="@QuickSearch">QuickSearch</option>');
            $('#Location').append('<option value="@DashboardReports">DashboardReports</option>');
            $('#Location').append('<option value="@AppDashboard">App Dashboard</option>');
        }
        GetQueries();
    });
    $('#Classes').change(function () {
        GetQueries();
    });
    $('#TypeID').change(function () {
        var type = $(this).val();
        if (type == 0) {
            $('#ErrorMsg').show();
        }
        else {
            $('#ErrorMsg').hide();
        }
        if (type == 2) {
            $('#Classes').prop("disabled", true);
            $('#Classes').val("");
        }
        else {
            $('#Classes').prop("disabled", false);
        }
        GetQueries();
    });
    $('#Location').change(function () {
        var Value = $('#Location :selected').text();
        if (Value == "Inbox") {
            $('#TargetType').show();
        }
        else {
            $('#TargetType').hide();
        }
        if (Value == "QuickSearch" || Value == "Quick Search") {
            $('#BODiv').show();
            $('#TargetTemplate').hide();
        }
        else {
            $('#BODiv').hide();
        }
    });
    //$('#TypeID').change(function () {
    //    var type = $(this).val();
    //    if (type == 0) {
    //        $('#ErrorMsg').show();
    //    }
    //    else {
    //        $('#ErrorMsg').hide();
    //    }
    //});
    function GetQueries() {
        var roleid = '@Model.RoleID';
        var classtype = $('#TypeID :selected').val();
        var classid = $('#Classes :selected').val();
        var displaytype = $('#DisplayAs :selected').val();
        if (classtype == 2) {
            classid = 0;
        }
        if (classtype > 0 && classid >= 0 && displaytype != "") {
            $.ajax({
                url: '@Url.Action("GetQueriesByType", "Inbox")',
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                datatype: "JSON",
                cache: false,
                data: { RoleID: roleid, ClassType: classtype, Display: displaytype, ClassID: classid },
                success: function (data) {
                    $('#Reports').html('<option value="">--Select--</option>');
                    if (data.length > 0) {
                        for (i = 0; i < data.length; i++) {
                            $('#Reports').append('<option value="' + data[i].Value + '">' + data[i].text + '</option>');
                        }
                    }
                },
                error: function (data) { }
            });
        }
    }
</script>