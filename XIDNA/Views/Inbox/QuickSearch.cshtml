@model XIDNA.ViewModels.VMResultList

@{
    Layout = "~/Views/Shared/_XIDynawareLayout.cshtml";
}
<script type="text/javascript">
    var SelectedFields=new Array();
    var FieldGroup = @Html.Raw(Json.Encode(Model.FilterGroup));
    $(document).ready(function () {
        var SearchString="";

        var availableTags = Object.keys(FieldGroup);
        //$( "#QuickSearchTBox" ).autocomplete({
        //    source: availableTags,
        //    select: function (event, ui) { GetSearchResults() }
        //});
        function split( val ) {
            return val.split(" ");
        }
        function extractLast( term ) {
            return split( term ).pop();
        }

        $( "#QuickSearchTBox" )
          // don't navigate away from the field on tab when selecting an item
          .on( "keydown", function( event ) {
              if ( event.keyCode === $.ui.keyCode.TAB &&
                  $( this ).autocomplete( "instance" ).menu.active ) {
                  event.preventDefault();
              }
          })
          .autocomplete({
              minLength: 0,
              source: function( request, response ) {
                  // delegate back to autocomplete, but extract the last term
                  response( $.ui.autocomplete.filter(
                    availableTags, extractLast( request.term ) ) );
              },
              focus: function() {
                  // prevent value inserted on focus
                  return false;
              },
              select: function( event, ui ) {
                  var terms = split( this.value );
                  // remove the current input
                  terms.pop();
                  // add the selected item
                  terms.push( ui.item.value );
                  // add placeholder to get the comma-and-space at the end
                  terms.push( "" );
                  this.value = terms.join( " " );
                  SelectedFields.push(ui.item.value);
                  return false;
              }
          });
        if ('@Model.IDExists') {

        }
        else {
            table.api().column(1).visible(false);
        }
        $('#UserResult').css('width', '100%');
        @*$('#UserResult tbody').on('click', 'tr', function () {
            var hg =@Html.Raw(Json.Encode(Model.Headings));
            if('@Model.ResultListDisplayType'==1)
            {
                var table = $('#UserResult').dataTable();
                var tr = $(this).closest('tr');
                var data1 = table.fnGetData(tr);
            }
            else{
                var data1 = $(this).children("td").map(function() {
                    return $(this).text();
                }).get();
            }
            var id;
            if(data1){
                for (var i = 0; i < hg.length; i++) {
                    if (hg[i] == "ID") {
                        id = data1[i];
                    }
                }
                var selid = parseInt(id);
                var url = "@Url.Action("GetLeadPopup", "Lead")?leadid=" + selid +"&QueryID="+ '@Model.QueryID';
                if('@Model.IsPopup'=="True"){
                    window.open(url, '_blank',"scrollbars=1,resizable=1,width=1400, height=700,left=0,top=0");
                }
            }
        });*@
        var changeTimer = false;
        $('#QuickSearchTBox').on("keyup", function () {
            if(changeTimer !== false) clearTimeout(changeTimer);
            changeTimer = setTimeout(function(){
                GetSearchResults();
                changeTimer = false;
            },300);
        });

    })
    function GetSearchResults(){
        var SearchText = $('#QuickSearchTBox').val();
        if(SearchText.length==0){
            SelectedFields=[];
        }
        for(i=0;i<SelectedFields.length;i++){
            var SearchField = FieldGroup[SelectedFields[i]];
            if(SearchField){
                SearchText = SearchText.replace(SelectedFields[i]+" ",SearchField+" ");
            }
        }

        var ReportID = '@Model.ReportID';
        pageIndex = 1;
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetSearchResult", "Inbox")',
            data: { SearchText: SearchText, ReportID: ReportID, PageIndex: 1 },
            cache: false,
            async: false,
            dataType: 'html',
            success: function (data) {
                var sTable = "";
                if (pageIndex > 2) {
                    for (i = 0; i < data.length; i++) {
                        sTable = sTable + "<tr>";
                        for (j = 0; j < data[i].length; j++) {
                            if ('@Model.IDExists' == "True") {
                                sTable = sTable + "<td>" + data[i][j] + "</td>";
                            }
                            else {
                                if (j == 0) {
                                    sTable = sTable + "<tdstyle='display:none'>" + data[i][j] + "</td>";
                                }
                                else {
                                    sTable = sTable + "<td>" + data[i][j] + "</td>";
                                }
                            }
                        }
                        sTable = sTable + "</tr>";
                    }
                    $("#ReportResultList").append(sTable);
                }
                else {
                    $('#ResultPreview').html(data);
                }
            }
        });
    }

    var pageIndex = 1;
    var PageCount = 40;
    $(window).scroll(function () {
        if ($(window).scrollTop() == $(document).height() - $(window).height()) {
            GetRecords();
        }
    });
    function GetRecords() {
        if ('@Model.ResultListDisplayType' == 0) {
            var SearchText = $('#QuickSearchTBox').val();
            pageIndex++;
            var sTable = "";
            var QueryID = '@Model.QueryID';
            if (SearchText.length > 0) {
                for(i=0;i<SelectedFields.length;i++){
                    var SearchField = FieldGroup[SelectedFields[i]];
                    if(SearchField){
                        SearchText = SearchText.replace(SelectedFields[i]+" ",SearchField+" ");
                    }
                }
                $.ajax({
                    url: '@Url.Action("GetSearchResult", "Inbox")',
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    async: false,
                    data: { SearchText: SearchText, ReportID: QueryID, PageIndex: pageIndex },
                    success: function (data) {
                        for (i = 0; i < data.length; i++) {
                            sTable = sTable + "<tr>";
                            for (j = 0; j < data[i].length; j++) {
                                if ('@Model.IDExists' == "True") {
                                    sTable = sTable + "<td>" + data[i][j] + "</td>";
                                }
                                else {
                                    if (j == 0) {
                                        sTable = sTable + "<tdstyle='display:none'>" + data[i][j] + "</td>";
                                    }
                                    else {
                                        sTable = sTable + "<td>" + data[i][j] + "</td>";
                                    }
                                }
                            }
                            sTable = sTable + "</tr>";
                        }
                        $("#ReportResultList").append(sTable);
                    }
                });
            }
            else {
                $.ajax({
                    url: '@Url.Action("QuickSearch", "Inbox")',
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    async: false,
                    data: { QueryID: QueryID, PageIndex: pageIndex },
                    success: function (data) {
                        for (i = 0; i < data.length; i++) {
                            sTable = sTable + "<tr>";
                            for (j = 0; j < data[i].length; j++) {
                                @*if ('@Model.IDExists' == "True") {
                                    sTable = sTable + "<td>" + data[i][j] + "</td>";
                                }
                                else {
                                    if (j == 0) {
                                        sTable = sTable + "<tdstyle='display:none'>" + data[i][j] + "</td>";
                                    }
                                    else {
                                        sTable = sTable + "<td>" + data[i][j] + "</td>";
                                    }
                                }*@
                                sTable = sTable + "<td>" + data[i][j] + "</td>";
                            }
                            sTable = sTable + "</tr>";
                        }
                        $("#ReportResultList").append(sTable);
                    }
                });
            }
        }
    }
</script>

<style>
    #QuickSearchTBox {
        width: 500px;
    }

    .ui-autocomplete {
        background: black;
        color: white;
    }
</style>
<section class="content-header hedr">
    @if (Model.QueryIcon != null)
    {
        <h1 class="col-md-4"><i class="@Model.QueryIcon" aria-hidden="true"></i> - @Model.QueryName</h1>
    }
    else
    {
        <h1 class="col-md-4">@Model.QueryName</h1>
    }
    @if (Model.IsFilterSearch)
    {
        <input type="text" class="form-control col-md-6" name="QuickSearch" id="QuickSearchTBox" placeholder="Search Here" />
    }
</section>
<div id="ResultPreview">
    @{
        if (Model.ResultListDisplayType == 1)
        {
            Html.RenderAction("DisplayQueryResult", "Inbox", new { model = Model });
        }
        else
        {
            Html.RenderAction("DisplayAutoLoadResult", "Inbox", new { model = Model });
        }
    }
</div>

