@*XIDynaware Code*@
@model XIDNA.Models.BOs
@{
    Layout = "~/Views/Shared/_PopupLayout.cshtml";
}
<script>
    $(document).ready(function () {
        //$('#SuccessMsg').hide();
        //$('#ErrorMsg').hide();
        // $(".StatusMessages").hide();
    });
</script>
<section class="content-header hedr">
    @if (Model.BOID == 0)
    {
    <h1> Add Business Object </h1>
    }
    else
    {
    <h1> Edit Business Object </h1>
    }
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Business Objects</a></li>
        <li class="active">Home</li>
    </ol>
</section>
<section class="content">
    <div class="alert alert-danger" id="BootstrpError" style="display:none;">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">×</a>
    </div>
    <div class="alert alert-success" id="BootstrpAlertSuccess" style="display:none;">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">×</a>
    </div>
    <div class="row">
        <div class="box box-primary">
            <div class="box-body">
                <div class="innerborder">
                    @* SaveBO *@
                    @using (Ajax.BeginForm("CreateTableFromBO", "BusinessObjects", new AjaxOptions { OnBegin = "OnFormBegin()", HttpMethod = "POST", OnSuccess = "OnComplete" }, new { @id = "BOForm", @class = "form-horizontal" }))
                    {
                    @Html.ValidationSummary(true);
                    @Html.HiddenFor(m => m.BOID)
                    <div id="clear-text">
                        @if (Model.FKiApplicationID == 0)
                        {
                            <div class="form-group" id="XIFKiApplicationDDL">
                                <div class="col-md-3">
                                    <label for="inputEmail" class="gn"> Application <span class="danger">*</span></label>
                                    <select class="form-control" id="ApplicationID" name="FKiApplicationID">
                                        <option value="0">--Select--</option>
                                        @foreach (var items in Model.ddlApplications)
                                        {
                                            if (Model.FKiApplicationID == items.Value)
                                            {
                                                <option selected value="@items.Value">@items.text</option>
                                            }
                                            else
                                            {
                                                <option value="@items.Value">@items.text</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        }
                        else
                        {
                            <input type="hidden" id="ApplicationID" name="FKiApplicationID" value="@Model.FKiApplicationID" />
                        }
                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">BO Name<span class="danger">*</span></label>
                                @if (Model.BOID == 0)
                                {
                                    @Html.TextBoxFor(model => model.Name, new { @placeholder = "Enter Name Here", @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.Name, new { @readonly = "readonly", @placeholder = "Enter Name Here", @class = "form-control" })
                                }
                            </div>
                            <div class="col-sm-4 taberrormsg">
                                @Html.ValidationMessageFor(m => m.Name, null, new { @class = "red" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Table Name<span class="danger">*</span></label>
                                @if (Model.BOID == 0)
                                {
                                    @Html.TextBoxFor(model => model.TableName, new { @placeholder = "Enter Table Name Here", @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.TableName, new { @readonly = "readonly", @placeholder = "Enter Table Name Here", @class = "form-control" })
                                }
                            </div>
                            <div class="col-sm-4 taberrormsg">
                                @Html.ValidationMessageFor(m => m.TableName, null, new { @class = "red" })
                            </div>
                        </div>
                        @if (Model.BOID > 0)
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    <label for="inputEmail" class="gn"> Name Attribute <span class="danger"></span></label>
                                    <select class="form-control" id="sNameAttribute" name="sNameAttribute">
                                        <option value="0">--Select--</option>
                                        @foreach (var items in Model.ddlBOFieldAttributes)
                                        {
                                            if (Model.sNameAttribute == items.text)
                                            {
                                                <option selected value="@items.text">@items.text</option>
                                            }
                                            else
                                            {
                                                <option value="@items.text">@items.text</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        }
                        @*Should be from master table based on this we can filter when BO name is unknown*@
                        <div class="form-group">
                            <div class="col-md-3" id="Changetype">
                                <label for="inputEmail" class="gn">Type<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.sType, new SelectList(new List<Object>
                                    {
                                    new { key= "MasterEntity" , value = "MasterEntity" },
                                    new { key= "Technical" , value = "Technical" },
                                    new { key= "Reference" , value = "Reference" },
                                    new { key= "XISystem" , value = "XISystem" },
                                    new { key= "Enum" , value = "Enum" },
                                    new { key= "CacheReference" , value = "CacheReference" },
                                    new { key= "Audit" , value = "Audit" }
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group" id="DashboardDropdown">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">DashBoard Type<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.sDashBoardType, new SelectList(new List<Object>
                                    {
                                    new { key= "C3-Charts" , value = "C3-Charts" },
                                    new { key= "AM-Charts" , value = "AM-Charts" }
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div> 
                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Section<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.sSection, new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Accounts" },
                                    new { key= 20 , value = "CRM" },
                                    new { key= 30 , value = "Policy" }
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>

                        @*Should be from master table based on this we vcan filter when BO name is unknown*@

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Version<span class="danger">*</span></label>
                                @if (Model.BOID == 0)
                                {
                                    @Html.TextBoxFor(model => model.sVersion, new { @placeholder = "Enter Version", @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.sVersion, new { @readonly = "readonly", @class = "form-control" })
                                }
                            </div>
                            <div class="col-sm-4 taberrormsg">
                                @Html.ValidationMessageFor(m => m.sVersion, null, new { @class = "red" })
                            </div>
                        </div>
                        @*<div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Label<span class="danger">*</span></label>
                @Html.TextBoxFor(model => model.sLabel, new { @placeholder = "Enter the Label", @class = "form-control" })
            </div>
            <div class="col-sm-4 taberrormsg">
                @Html.ValidationMessageFor(m => m.sLabel, null, new { @class = "red" })
            </div>
        </div>*@

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Description<span class="danger">*</span></label>
                                @Html.TextAreaFor(model => model.Description, new { @placeholder = "Enter Description", @class = "form-control", @rows = 4 })
                            </div>
                            <div class="col-sm-4 taberrormsg">
                                @Html.ValidationMessageFor(m => m.Description, null, new { @class = "red" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Notes<span class="danger">*</span></label>
                                @Html.TextAreaFor(model => model.sNotes, new { @placeholder = "Enter Notes", @class = "form-control", @rows = 3 })
                            </div>
                            <div class="col-sm-4 taberrormsg">
                                @Html.ValidationMessageFor(m => m.sNotes, null, new { @class = "red" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Size<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.sSize, new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Small" },
                                    new { key= 20 , value = "Medium" },
                                    new { key= 30 , value = "Large" },
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>

                        @*<div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">XIDataSource<span class="danger"></span></label>
                @Html.DropDownListFor(m => m.sDataSource, new SelectList(new List<Object>
                    {
                    new { key= 10 , value = "default" },
                    new { key= 20 , value = "XIApplication" },
                    new { key= 30 , value = "XIUniversal" },
                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
            </div>
        </div>*@
                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">XIDataSource<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.iDataSource, new SelectList(Model.DataSources, "Value", "text"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">XISearchType<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.sSearchType, new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Private" },
                                    new { key= 20 , value = "Organisation" },
                                    new { key= 30 , value = "Application" },
                                    new { key= 40 , value = "Global" },
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.CheckBoxFor(m => m.bUID)
                                <label for="inputEmail" class="gn">XIUID<span class="danger"></span></label>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">XIUpdateCount<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.iUpdateCount, new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Yes" },
                                    new { key= 20 , value = "No" }
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>



                        @*<div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">XISequence<span class="danger">*</span></label>
                @Html.TextBoxFor(model => model.sSequence, new { @readonly = "readonly", @class = "form-control" })
            </div>
            <div class="col-sm-4 taberrormsg">
                @Html.ValidationMessageFor(m => m.Name, null, new { @class = "red" })
            </div>
        </div>*@

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">XIUpdateVersion<span class="danger">*</span></label>
                                @Html.TextBoxFor(model => model.sUpdateVersion, new { @readonly = "readonly", @class = "form-control" })
                            </div>
                            <div class="col-sm-4 taberrormsg">
                                @Html.ValidationMessageFor(m => m.sUpdateVersion, null, new { @class = "red" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">XITimeStamped<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.sTimeStamped, new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Yes" },
                                    new { key= 20 , value = "No" }
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="form-group" id="sAudit">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">XIAudit<span class="danger"></span></label>
                                @if (Model.sAudit != "30")
                                {
                                    @Html.DropDownListFor(m => m.sAudit, new SelectList(new List<Object>
                                        {
                                        new { key= 10 , value = "No" },
                                        new { key= 20 , value = "BO Level Combined" },
                                        new {Key=30, value="BO Level Split"},
                                        new {Key=40, value="Structure Level"}
                                        }, "key", "Value"), "--Select--", new { @class = "form-control", @id = "AuditStatus" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(m => m.sAudit, new SelectList(new List<Object>
                                        {
                                        new { key= 10 , value = "No" },
                                        new { key= 20 , value = "BO Level Combined" },
                                        new {Key=30, value="BO Level Split"},
                                        new {Key=40, value="Structure Level"}
                                        }, "key", "Value"), "--Select--", new { @class = "form-control", @id = "AuditStatus", @disabled = "disabled" })
                                }
                            </div>
                        </div>
                        @if (Model.sAudit != "30")
                        {
                            <br />
                            <div class="form-group" id="ShowCreateAudit">
                                <div class="col-sm-6">
                                    <input type="button" class="btn btn-theme CreateAudit" value="Create Audit Table" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <br />
                            <div class="form-group" id="ShowCreateAudit">
                                <div class="col-sm-6">
                                    <input type="button" class="btn btn-theme CreateAudit" value="Update Audit Table" />
                                </div>
                            </div>
                        }
                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">XIDeleteRule<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.sDeleteRule, new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Yes" },
                                    new { key= 20 , value = "No" }
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>


                        @*<div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Field Count<span class="danger">*</span></label>
                @Html.TextBoxFor(model => model.FieldCount, new { @placeholder = "Enter BO field count", @class = "form-control" })
            </div>
            <div class="col-sm-4 taberrormsg">
                @Html.ValidationMessageFor(m => m.FieldCount, null, new { @class = "red" })
            </div>
        </div>*@

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Primary Key<span class="danger">*</span></label>
                                @Html.TextBoxFor(model => model.sPrimaryKey, new { @placeholder = "Enter the Primary Key", @class = "form-control" })
                            </div>
                            <div class="col-sm-4 taberrormsg">
                                @Html.ValidationMessageFor(m => m.sPrimaryKey, null, new { @class = "red" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Attribute Name<span class="danger">*</span></label>
                                @Html.TextAreaFor(m => m.ColName, new { @class = "form-control", @placeholder = "Enter Attribute Name", @id = "ColumnName", @rows = 4 })

                            </div>
                            <div class="col-sm-7 fielderror">
                                @Html.ValidationMessageFor(m => m.ColName, "", new { @class = "red" })
                                <div class="container">
                                    @*<a href="#" data-toggle="tooltip" id="ColumnNamesHelp" title='The string has Column name, datatype with length, Column is NULL Ex:"sName,varchar(50),Null". ID will be by default primary key with no null. To create a foriegn key enter "Primary Key Table Name","Primary key Column name" with the column name details Ex: "FKiClassID,int,NOT NULL,OrganizationClasses,ID".'><i class="fa fa-question-circle-o" aria-hidden="true"></i></a>*@
                                    <a href="#" data-toggle="tooltip" id="ColumnNamesHelp" title='To create a column type "Column name" with prefix("i" is int,"s" is varchar(64),"d" is datetime,"n" is nvarchar(MAX),"r" is float and null by default.) indicating the datatype in lower case with default NULL, Column is NULL Ex:"sName". ID will be by default primary key with no null values allowed. To create a foriegn key enter "Foriegn Key name starts with FK","Primary Key Table Name","Primary key Column name" Ex: "FKiSourceID,OrganizationSources,ID" where third character indicates the datatype. To create "Computed Column" you need to type "CM" followed by computed column name and the column name in the table used to calculate the value and formula, synatx: ComputedColumnName,{Column1.Column2} AS Definition" example: CMAge,{DOB} AS DATEDIFF(YY,DOB,GETDATE())".'><i class="fa fa-question-circle-o" aria-hidden="true"></i></a>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.CheckBoxFor(m => m.IsClassEnabled)
                                <label for="inputEmail" class="gn">Class Enabled<span class="danger"></span></label>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.CheckBoxFor(m => m.bIsAutoIncrement)
                                <label for="inputEmail" class="gn">Is Auto Increment<span class="danger"></span></label>
                            </div>
                        </div>

                        @*<div class="form-group">
            <div class="col-md-3">
                <label for="inputEmail" class="gn">Class Attribute<span class="danger"></span></label>
                @Html.DropDownListFor(m => m.ClassAttribute, new SelectList(new List<Object>
                    {
                    new { key= 10 , value = "Order" },
                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
            </div>
        </div>*@

                        @*  *@
                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">XIHelpItem<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.sHelpItem, new SelectList(Model.HelpTypes, "Value", "text"), new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Transaction Enable<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.iTransactionEnable, new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Yes" },
                                    new { key= 20 , value = "No" }
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })
                            </div>
                            <div class="col-sm-4 taberrormsg">
                                @Html.ValidationMessageFor(m => m.iTransactionEnable, null, new { @class = "red" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.CheckBoxFor(m => m.bIsHierarchy)
                                <label for="inputEmail" class="gn">Is Hierarchy<span class="danger"></span></label>
                            </div>
                        </div>
                        <div class="form-group" id="ColumnDiv">
                            <div class="col-md-3">
                                <label for="inputEmail" class="gn">Status<span class="danger"></span></label>
                                @Html.DropDownListFor(m => m.StatusTypeID, new SelectList(new List<Object>
                                    {
                                    new { key= 10 , value = "Active" },
                                    new { key= 20 , value = "Inactive" }
                                    }, "key", "Value"), "--Select--", new { @class = "form-control" })

                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-10">
                            <input type="submit" class="btn btn-theme" value="Save" />
                            @if (Model.BOID == 0)
                            {
                            <button type="button" class="btn btn-theme reverse" id="ResetBoBtn">Reset</button>
                            }
                            @if (Model.BOID > 0)
                            {
                            // CopyBO", "BusinessObjects"
                            <input type="button" class="btn btn-theme reverse" id="CopyBoBtn" value="Copy">
                            }
                            <button type="button" class="btn btn-theme decline" id="CancelBO">Cancel</button>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>

</section>
<script type="text/javascript">
    $(document).ready(function () {

        $('#CancelBO').click(function () {
            window.close();
        });
        $('#ResetBoBtn').click(function () {
            $('#BOForm')[0].reset();
            $('#BOForm .taberrormsg').find('span').html('');
        });
    })
    function OnFormBegin() {
        $('#BOForm').block({
            message: '<h4>Saving</h4>',
            blockMsgClass: 'report-success',
        });
    }

    function OnComplete(e) {
        $('#BOForm').unblock();
        $('#BOForm')[0].reset();
        opener.location.reload();
        //CustomMessage(e.ResponseMessage, e.Status);
        if (e.Status == false) {
            $("#BootstrpError").show();
            $("#BootstrpError").append("<strong>Failure!</strong> OOPS looks like there is some error");
            $(function () {
                setTimeout(function () {
                    $("#BootstrpError").hide('blind', {}, 500)
                }, 5000);
            });
        }
        else {
            $("#BootstrpAlertSuccess").show();
            $("#BootstrpAlertSuccess").append("<strong>Success!</strong> The Business Object and table have been created successfully.");
            $(function () {
                setTimeout(function () {
                    $("#BootstrpAlertSuccess").hide('blind', {}, 500)
                }, 5000);
            });
        }
    }

    $('#sAudit').change(function(){
        var Audit = $('#AuditStatus :selected').text();
        if(Audit == "BO Level Split")
        {
            $('#ShowCreateAudit').show();
        }
        else
        {
            $('#ShowCreateAudit').hide();
        }
    });

    $('.CreateAudit').click(function () {
        var BOID=@Model.BOID;
        $.ajax({
            type: 'POST',
            url: '@Url.Action("CreateAuditTable", "BusinessObjects")',
            data: { BOID: BOID },
            cache: false,
            async: false,
            dataType: 'html',
            success: function (data) {
            }
        });
    });
    $('#Changetype').change(function(){
        debugger;
        var sChangeType = $('#Changetype :selected').text();
        if(sChangeType=="MasterEntity"){
            $('#DashboardDropdown').show();
        }
        else{
            $('#DashboardDropdown').hide();
        }
    });
</script>

<script>
    $(document).ready(function () {
        $('#ShowCreateAudit').hide();
        $('#DashboardDropdown').hide();
        if('@Model.sAudit' == 30)
        {
            $('#ShowCreateAudit').show();
        }
        if('@Model.sType'=='MasterEntity'){
            $('#DashboardDropdown').show();
        }
        var Copypopups = new Array();
        $('#CancelBO').click(function () {
            window.close();
        });
        $('#ResetBoBtn').click(function () {
            $('#BOForm')[0].reset();
            $('#BOForm .taberrormsg').find('span').html('');
        });
        $('#CopyBoBtn').click(function () {
            var ID=@Model.BOID;
            if (Copypopups.length > 0) {
                for (i = 0; i < Copypopups.length; i++) {
                    Copypopups[i].close();
                }
            }
            var Copybo = window.open('', '_blank', "scrollbars=1,resizable=1,width=" + screen.width + ", height=" + screen.height);
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CopyBO", "BusinessObjects")',
                data: { ID: ID },
                cache: false,
                async: false,
                dataType: 'html',
                success: function (data) {
                    with (Copybo.document) {
                        open();
                        write(data);
                        close();
                    }
                    Copypopups.push(Copybo);
                    Copybo.moveTo(0, 0);
                }
            });
        });
    })
    function OnFormBegin() {
        $('#BOForm').block({
            message: '<h4>Saving</h4>',
            blockMsgClass: 'report-success',
        });
    }

    function OnComplete(e) {
        $('#BOForm').unblock();
        $('#BOForm')[0].reset();
        opener.location.reload();
        CustomMessage(e.ResponseMessage, e.Status);
    }

</script>