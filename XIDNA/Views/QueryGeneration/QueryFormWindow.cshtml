@model XIDNA.ViewModels.VMReports
@using XIDNA.ViewModels
@{
    Layout = "~/Views/Shared/_PopupLayout.cshtml";
    string PhysicalPath = System.Configuration.ConfigurationManager.AppSettings["PhysicalPath"];
    int ResultList = (Int32)Enum.Parse(typeof(EnumDisplayTypes), EnumDisplayTypes.ResultList.ToString());
    int Grid = (Int32)Enum.Parse(typeof(EnumDisplayTypes), EnumDisplayTypes.Grid.ToString());
    int Repeater = (Int32)Enum.Parse(typeof(EnumDisplayTypes), EnumDisplayTypes.Repeater.ToString());
}
@*<h2>Add Query</h2>*@
<style>
    #QueryStatus {
        float: left;
    }

        #QueryStatus p {
            float: right;
            margin-right: 20px;
        }

    .selected {
        background-color: #367fa9;
        color: #fff !important;
    }

    #EditablerightValues {
        height: 397px;
    }

    #ValidQuery {
        margin-left: -10px;
        margin-top: 10px;
    }
</style>
<script type="text/javascript">

    $(document).on('click', '#AddMore', function(){
        var Divs = $('.NVPairs').first().clone();
        $(Divs).find('input').val('');
        $('#NameValuePairs').append(Divs);
        $('.NVPairs').last().css("display", "block");
    });
    $(document.body).on('click', 'button.DeleteNVPair', function () {
        $(this).closest(".NVPairs").hide();
    });

    $(document).on('click', '#AddMoreParam', function(){
        var Divs = $('.NDVPairs').first().clone();
        $(Divs).find('input').val('');
        $(Divs).find('button').val('');
        $('#NameDefaultValuePairs').append(Divs);
        $('.NDVPairs').last().css("display", "block");
    });

    $(document.body).on('click', 'button.DeleteNDVPair', function () {
        $(this).closest(".NDVPairs").hide();
    });

    $(document).on('click', '#SaveNVs', function(){
        var QueryID = $('#QueryID').text();
        var NVPairs = [];
        $('.NVPairs:visible').each(function () {
            var Name; var Value;
            $(this).find('input').each(function (i, obj) {
                var Nname = obj.name;
                if (Nname == "Names") {
                    Name = $(this).val();
                }
                else if (Nname == "Values") {
                    Value = $(this).val();
                }
            });
            if (Name.length > 0 && Value.length > 0) {
                NVPairs.push(Name + "^" + Value);
            }
        });
        var model = { OneClickID: QueryID, NVPairs: NVPairs};
        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveOneclickNvs", "QueryGeneration")',
            data: JSON.stringify(model),
            contentType: 'application/json;',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                if (data.Status == false) {
                    $("#BootstrpError").show();
                    $("#BootstrpError").html("<strong>Failure!</strong> OOPS looks like there is some error");
                    $(function () {
                        setTimeout(function () {
                            $("#BootstrpError").hide('blind', {}, 500)
                        }, 5000);
                    });
                }
                else {
                    $("#BootstrpAlertSuccess").show();
                    $("#BootstrpAlertSuccess").html("<strong>Success!</strong> One Click NVs Saved Successfully.");
                    $(function () {
                        setTimeout(function () {
                            $("#BootstrpAlertSuccess").hide('blind', {}, 500)
                        }, 5000);
                    });
                }
            }
        });
    });

    $(document).on('click', '#SaveNDVs', function(){
        var QueryID = "@Model.ID";
        var NDVPairs = [];
        $('.NDVPairs').each(function () {
            var ID = 0; var Name; var Default;var Value;
            $(this).find('input').each(function (i, obj) {
                var Nname = obj.name;
                if (Nname == "Names") {
                    Name = $(this).val();
                }
                else if (Nname == "Defaults") {
                    Default = $(this).val();
                }
                else if (Nname == "Values") {
                    Value = $(this).val();
                }
                else if(Nname == "ID")
                {
                    ID = $(this).val();
                    if(ID == "")
                    {
                        ID = 0;
                    }
                }
            });
            if (Name.length > 0 || Value.length > 0) {
                NDVPairs.push(ID + "^" + Name + "^" + Default + "^" + Value);
            }
        });
        var model = { OneClickID: QueryID, NDVPairs: NDVPairs};
        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveParamerterNDVs", "QueryGeneration")',
            data: JSON.stringify(model),
            contentType: 'application/json;',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                if (data.Status == false) {
                    $("#BootstrpError").show();
                    $("#BootstrpError").html("<strong>Failure!</strong> OOPS looks like there is some error");
                    $(function () {
                        setTimeout(function () {
                            $("#BootstrpError").hide('blind', {}, 500)
                        }, 5000);
                    });
                }
                else {
                    $("#BootstrpAlertSuccess").show();
                    $("#BootstrpAlertSuccess").html("<strong>Success!</strong> One Click Paramerers Saved Successfully.");
                    $(function () {
                        setTimeout(function () {
                            $("#BootstrpAlertSuccess").hide('blind', {}, 500)
                        }, 5000);
                    });
                }
            }
        });
    });

    //XI1ClickLink Buttons
    $(document.body).on('click', 'button#AddMore1ClickLink', function () {
        var XILinks = @Html.Raw(Json.Encode(Model.XILinks));
        var availableXiLinks = Object.keys(XILinks);
        var Divs = $('.OneClickLPairs').first().clone();
        $(Divs).find('input').val('');
        $('#OneClickLinkPairs').append(Divs);
        $('#OneClickLinkPairs').last().css("display", "block");
        $( ".OneClickLinkValue" ).autocomplete({
            source: availableXiLinks
        });
    });

    $(document.body).on('click', 'button.DeleteXI1ClickLinkPair', function () {
        var iOneClickPairID = $(this).val();
        $(this).closest(".OneClickLPairs").hide();
        if(parseInt(iOneClickPairID) != 0 && iOneClickPairID != 'undefined')
        {
            $.ajax({
                type: 'GET',
                url: '@Url.Action("DeleteXI1ClickLinkPair", "QueryGeneration")',
                data: {ID : iOneClickPairID},
                contentType: 'application/json;',
                dataType: 'JSON',
                traditional: true,
                cache: false,
                success: function (data) {}
            });
        }
    });

    $(document.body).on('click', 'button#Save1ClickFieldsBtn', function () {
        var QueryID = $('#QueryID').text();
        var ClickLNVPairs = [];
        $('.OneClickLPairs:visible').each(function () {
            var ID = 0;var Name; var XiLink;var Code;
            $(this).find('input').each(function (i, obj) {
                var Nname = obj.name;
                if (Nname == "QSLinktbox") {
                    XiLink = $(this).val();
                }
                else if(Nname == "sName"){
                    Name = $(this).val();
                }
                else if(Nname == "ID")
                {
                    ID = $(this).val();
                    if(ID == "")
                    {
                        ID = 0;
                    }
                }
                else if(Nname == "sCode")
                {
                    Code = $(this).val();
                }
            });
            $(this).find('select').each(function (i, obj) {
                var Nname = obj.name;
                if(Nname == "iType")
                {
                    Type = $(this).val();
                }
            });
            if (Name.length > 0 && XiLink.length > 0) {
                ClickLNVPairs.push(ID + "^" + Name + "^" + XiLink + "^" + Code + "^" + Type);
            }
        });

        var Data = {OneClickID: QueryID, XI1ClickLinks:ClickLNVPairs};
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Save1ClickLinks", "QueryGeneration")',
            data: JSON.stringify(Data),
            contentType: 'application/json;',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                if (data.Status == false) {
                    $("#BootstrpError").show();
                    $("#BootstrpError").html("<strong>Failure!</strong> OOPS looks like there is some error");
                    $(function () {
                        setTimeout(function () {
                            $("#BootstrpError").hide('blind', {}, 500)
                        }, 5000);
                    });
                }
                else {
                    $("#BootstrpAlertSuccess").show();
                    $("#BootstrpAlertSuccess").html("<strong>Success!</strong> One Click Buttons Saved Successfully.");
                    $(function () {
                        setTimeout(function () {
                            $("#BootstrpAlertSuccess").hide('blind', {}, 500)
                        }, 5000);
                    });
                }
            }
        });
    });

    $(document).on('click', '#XIComponentBtn', function(){
        var ComponentID = $('#XIRepeaterComponent :selected').val()
        if (ComponentID > 0) {
            $.ajax({
                type: 'get',
                url: '@Url.Action("GetXIComponentByID", "XIComponents")',
                contentType: "application/json; charset=utf-8",
                data: { iXIComponentID: ComponentID, sType: "Query", ID: '@Model.ID' },
                cache: false,
                async: false,
                dataType: 'html',
                success: function (data) {
                    $('#XICParams').html(data);
                    $("#XICParams").dialog({
                        modal: true,
                        width: 600
                    });
                }
            });
        }
    });

    $(document.body).on('click', 'input#XIComponentParamsBtn', function () {
        var Component;
        var ComponentID = $('#XIRepeaterComponent :selected').val()
        if (ComponentID > 0) {
            $.ajax({
                type: 'get',
                url: '@Url.Action("GetXIComponentDetailsByID", "XIComponents")',
                contentType: "application/json; charset=utf-8",
                data: { iXIComponentID: ComponentID, sType: "Query", ID: '@Model.ID' },
                cache: false,
                async: false,
                dataType: 'json',
                success: function (data) {
                    Component = data;
                }
            });
        }
        var QueryID = "@Model.ID";
        var NVPairs = [];
        $('.NVPairs').each(function () {
            var Name; var Value;
            $(this).find('label').each(function (i, obj) {
                Name = $(this).attr('data-sName');
            });
            $(this).find('input').each(function (i, obj) {
                var Nname = obj.name;
                if (Nname == "Names") {
                    Value = $(this).val();
                }
            });
            if ((Name && Name.length > 0) && (Value && Value.length > 0)) {
                //NVPairs.push(Name + "-" + Value);
                for (i = 0; i < Component.XIComponentNVs.length; i++) {
                    if (Component.XIComponentNVs[i].sName == Name) {
                        Component.XIComponentNVs[i].sValue = Value;
                    }
                }
            }
        });
        $('.TNVPairs').each(function () {
            var Name; var Value;
            $(this).find('label').each(function (i, obj) {
                Name = $(this).attr('data-sName');
            });
            $(this).find('input').each(function (i, obj) {
                var Nname = obj.name;
                if (Nname == "Names") {
                    Value = $(this).val();
                }
            });
            if ((Name && Name.length > 0) && (Value && Value.length > 0)) {
                //NVPairs.push(Name + "-" + Value);
                for (i = 0; i < Component.XIComponentTriggers.length; i++) {
                    if (Component.XIComponentTriggers[i].sName == Name) {
                        Component.XIComponentTriggers[i].sValue = Value;
                    }
                }
            }
        });
        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveComponentParams", "XIComponents")',
            data: JSON.stringify({ oComponent: Component, sType: "Query", iLoadID: QueryID }),//JSON.stringify(Component),
            contentType: 'application/json;',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                $('#ParamIDs').val(data);
                $("#XICParams").dialog('close');
            }
        });
    });

    var sWhereFieldshidden="";
    var sSelectFields = sWhereFields = sGroupByFields = sOrderByFields = sFromBO = "";
    var VSelectFields = ""; var HSelectFields = "";
    var frombo = "", frombos ="", selectfields = "";
    var hiddenselectfields ="", hiddenwherefields ="", HiddenWhereFielddata = "";
    var hiddenassignvalues ="", hiddenselectgrfields ="", hiddenselfields = "";
    var savedselectfields = "";
    var selwithtype ="", wherewithtype = "";
    var headings = "", HeadingNames = "";
    var wherefields = "";
    var groupfields ="", originalgrfields = "", hiddengrfields = "";
    var orderfields = "";
    var where ="", group ="", order = "", hiddenordfields = "";
    var list = [], Distinct, PopupError = "";
    var ViewFields = "", EditableFields = "", NonEditableFields = "";
    var IsQuerySavable = false;
    var IsCustomQuery = false;
    var editpopups = new Array();
    var Poppopups = new Array();
    var alldefaultdemovalues="";
    var sLeftJoinquery="";
    var sJoinString ="";
    var sLeftJoinArray=new Array();
    var insertedBO=new Array();
    var BOName = "";
    var sBOTableName="";
    function disableF5(e) {
        if ((e.which || e.keyCode) == 116) e.preventDefault(); };
    $(document).ready(function () {
        var iCreateXiLinkID = 0;
        //XiLink AutoCompleteFields
        var XILinks = @Html.Raw(Json.Encode(Model.XILinks));
        var availableXiLinks = Object.keys(XILinks);
        $( ".OneClickLinkValue" ).autocomplete({
            source: availableXiLinks
        });

        var OneClicks = @Html.Raw(Json.Encode(Model.ddlOneClicks));
        var availableOneClicks = Object.keys(OneClicks);
        $("#FKiCtrdOneClickID").autocomplete({
            source: availableOneClicks
        });
        $("#FKiUpdtOneClickID").autocomplete({
            source: availableOneClicks
        });

        $(document).on("keydown", disableF5);
        $('#QuerySearchTBox').val('')
        $(function () {
            var parentlist = @Html.Raw(Json.Encode(Model.Parent1Clicks));
            $("#QuerySearchTBox").autocomplete({
                source: parentlist
            });
        });
        $('#HideResultListDisplayType').hide();

        $('#DisplayAs').change(function () {
            if (this.value == "@ResultList") {
                $('#HideResultListDisplayType').show();
                $("#XIComponentType").hide();
            }
            else if(this.value == "@Repeater")
            {
                $("#XIComponentType").show();
                $("#XIRepeaterComponent")[0].selectedIndex = 0;
                $('#HideResultListDisplayType').hide();
            }
            else {
                $('#HideResultListDisplayType').hide();
                $("#XIComponentType").hide();
            }
        });

        $('#ResultListDisplayType').change(function(){
            if($(this).val()==1){
                $('#paginationRange').show();
                $('.paginationcountcls').val(@Model.iPaginationCount);
            }
            else{
                $('#paginationRange').hide();
                $('.paginationcountcls').val(0);
            }
        })

        $('#Save').val("Save & Continue");
        $('#QueryID').hide();
        $('#Querygen').hide();
        $('#Runtime').hide();
        $('#ORText').hide();
        $('#Operators').hide();
        $('#WhereValue').hide();
        $("#whereope").hide();
        $('#QueryStatus').hide();
        $('#ValidQuery').hide();
        $('#ColumnPopups').show();
        $('#ColumnResultList').hide();
        $('#CellPopups').show();
        $('#CellResultList').hide();
        $('#RowClickDiv').hide();
        $('#RowPopups').show();
        $('#RowResultList').hide();
        $('#ColumnClickDiv').hide();
        $('#CellClickDiv').hide();
        $('#Targets').val('');
        $('#TRSMSTemplates').hide();
        $('#TREmailTemplates').hide();
        $('#CreateClickDiv').hide();
        $('#EditClickDiv').hide();
        $('#DeleteClickDiv').hide();
        $('#FileExtensionDiv').hide();
        $('#NVsTab').hide();
        $('#AddMore').hide();
        $('#SaveNVs').hide();
        $('#ParamsTab').hide();
        $('#ButtonsTab').hide();
        $('#AccessTab').hide();
        $('#AddMoreParam').hide();
        $('#SaveNDVs').hide();
        $("#FKiCtrdOneClickID").hide();
        $("#FKiUpdtOneClickID").hide();
        $('#IsSMS').change(function(){
            if($("#IsSMS").is(':checked')){
                $('#TRSMSTemplates').show();
            }
            else{
                $('#TRSMSTemplates').hide();
            }
        });
        $('#IsEmail').change(function(){
            if($("#IsEmail").is(':checked')){
                $('#TREmailTemplates').show();
            }
            else{
                $('#TREmailTemplates').hide();
            }
        });
        $('#SMSTemplates').hide();
        $('#EmailTemplates').hide();
        $('#AlertType').change(function(){
            if($(this).val()=="Email"){
                $('#SMSTemplates').hide();
                $('#EmailTemplates').show();
            }
            else if($(this).val()=="SMS"){
                $('#EmailTemplates').hide();
                $('#SMSTemplates').show();
            }
            else{
                $('#SMSTemplates').hide();
                $('#EmailTemplates').hide();
            }
        });
        $('#Days').hide();
        $('#Dates').hide();
        $('#SchedulerPeriod').change(function(){
            if($(this).val()=="Daily"){
                $('#Days').hide();
                $('#Dates').hide();
            }
            else if($(this).val()=="Weekly"){
                $('#Days').show();
                $('#Dates').hide();
            }
            else{
                $('#Dates').show();
                $('#Days').hide();
            }
        });
        $('#IsFilterSearch').change(function(){
            if($("#IsFilterSearch").is(':checked')){
                $('#IsNaturalSearch').attr('disabled','disabled');
            }
            else{
                $('#IsNaturalSearch').removeAttr('disabled');
            }
        });
        $('#IsNaturalSearch').change(function(){
            if($("#IsNaturalSearch").is(':checked')){
                $('#IsFilterSearch').attr('disabled','disabled');
            }
            else{
                $('#IsFilterSearch').removeAttr('disabled');
            }
        });

        //checkBox for Hidden n showing dropdown
        $(".CheckMultiplefor").hide();
        $(".selectJoin").hide();
        $('#CheckMultiple').change(function(){
            if($("#IsMultipleBo").is(':checked')){
                $(".CheckMultiplefor").show();
                $(".selectJoin").show();
            }
            else{
                $(".CheckMultiplefor").hide();
                $(".selectJoin").hide();
                sJoinString ="";
                sWhereFields ="";
                sGroupByFields ="";
                sOrderByFields="";
                $('#QueryResult').hide();
                $('#selectBO').val('')
                insertedBO.length=0;
                sLeftJoinArray.length=0;
                BusinessObject();
            }
        });

        //checkBox for Hidden n showing dropdown
        $(".CheckMultiplefor_where").hide();
        $('#CheckMultiple_where').change(function(){
            if($("#IsMultipleBo_where").is(':checked')){
                $(".CheckMultiplefor_where").show();
            }
            else{
                $(".CheckMultiplefor_where").hide();
                $("#WhereDDL").empty();
                $("#WhereDDL").html("<option value='0'>--Select--</option>");
            }
        });

        //checkBox for Hidden n showing dropdown
        $(".CheckMultiplefor_GroupBY").hide();
        $('#CheckMultiple_GroupBY').change(function(){
            if($("#IsMultipleBo_GroupBY").is(':checked')){
                $(".CheckMultiplefor_GroupBY").show();
            }
            else{
                $(".CheckMultiplefor_GroupBY").hide();
            }
        });

        //checkBox for Hidden n showing dropdown
        $(".CheckMultiplefor_Order").hide();
        $('#CheckMultiple_Order').change(function(){
            if($("#IsMultipleBo_Order").is(':checked')){
                $(".CheckMultiplefor_Order").show();
            }
            else{
                $(".CheckMultiplefor_Order").hide();
                $("#WhereDDL").empty();
                $("#WhereDDL").html("<option value='0'>--Select--</option>");
            }
        });
        $(".CheckMultiplefor_Searchtab").hide();
        $('#CheckMultiplesearchtab').change(function(){
            if($("#IsMultipleBoserachTab").is(':checked')){
                $(".CheckMultiplefor_Searchtab").show();
            }
            else{
                $(".CheckMultiplefor_Searchtab").hide();
            }
        });
        
        $( ".FromMultipleBOserachTab").autocomplete({
            source: function (request, response) {
                var AllXiLinks = @Html.Raw(Json.Encode(Model.AllBOss.Where(m => !string.IsNullOrEmpty(m.Key))));
                var List = [];
                $.each(AllXiLinks, function (key, value) {
                    List.push({ label: value.Value, value: value });
                });
                response($.ui.autocomplete.filter(List, request.term));
            }
           ,
            select: function (event, ui) {
                $("#serachTabBO").val(ui.item.value.Value);
                $("#bussobjserachTab").val(ui.item.value.Key);
                BOName="";
                BOName = $("#serachTabBO").val();
                var selectedItemBO = $("#bussobjserachTab").val();
                var querytypeBO = $('#TypeID :selected').val();
                var classtypeBO = $('#ClassType :selected').val();
                $.ajax({
                    url: '@Url.Action("GetAvailableFields", "QueryGeneration")',
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    data: { BOID: selectedItemBO, Type: querytypeBO, ClassType: classtypeBO },
                    success: function (data) {
                        sBOTableName = data[0].TableName;
                        BOName = sBOTableName;
                        $("#SearchLeftValues").html(""); // clear before appending new list
                        $.each(data, function (i, availableval) {
                            var flag=1;
                            var allrightvalues = $("#SearchRightValues li");
                            for (i = 0; i < allrightvalues.length; i++) {
                                var f1=allrightvalues[i].innerText;
                                var f2="["+BOName+"]."+availableval.Name;
                                if(f1==f2)
                                {
                                    flag=0;
                                    break;
                                }
                                else
                                {
                                    flag=1;
                                }
                            }
                            if(flag==1){
                                $("#SearchLeftValues").append(
                               $('<li name="' + availableval.Name + "-" + availableval.Type + '"data-value="' + availableval.LabelName + '" data-name="'+availableval.Name.toLowerCase()+'"></li>').html("["+BOName+"]."+availableval.Name));

                            }
                        })
                    },
                    error: function (data) {}
                });
                return false;
            }
          ,
            focus: function (event, ui) {
                $("#serachTabBO").val(ui.item.value.Value);
                return false;
            }
        });
        $( ".bonamecls" ).autocomplete({
            source: function (request, response) {
                var AllXiLinks = @Html.Raw(Json.Encode(Model.AllBOss.Where(m => !string.IsNullOrEmpty(m.Key))));
                var List = [];
                $.each(AllXiLinks, function (key, value) {
                    List.push({ label: value.Value, value: value });
                });
                response($.ui.autocomplete.filter(List, request.term));
            }
          ,
            select: function (event, ui) {
                $("#BusinessObject").val(ui.item.value.Value);
                $("#bussobjID").val(ui.item.value.Key);
                return false;
            }
         ,
            focus: function (event, ui) {
                $("#BusinessObject").val(ui.item.value.Value);
                return false;
            }
        });

        $(".FromMultipleBO").autocomplete({
            source: function (request, response) {
                var AllXiLinks = @Html.Raw(Json.Encode(Model.AllBOss.Where(m => !string.IsNullOrEmpty(m.Key))));
                var List = [];
                $.each(AllXiLinks, function (key, value) {
                    List.push({ label: value.Value, value: value });
                });
                response($.ui.autocomplete.filter(List, request.term));
            }
           ,
            select: function (event, ui) {
                $("#selectBO").val(ui.item.value.Value);
                $("#bussobjSelectTab").val(ui.item.value.Key);
                BOName="";
                BOName = $("#selectBO").val();
                var selectedItemBO = $("#bussobjSelectTab").val();
                var querytypeBO = $('#TypeID :selected').val();
                var classtypeBO = $('#ClassType :selected').val();
                $.ajax({
                    url: '@Url.Action("GetAvailableFields", "QueryGeneration")',
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    data: { BOID: selectedItemBO, Type: querytypeBO, ClassType: classtypeBO },
                    success: function (data) {
                        sBOTableName = data[0].TableName;
                        BOName = sBOTableName;
                        $('#TargetUsers').val('');
                        $("#OrderBySelectBox").empty();
                        $("#EditableleftValues").empty();
                        var List = $("#EditableleftValues li");
                        $("#NonEditableleftValues").empty();
                        $("#SelectLeftValues").html(""); // clear before appending new list
                        //$("#WhereDDL").html("<option value='0'>--Select--</option>");
                        $("#OrderBySelectBox").html("<option value='0'>--Select--</option>");
                        //var groupallf = selectedwithgroups.split(', ');
                        $.each(data, function (i, availableval) {
                            if (availableval.IsVisible == true) {
                                var flag=0;
                                var allrightvalues = $("#SelectRightValues li");
                                if(allrightvalues.length > 0)
                                {
                                    for (i = 0; i < allrightvalues.length; i++) {
                                        var f1=allrightvalues[i].innerText;
                                        var f2="["+BOName+"]."+availableval.Name;
                                        if(f1==f2)
                                        {
                                            flag=0;
                                            break;
                                        }
                                        else
                                        {
                                            flag=1;
                                        }
                                    }
                                    if(flag==1){
                                        $("#SelectLeftValues").append(
                                       $('<li name="' + availableval.Name + "-" + availableval.Type + '"data-value="' + availableval.LabelName + '" data-name="'+availableval.Name.toLowerCase()+'"></li>').html("["+BOName+"]."+availableval.Name));
                                    }
                                }
                                else
                                {
                                    $("#SelectLeftValues").append(
                                       $('<li name="' + availableval.Name + "-" + availableval.Type + '"data-value="' + availableval.LabelName + '" data-name="'+availableval.Name.toLowerCase()+'"></li>').html("["+BOName+"]."+availableval.Name));
                                }
                            }
                        })
                        if (data.length > 0) { //Multiple BO Groups
                            var names = data[0].GroupNames;
                            var sqlfields = data[0].GroupSqlFields;
                            var fields = data[0].GroupFields
                            var ids = data[0].GroupIDs;
                            if (names != null) {
                                $.each(names, function (i, val) {
                                    $("#SelectLeftValues").append(
                                    $('<li style="color:#F5A301 !important;" id="' + ids[i] + '" data-name="'+names[i]+'" name="' + fields[i] + '" data-value="' + sqlfields[i] + '"></li>').html("["+BOName+"].{"+val+"}"));
                                });
                            }
                        }
                    },
                    error: function (data) {

                    }
                });
                return false;
            }
          ,
            focus: function (event, ui) {
                $("#selectBO").val(ui.item.value.Value);
                return false;
            }
        });

        $( ".FromMultipleBOWhere" ).autocomplete({
            source: function (request, response) {
                var AllXiLinks = @Html.Raw(Json.Encode(Model.AllBOss.Where(m => !string.IsNullOrEmpty(m.Key))));
                var List = [];
                $.each(AllXiLinks, function (key, value) {
                    List.push({ label: value.Value, value: value });
                });
                response($.ui.autocomplete.filter(List, request.term));
            }
               ,
            select: function (event, ui) {
                $("#selectBO_where").val(ui.item.value.Value);
                $("#bussobjWhereTab").val(ui.item.value.Key);
                BOName = $("#selectBO_where").val();
                var selectedItemBO = $("#bussobjWhereTab").val();
                var querytypeBO = $('#TypeID :selected').val();
                var classtypeBO = $('#ClassType :selected').val();
                $.ajax({
                    url: '@Url.Action("GetAvailableFields", "QueryGeneration")',
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    data: { BOID: selectedItemBO, Type: querytypeBO, ClassType: classtypeBO },
                    success: function (data) {
                        sBOTableName = data[0].TableName;
                        BOName = sBOTableName;
                        $('#TargetUsers').val('');
                        //$("#SelectRightValues").empty();
                        $("#WhereDDL").empty();
                        $("#WhereDDL").html("<option value='0'>--Select--</option>");
                        $("#GroupBySelectBox").empty();
                        $("#OrderBySelectBox").empty();
                        $("#EditableleftValues").empty();
                        var List = $("#EditableleftValues li");
                        //$("#NonEditableleftValues").empty();
                        //$("#SelectLeftValues").html(""); // clear before appending new list
                        $("#OrderBySelectBox").html("<option value='0'>--Select--</option>");
                        //var groupallf = selectedwithgroups.split(', ');
                        $.each(data, function (i, availableval) {
                            if (availableval.IsWhere == true) {
                                if (availableval.ID > 0) {
                                    $("#WhereDDL").append(
                                $('<option id="' + availableval.ID + '"></option>').val(availableval.Name + "-" + availableval.Type).html("["+BOName+"]."+availableval.Name));
                                } else {
                                    $("#WhereDDL").append(
                                $('<option id="' + availableval.ID + '" data-value="' + availableval.FieldValue + '"></option>').val(availableval.Name + "-" + availableval.Type).html("["+BOName+"]."+availableval.Name));
                                }
                            }
                        });
                    }
                });
                return false;
            }
              ,
            focus: function (event, ui) {
                $("#selectBO_where").val(ui.item.value.Value);
                return false;
            }
        });

        $( ".FromMultipleBOGroupBY" ).autocomplete({
            source: function (request, response) {
                var AllXiLinks = @Html.Raw(Json.Encode(Model.AllBOss.Where(m => !string.IsNullOrEmpty(m.Key))));
                var List = [];
                $.each(AllXiLinks, function (key, value) {
                    List.push({ label: value.Value, value: value });
                });
                response($.ui.autocomplete.filter(List, request.term));
            }
         ,
            select: function (event, ui) {
                $("#selectBO_GroupBY").val(ui.item.value.Value);
                $("#bussobjGroupBY").val(ui.item.value.Key);
                BOName = $("#selectBO_GroupBY").val();
                var selectedItemBO = $("#bussobjGroupBY").val();
                var querytypeBO = $('#TypeID :selected').val();
                var classtypeBO = $('#ClassType :selected').val();
                $.ajax({
                    url: '@Url.Action("GetAvailableFields", "QueryGeneration")',
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    data: { BOID: selectedItemBO, Type: querytypeBO, ClassType: classtypeBO },
                    success: function (data) {
                        sBOTableName = data[0].TableName;
                        BOName = sBOTableName;
                        $("#GroupBySelectBox").empty();
                        $.each(data, function (i, availableval) {
                            if (availableval.IsGroupBy == true) {
                                $("#GroupBySelectBox").append(
                                $('<option></option>').val(availableval.ID).html("["+BOName+"]."+availableval.Name + " "));
                            }
                        })
                    }
                })
                return false;
            }
        ,
            focus: function (event, ui) {
                $("#selectBO_GroupBY").val(ui.item.value.Value);
                return false;
            }
        });

        $( ".FromMultipleBOGroupBY" ).autocomplete({
            source: function (request, response) {
                var AllXiLinks = @Html.Raw(Json.Encode(Model.AllBOss.Where(m => !string.IsNullOrEmpty(m.Key))));
                var List = [];
                $.each(AllXiLinks, function (key, value) {
                    List.push({ label: value.Value, value: value });
                });
                response($.ui.autocomplete.filter(List, request.term));
            }
       ,
            select: function (event, ui) {
                $("#selectBO_GroupBY").val(ui.item.value.Value);
                $("#bussobjGroupBY").val(ui.item.value.Key);

                BOName = $("#selectBO_GroupBY").val();
                var selectedItemBO = $("#bussobjGroupBY").val();
                var querytypeBO = $('#TypeID :selected').val();
                var classtypeBO = $('#ClassType :selected').val();
                $.ajax({
                    url: '@Url.Action("GetAvailableFields", "QueryGeneration")',
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    data: { BOID: selectedItemBO, Type: querytypeBO, ClassType: classtypeBO },
                    success: function (data) {
                        sBOTableName = data[0].TableName;
                        BOName = sBOTableName;
                        $("#GroupBySelectBox").empty();
                        $.each(data, function (i, availableval) {
                            if (availableval.IsGroupBy == true) {
                                $("#GroupBySelectBox").append(
                                $('<option></option>').val(availableval.ID).html("["+BOName+"]."+availableval.Name + " "));
                            }
                        })
                    }
                })
                return false;
            }
      ,
            focus: function (event, ui) {
                $("#selectBO_GroupBY").val(ui.item.value.Value);
                return false;
            }
        });

        $( ".FromMultipleBOOrderBY" ).autocomplete({
            source: function (request, response) {
                var AllXiLinks = @Html.Raw(Json.Encode(Model.AllBOss.Where(m => !string.IsNullOrEmpty(m.Key))));
                var List = [];
                $.each(AllXiLinks, function (key, value) {
                    List.push({ label: value.Value, value: value });
                });
                response($.ui.autocomplete.filter(List, request.term));
            }
       ,
            select: function (event, ui) {
                $("#selectBO_OrderBY").val(ui.item.value.Value);
                $("#bussobjOrderBY").val(ui.item.value.Key);
                BOName = $("#selectBO_OrderBY").val();
                var selectedItemBO = $("#bussobjOrderBY").val();
                var querytypeBO = $('#TypeID :selected').val();
                var classtypeBO = $('#ClassType :selected').val();
                $.ajax({
                    url: '@Url.Action("GetAvailableFields", "QueryGeneration")',
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    data: { BOID: selectedItemBO, Type: querytypeBO, ClassType: classtypeBO },
                    success: function (data) {
                       sBOTableName = data[0].TableName;
                        BOName = sBOTableName;
                        $("#OrderBySelectBox").empty();
                        $("#OrderBySelectBox").html("<option value='0'>--Select--</option>");
                        $.each(data, function (i, availableval) {
                            if (availableval.IsOrderBy == true) {
                                $("#OrderBySelectBox").append(
                                $('<option></option>').val(availableval.BOID).html("["+BOName+"]."+availableval.Name));
                            }
                        });
                    }
                });
                return false;
            }
      ,
            focus: function (event, ui) {
                $("#selectBO_OrderBY").val(ui.item.value.Value);
                return false;
            }
        });

        $('#PopupTypeDiv').hide();
        $('#PopupPositionsDiv').hide();
        $('#PopupLengthsDiv').hide();
        $('#DialogTypeDiv').hide();
        $('#DialogPositionsDiv').hide();
        $('#ResultIn').change(function(){
            $('#PopupLengthsDiv').hide();
            $('#PopupPositionsDiv').hide();
            $('#DialogPositionsDiv').hide();
            if($(this).val()=="Popup"){
                $('#PopupTypeDiv').show();
                $('#DialogTypeDiv').hide();
                $('#PopupType').val('Default');
            }
            else if($(this).val()=="Dialog"){
                $('#PopupTypeDiv').hide();
                $('#DialogTypeDiv').show();
                $('#DialogType').val("Center");
            }
            else{
                $('#PopupTypeDiv').hide();
                $('#DialogTypeDiv').hide();
            }
        });

        $('#PopupType').change(function(){
            if($(this).val()=="Max" || $(this).val()=="Medium"||$(this).val()=="Small"){
                $('#PopupPositionsDiv').hide();
                $('#PopupLengthsDiv').show();
            }
            else if($(this).val()=="Specific"){
                $('#PopupPositionsDiv').show();
                $('#PopupLengthsDiv').show();
            }
            else{
                $('#PopupPositionsDiv').hide();
                $('#PopupLengthsDiv').hide();
            }
        });

        $('#DialogType').change(function(){
            if($(this).val().toLowerCase()=="Specific".toLowerCase()){
                $('#DialogPositionsDiv').show();
                $('#PopupLengthsDiv').show();
            }
            else{
                $('#DialogPositionsDiv').hide();
                $('#PopupLengthsDiv').hide();
            }
        });
        $('#IsRowClick').change(function(){
            if($("#IsRowClick").is(':checked')){
                $("#RowClickDiv").show();  // checked
                $('#RowPopups').show();
            }
            else{
                $("#RowClickDiv").hide();  // unchecked
            }
        });


        //CreatedBy OneClick
        $('#bIsXICreatedByID').change(function(){
            if($("#bIsXICreatedBy").is(':checked')){
                $("#FKiCtrdOneClickID").show();  // checked
            }
            else{
                $("#FKiCtrdOneClickID").hide();  // unchecked
                $("#FKiCtrdOneClickIDs").val('');
            }
        });

        //UpdatedBy OneClick
        $('#bIszXUpdtByID').change(function(){
            if($("#bIsXIUpdatedBy").is(':checked')){
                $("#FKiUpdtOneClickID").show();  // checked
            }
            else{
                $("#FKiUpdtOneClickID").hide();  // unchecked
                $("#FKiUpdtOneClickIDs").val('');
            }
        });

        $('#IsColumnClick').change(function(){
            if($("#IsColumnClick").is(':checked'))
            {
                $("#ColumnClickDiv").show();  // checked
                $('#ColumnPopups').show();
            }
            else
                $("#ColumnClickDiv").hide();  // unchecked
        });

        $('#IsCellClick').change(function(){
            if($("#IsCellClick").is(':checked'))
            {
                $("#CellClickDiv").show();  // checked
                $('#CellPopups').show();
            }
            else
                $("#CellClickDiv").hide();  // unchecked
        });
        $('#IsCreate').change(function(){
            if($("#IsCreate").is(':checked')){
                $("#CreateClickDiv").show();  // checked
            }
            else
                $("#CreateClickDiv").hide();  // unchecked
            $("#CreateRoleID")[0].selectedIndex = 0;
            $("#CreateGroupID")[0].selectedIndex = 0;
        });
        $('#IsEdit').change(function(){
            if($("#IsEdit").is(':checked')){
                $("#EditClickDiv").show();  // checked
            }
            else
                $("#EditClickDiv").hide();  // unchecked
            $("#EditiRoleID")[0].selectedIndex = 0;
            $("#EditiGroupID")[0].selectedIndex = 0;
        });
        $('#IsDelete').change(function(){
            if($("#IsDelete").is(':checked')){
                $("#DeleteClickDiv").show();  // checked
            }
            else
                $("#DeleteClickDiv").hide();  // unchecked
            $("#DeleteiRoleID")[0].selectedIndex = 0;
            $("#DeleteiGroupID")[0].selectedIndex = 0;
        });
        $('#IsExport').change(function(){
            if($("#IsExport").is(':checked')){
                $("#FileExtensionDiv").show();  // checked
            }
            else
                $("#FileExtensionDiv").hide();  // unchecked
        });
        $('.feature-box ul').on('click', 'li', function () {
            $('.feature-box ul').each(function (i, li) {
                $('li').removeClass('selected');
            })
            $(this).toggleClass('selected');
        });
        $("#SelectBtnLeft").click(function () {
            MoveLeft();
        });
        $("#SelectRightValues").dblclick(function () {
            MoveLeft();
        });
        //Moving Select Fields To Left
        function MoveLeft() {
            var flag=1;
            var index=$("#selectBO :selected").val();
            BONamewhere = $("#WhereDDL :selected").text();
            DeaultBONAme="";
            DeaultBONAme=$('#business option:selected').text();
            var i, j;
            var selectedItem = $("#SelectRightValues .selected");
            var boname3=selectedItem[0].innerText.split(']')[0].split('[')[1];
            if (selectedItem.length != 0) {
                if(typeof boname3 === "undefined" && (DeaultBONAme == BOName))
                {
                    $("#SelectLeftValues").append(selectedItem);
                }
                {
                    if(BOName==boname3 || index==""){
                        $("#SelectLeftValues").append(selectedItem);
                    }
                    else
                    {
                        $("#SelectRightValues").find(selectedItem).remove();
                    }
                }
                var allrightvalues = $("#SelectRightValues li");
                VSelectFields = ""; HSelectFields = "";
                var hiddengrfields = "", SelFieldtype = "";
                if (allrightvalues.length != 0) {
                    for (i = 0; i < allrightvalues.length; i++) {
                        var sHideAttr = $("#SelectRightValues li")[i].innerText;
                        if (allrightvalues[i].id == "") {
                            hiddenselectgrfields = hiddenselectgrfields + sHideAttr + ', ';
                            hiddengrfields = hiddengrfields + sHideAttr + ", ";
                            var names = allrightvalues[i].attributes;
                            for (j = 0; j < names.length; j++) {
                                if (names[j].name == "data-name") {
                                    var fieldname = names[j].nodeValue;
                                    VSelectFields = VSelectFields + sHideAttr + ", ";
                                    HSelectFields = HSelectFields + sHideAttr + ", ";
                                }
                            }
                        }
                        else {
                            var names = allrightvalues[i].attributes;
                            for (j = 0; j < names.length; j++) {
                                if (names[j].name == "data-name") {
                                    VSelectFields = VSelectFields + sHideAttr + ", ";
                                    HSelectFields = HSelectFields + sHideAttr + ", ";
                                }
                            }
                        }
                    }
                    sSelectFields = "SELECT ";
                    if(boname3!=DeaultBONAme){
                        if(allrightvalues.length>0){
                            var flag=0;
                            $.each(allrightvalues, function(i, items){
                                var bo="";
                                bo =items.innerText.split(']')[0].split('[')[1];
                                if(bo==boname3){
                                    flag=1;
                                    return false;
                                }
                            })
                            if(flag==0){
                                insertedBO;
                                for( var i = 0; i < insertedBO.length; i++){
                                    if ( insertedBO[i] === boname3) {
                                        insertedBO.splice(i, 1);
                                    }
                                }
                                for( var i = 0; i < sLeftJoinArray.length; i++){
                                    if ( sLeftJoinArray[i].indexOf(boname3)>-1) {
                                        sLeftJoinArray.splice(i, 1);
                                        sWhereFields="";
                                        sOrderByFields="";
                                        $('#OrderByTable tbody').empty();
                                        $('#WhereTable tbody').empty();
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    sSelectFields = "";
                }
                sSelectFields = sSelectFields + VSelectFields.slice(0, -2);
                selwithtype = SelFieldtype;
                HSelectFields = HSelectFields.slice(0, -2);
                headings = HSelectFields;
                hiddenselectgrfields = hiddengrfields.slice(0, -2);
                BuildQuery();
            }
            else {
                ShowDialog('Please Select Field');
            }
        }

        $("#SelectBtnRight").click(function () {
            MoveRight();
        });
        $("#SelectLeftValues").dblclick(function () {
            MoveRight();
        });

        //Moving Select Fields To Right
        function MoveRight() {
            debugger
            var flag=0;
            DeaultBONAme="";
            //DeaultBONAme=$('#business option:selected').text();
            DeaultBONAme=$('#BusinessObject').val();
            var selectedItem = $("#SelectLeftValues .selected");
            var boname3=selectedItem[0].innerText.split(']')[0].split('[')[1];
            if(DeaultBONAme == boname3 || boname3 == sBOTableName){
                flag=1;
            }
            else{
                $.each(alldefaultdemovalues, function(i, item){
                    if($(item).attr('fktablename') !== 'undefined' && $(item).attr('fktablename') != '' && $(item).attr('fktablename') ==boname3)
                    {
                        flag=1
                    }})
            }
            if(flag==1){
                //AddSelectFields();
                var i, j;
                var selectedItem = $("#SelectLeftValues .selected");
                var boname3=selectedItem[0].innerText.split(']')[0].split('[')[1];
                var field=selectedItem[0].dataset.name;
                var value=selectedItem[0].dataset.value;
                if (selectedItem.length != 0) {
                    $("#SelectRightValues").append(selectedItem);
                    $("#SelectLeftValues_groupby").append($('<li data-name="'+BOName+'" data-value="null"></li>').html(BOName));
                    var allrightvalues = $("#SelectRightValues li");
                    VSelectFields = ""; HSelectFields = "";
                    var hiddengrfields = "", SelFieldtype = "";
                    for (i = 0; i < allrightvalues.length; i++) {
                        var sShowAttr = $("#SelectRightValues li")[i].innerText;
                        if (allrightvalues[i].id == "") {
                            hiddenselectgrfields = hiddenselectgrfields + sShowAttr + ', ';
                            hiddengrfields = hiddengrfields + sShowAttr + ", ";
                            var names = allrightvalues[i].attributes;
                            for (j = 0; j < names.length; j++) {
                                if (names[j].name == "data-name") {
                                    var fieldname = names[j].nodeValue;
                                    VSelectFields = VSelectFields + sShowAttr + ", ";
                                    HSelectFields = HSelectFields + sShowAttr + ", ";
                                }
                            }
                        }
                        else {
                            var names = allrightvalues[i].attributes;
                            for (j = 0; j < names.length; j++) {
                                if (names[j].name == "data-name") {
                                    VSelectFields = VSelectFields + sShowAttr + ", ";
                                    HSelectFields = HSelectFields + sShowAttr + ", ";
                                }
                            }
                        }
                    }
                    if(DeaultBONAme!=BOName){
                        var v=$.inArray(boname3, insertedBO);
                        if(v==-1){
                            $.each(alldefaultdemovalues, function(i, item){
                                if($(item).attr('fktablename') !== 'undefined' && $(item).attr('fktablename') != '' && $(item).attr('fktablename') ==boname3)
                                {
                                    fkTblName = $(item).attr('fktablename');
                                    var sLeftJoin=" " + $("#innerjoinType :selected").text() + " ";
                                    //var sLeftJoin=" LEFT JOIN ";
                                    sLeftJoinquery=sLeftJoin + boname3 + " on [" + boname3 + "]."+$(item).attr('PKColumn')+" = "+alldefaultdemovalues[i].innerText;
                                    sLeftJoinArray.push(sLeftJoinquery);
                                    insertedBO.push(boname3);
                                }
                            })
                        }
                    }
                    sSelectFields = "SELECT ";
                    sSelectFields = sSelectFields + VSelectFields.slice(0, -2);
                    selwithtype = SelFieldtype;
                    HSelectFields = HSelectFields.slice(0, -2);//Hidden Selected Fields
                    headings = HSelectFields;
                    hiddenselectgrfields = hiddengrfields.slice(0, -2);
                    BuildQuery();
                }
                else {
                    ShowDialog('Please Select Field');
                }
            }
            //else {
            //    ShowDialog('This field Table has NO Relation to '+ DeaultBONAme);
            //}
        }

        //Sorting Fields In Select Right Side
        $("#SelectRightValues").sortable({
            revert: true,
            connectWith: ".sortable",
            stop: function (event, ui) {
                var allrightvalues = $("#SelectRightValues li");
                VSelectFields = ""; HSelectFields = "";
                var hiddengrfields = "", SelFieldtype = "";
                for (i = 0; i < allrightvalues.length; i++) {
                    if (allrightvalues[i].id == "") {
                        hiddenselectgrfields = hiddenselectgrfields + allrightvalues[i].textContent + ', ';
                        hiddengrfields = hiddengrfields + allrightvalues[i].textContent + ", ";
                        var names = allrightvalues[i].attributes;
                        for (j = 0; j < names.length; j++) {
                            if (names[j].name == "name") {
                                SelFieldtype = SelFieldtype + names[j].nodeValue + ', ';
                            }
                            if (names[j].name == "data-name") {
                                VSelectFields = VSelectFields + allrightvalues[i].innerText + ", ";
                                HSelectFields = HSelectFields + allrightvalues[i].innerText + ", ";
                            }
                        }
                    }
                    else {
                        var names = allrightvalues[i].attributes;
                        for (j = 0; j < names.length; j++) {
                            if (names[j].name == "data-name") {
                                VSelectFields = VSelectFields + allrightvalues[i].innerText + ", ";
                                HSelectFields = HSelectFields + allrightvalues[i].innerText + ", ";
                            }
                        }
                    }
                }
                sSelectFields = "SELECT ";
                sSelectFields = sSelectFields + VSelectFields.slice(0, -2);
                selwithtype = SelFieldtype;
                HSelectFields = HSelectFields.slice(0, -2);
                headings = HSelectFields;
                hiddenselectgrfields = hiddengrfields.slice(0, -2);
                BuildQuery();
            }
        });
        $("#SelectRightValues").disableSelection();
        $("#SearchBtnRight").click(function () {
            var selectedItem = $("#SearchLeftValues .selected");
            if (selectedItem.length != 0) {
                $("#SearchRightValues").append(selectedItem);
            } else {
                ShowDialog('Please Select Field');
            }
        })
        $("#SearchBtnLeft").click(function () {
            var selectedItem = $("#SearchRightValues .selected");
            if (selectedItem.length != 0) {
                $("#SearchLeftValues").append(selectedItem);
            } else {
                ShowDialog('Please Select Field');
            }
        })
        function searchmoveleft(){
            var boname = $("#serachTabBO").val();
            var selectedItem = $("#SearchRightValues .selected");
            var boname1=selectedItem[0].innerText.split(']')[0].split('[')[1];
            var selectedItem = $("#SearchRightValues .selected");
            if (selectedItem.length != 0) {
                if(boname == boname1){
                    $("#SearchLeftValues").append(selectedItem);
                }
                else{
                    $("#SearchRightValues").find(selectedItem).remove();
                }
            } else {
                ShowDialog('Please Select One Field');
            }
        }

        $("#SearchRightValues").dblclick(function () {
            searchmoveleft();
        })

        $("#btnsearchleft").click(function () {
            searchmoveleft();
        })
        $("#SearchLeftValues").dblclick(function () {
            var selectedItem = $("#SearchLeftValues .selected");
            if (selectedItem.length != 0) {
                $("#SearchRightValues").append(selectedItem);
            }
        })
        $("#SearchRightValues").dblclick(function () {
            var selectedItem = $("#SearchRightValues .selected");
            if (selectedItem.length != 0) {
                $("#SearchLeftValues").append(selectedItem);
            }
        })
        $("#SearchRightValues").sortable();
        $("#SearchRightValues").disableSelection();
        $("#EditablebtnRight").click(function () {
            var selectedItem = $("#EditableleftValues .selected");
            var selected = $("#NonEditableleftValues .selected");
            if (selectedItem.length != 0) {
                if (selectedItem[0].id==""){
                    $("#EditablerightValues").append(selectedItem.css('color', "black"));
                    var li = selectedItem[0].textContent;
                    $('ul#NonEditableleftValues li').filter(function() { return $.text([this]) === li; }).remove();
                } else {
                    $("#EditablerightValues").append(selectedItem);
                    var li = selectedItem[0].textContent;
                    $('ul#NonEditableleftValues li').filter(function() { return $.text([this]) === li; }).remove();
                }

            } else if (selected.length != 0) {
                if (selected[0].id == "") {
                    $("#EditablerightValues").append(selected.css('color', 'green'));
                    var li = selected[0].textContent;
                    $('ul#EditableleftValues li').filter(function() { return $.text([this]) === li; }).remove();
                } else {
                    $("#EditablerightValues").append(selected);
                    var li = selected[0].textContent;
                    $('ul#EditableleftValues li').filter(function() { return $.text([this]) === li; }).remove();
                }

            }
            else {
                ShowDialog('Please Select One Field');
            }
        })
        $("#EditablebtnLeft").click(function () {
            EditableMoveLeft();
        })
        function EditableMoveLeft() {
            var selectedItem = $("#EditablerightValues .selected");
            if (selectedItem.length != 0) {
                var names = selectedItem[0].attributes;
                var name = "", datavalue = "";
                for (j = 0; j < names.length; j++) {
                    if (names[j].name == "data-type") {
                        if (names[j].nodeValue == "Editable") {
                            if (selectedItem[0].id == "") {
                                $("ul#EditableleftValues").append(selectedItem.attr('data-type', 'Editable').css('color', 'black'));
                                $("ul#NonEditableleftValues").append($('<li data-type="NonEditable"></li>').html(selectedItem[0].textContent));
                            } else {
                                $("ul#EditableleftValues").append(selectedItem);
                                $("ul#NonEditableleftValues").append($('<li style="color:#F5A301 !important;" id="' + selectedItem[0].id + '" data-type="NonEditable"></li>').html(selectedItem[0].textContent));
                            }
                        }
                        else {
                            if (selectedItem[0].id == "") {
                                $("ul#EditableleftValues").append(selectedItem.attr('data-type', 'Editable').css('color', 'black'));
                                $("ul#NonEditableleftValues").append($('<li data-type="NonEditable"></li>').html(selectedItem[0].textContent));
                            } else {
                                $("ul#EditableleftValues").append(selectedItem);
                                $("ul#NonEditableleftValues").append($('<li style="color:#F5A301 !important;" id="' + selectedItem[0].id + '" data-type="NonEditable"></li>').html(selectedItem[0].textContent));
                            }
                        }
                    }
                }
            }
            else{
                ShowDialog('Please Select One Field');
            }
        }
        $("#EditableleftValues").dblclick(function () {
            var selectedItem = $("#EditableleftValues .selected");
            if (selectedItem.length != 0) {
                if (selectedItem[0].id == "") {
                    $("#EditablerightValues").append(selectedItem.css('color', 'black'));
                    var li = selectedItem[0].textContent;
                    $('ul#NonEditableleftValues li').filter(function() { return $.text([this]) === li; }).remove();
                    //$('ul#NonEditableleftValues li:equals("' + li + '")').remove();
                } else {
                    $("#EditablerightValues").append(selectedItem);
                    var li = selectedItem[0].textContent;
                    $('ul#NonEditableleftValues li').filter(function() { return $.text([this]) === li; }).remove();
                }
            }
        })
        $("#EditablerightValues").dblclick(function () {
            EditableMoveLeft();
        })
        $("#EditablerightValues").sortable();
        $("#EditablerightValues").disableSelection();
        $("#NonEditableleftValues").dblclick(function () {
            var selectedItem = $("#NonEditableleftValues .selected");
            if (selectedItem[0].id == "") {
                selectedItem.css('color', 'green')
            }
            if (selectedItem.length != 0) {
                $("#EditablerightValues").append(selectedItem);
                var li = selectedItem[0].textContent;
                $('ul#EditableleftValues li').filter(function() { return $.text([this]) === li; }).remove();
            }
        })

        $("#WhereAddBtn").click(function () {
            $('#WhereDDL').val(0);
            $('#value').val("");
            $("#whereope").show();
            $("#WhereOkBtn").prop("disabled", false);
            $("#WhereAddBtn").prop("disabled", true);
            $('#WhereDDL').removeAttr('disabled');
            $('#WhereOperators').show();
        });

        $("#WhereDDL").change(function () {
            $('#Runtime').hide();
            $('#ORText').hide();
            $('#Operators').hide();
            $('#WhereValue').hide();
            var res = $("#WhereDDL :selected").val();
            var field = $("#WhereDDL :selected");
            var fieldid = field[0].id;
            var Datatype = res.split("-")[1];
            var fieldvalue = $("#WhereDDL :selected").attr('data-value');
            $.ajax({
                url: '@Url.Action("GetOperators", "QueryGeneration")',
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                datatype: "JSON",
                cache: false,
                data: { DataType: Datatype },
                success: function (data) {
                    $('#Operators').empty().show();
                    $('#Operators').html('<label>Select Operator</label><select id="oprator" class="form-control"></select>');
                    $.each(data, function (i, val) {
                        $('#oprator').append(
                            $('<option></option>').val(val.Value).html(val.DisplayValue)
                            );
                    });
                }
            });
            if (fieldid > 0) {
                $.ajax({
                    url: '@Url.Action("GetWhereValues", "QueryGeneration")',
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    datatype: "JSON",
                    cache: false,
                    data: { FieldID: fieldid },
                    success: function (data) {
                        if (data.IsRunTime == true) {
                            $('#Runtime').show();
                            $('#Runtime').html('<label>Value</label><input type="text" class="form-control" id="value1" placeholder="Enter Where Value" onKeyPress="KeyPressed()" onchange = "OnChangeEvent()" onfocusout="FocusOut()"/>');
                        }
                        else {
                            $('#Runtime').show();
                            $('#Runtime').html('<label>Value</label><input type="text" class="form-control" id="value1" placeholder="Enter Where Value" onKeyPress="KeyPressed()" onchange = "OnChangeEvent()" onfocusout="FocusOut()"/>');
                        }
                        if (data.IsDBValue == true) {
                            if (data.IsRunTime == false) {
                                $('#value1').val('');
                                $('#Runtime').hide();
                                $('#ORText').hide();
                                $("#WhereValue").show();
                            }
                            else {
                                $('#ORText').empty().append("OR").show();
                                $("#WhereValue").show();
                            }
                            var query = data.DBQuery;
                            $.ajax({
                                url: '@Url.Action("GetDBValuesForField", "QueryGeneration")',
                                type: 'GET',
                                contentType: "application/json; charset=utf-8",
                                datatype: "JSON",
                                cache: false,
                                data: { Query: query },
                                success: function (data) {
                                    $('#WhereValue').empty();
                                    $('#WhereValue').html('<label>DBValue</label><select id="value" class="form-control" onchange="selectchange()"><option value="0">--Select--</option></select>');
                                    $.each(data, function (i, val) {
                                        $('#value').append(
                                            $('<option></option>').val(val.Value).html(val.Expression)
                                            );
                                    });
                                }
                            });

                        }
                        else if (data.IsWhereExpression == true) {
                            if (data.IsRunTime == false) {
                                $('#value1').val('');
                                $('#Runtime').hide();
                                $('#ORText').hide();
                                $("#WhereValue").show();
                            }
                            else {
                                $('#ORText').empty().append("OR").show();
                                $("#WhereValue").show();
                            }
                            $('#WhereValue').empty();
                            $('#WhereValue').html('<label>Expression</label><select id="value" class="form-control" onchange="selectchange()"><option value="0">--Select--</option></select>');
                            $('#value').append(
                                $('<option></option>').val(data.WhereExpreValue).html(data.WhereExpression)
                                );
                        }
                        else if (data.IsDate == true) {
                            if (data.IsRunTime == false) {
                                $('#value1').val('');
                                $('#Runtime').hide();
                                $('#ORText').hide();
                                $("#WhereValue").show();
                            }
                            else {
                                $('#ORText').empty().append("OR").show();
                                $("#WhereValue").show();
                            }
                            $('#WhereValue').empty();
                            var dates = new Array();
                            var datevaluess = new Array();
                            dates = data.DateExpression.split(',');
                            datevalues = data.DateValue.split('-');
                            $('#WhereValue').html('<label>Date</label><select id="value" class="form-control" onchange="selectchange()"><option value="0">--Select--</option></select>');
                            for (i = 0; i < dates.length; i++) {
                                $('#value').append(
                                    $('<option></option>').val(datevalues[i]).html(dates[i])
                                );
                            }
                        }
                    },
                    error: function (data) {
                    }
                });
            }
            else {
                $('#Runtime').show();
                $('#Runtime').html('<label>Value</label><input type="text" class="form-control" id="value1" placeholder="Enter Where Value" onKeyPress="KeyPressed()" onchange = "OnChangeEvent()" onfocusout="FocusOut()"/>');
                //$('#value1').val(fieldvalue);
            }
        });

        $("#WhereOkBtn").click(function () {
            var rowCount = $('#WhereTable tr').length;
            var res = $("#WhereDDL :selected").val();
            var Datatype = res.split("-")[1];
            var textboxvalue = $('#value1').val();
            var WhereEditDataType = "";
            var selctboxvalue = $('#value').val();
            if (res == 0) {
                ShowDialog('Please Select Field');
            }
            else {
                if (textboxvalue == "" && selctboxvalue == 0) {
                    ShowDialog('Please Enter Value Or Select From Drop Down');
                }
                else if (textboxvalue == "" && selctboxvalue == undefined) {
                    ShowDialog('Please Enter Value');
                    $('#value1').focus();
                }
                else if (textboxvalue == undefined && selctboxvalue == 0) {
                    ShowDialog('Please Select Value');
                    $('#value').focus();
                }
                else {
                    if ((textboxvalue.length > 0 && selctboxvalue == 0) || (textboxvalue.length > 0 && selctboxvalue == undefined)) {
                        if (sWhereFields == "") {

                        } else {
                            sWhereFields = sWhereFields + $('#Whereoperator option:selected').text();
                            HiddenWhereFielddata = HiddenWhereFielddata + " " + $('#Whereoperator option:selected').text() + " ";
                            var col = '<td>' + $('#Whereoperator option:selected').text() + '</td>';
                            col = col + '<td></td>';
                            col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deletewhereRow(this)'>Remove</button>"); +'</td>';
                            var row = '<tr>' + col + '</tr>';
                            $('#WhereTable').append(row);
                        }
                        var DataType = res.split("-")[1];
                        var Operator = $('#Operators option:selected').text();
                        var ActOpt = $('#Operators option:selected').val();
                        WhereEditDataType = WhereEditDataType + " " + $("#WhereDDL :selected").text() + ",";
                        var optr = $('#Operators option:selected').val();
                        var wfield = $("#WhereDDL :selected").text();
                        var woptr = $('#Operators option:selected').val();
                        var wvalue = $("#value1").val();
                        var displaywvalue = $("#value1").val();
                        var WhereFielddata = {
                            where: $("#WhereDDL :selected").text(),
                            selectoperator: Operator,
                            inputvalue: $("#value1").val(),
                        }
                        if (Datatype == "INT") {
                        } else {
                            if (Operator == "STARTS WITH") {
                                wvalue = wvalue + '%';
                                displaywvalue = displaywvalue + '%';
                            } else if (Operator == "NOT STARTS WITH") {
                                wvalue = wvalue + '%';
                                displaywvalue = displaywvalue + '%';
                            } else if (Operator == "ENDS WITH") {
                                wvalue = '%' + wvalue;
                                displaywvalue = '%' + displaywvalue;
                            } else if (Operator == "NOT ENDS WITH") {
                                wvalue = '%' + wvalue;
                                displaywvalue = '%' + displaywvalue;
                            } else if (Operator == "CONTAINS") {
                                wvalue = '%' + wvalue + '%';
                                displaywvalue = '%' + displaywvalue + '%';
                            }
                        }

                    }
                    else if ((textboxvalue.length == 0 && selctboxvalue != 0) || (textboxvalue == undefined && selctboxvalue != 0)) {
                        if (sWhereFields == "") {

                        } else {
                            sWhereFields = sWhereFields + $('#Whereoperator option:selected').text();
                            HiddenWhereFielddata = HiddenWhereFielddata + " " + $('#Whereoperator option:selected').text() + " ";
                            var col = '<td>' + $('#Whereoperator option:selected').text() + '</td>';
                            col = col + '<td></td>';
                            col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deletewhereRow(this)'>Remove</button>"); +'</td>';
                            var row = '<tr>' + col + '</tr>';
                            $('#WhereTable').append(row);
                        }
                        var DataType = res.split("-")[1];
                        var Operator = $('#Operators option:selected').text();
                        var ActOpt = $('#Operators option:selected').val();
                        WhereEditDataType = WhereEditDataType + " " + $("#WhereDDL :selected").text() + ",";
                        var WhereFielddata = {
                            where: $("#WhereDDL :selected").text(),
                            selectoperator: Operator,
                            inputvalue: $("#value option:selected").val(),
                        }
                        var displaywvalue = $("#value option:selected").val();
                        if (Datatype == "INT") {
                        }
                        else if (Datatype == "DATETIME") {
                        }
                        else {
                            var wvalue = $("#value option:selected").val();
                            if (Operator == "STARTS WITH") {
                                wvalue = wvalue + '%';
                                displaywvalue = displaywvalue + '%';
                            } else if (Operator == "NOT STARTS WITH") {
                                wvalue = wvalue + '%';
                                displaywvalue = displaywvalue + '%';
                            } else if (Operator == "ENDS WITH") {
                                wvalue = '%' + wvalue;
                                displaywvalue = '%' + displaywvalue;
                            } else if (Operator == "NOT ENDS WITH") {
                                wvalue = '%' + wvalue;
                                displaywvalue = '%' + displaywvalue;
                            } else if (Operator == "CONTAINS") {
                                wvalue = '%' + wvalue + '%';
                                displaywvalue = '%' + displaywvalue + '%';
                            }
                        }
                    }

                    if(displaywvalue.indexOf('XIP|')>-1){
                        var col = '<td>' + (WhereFielddata.where) + " " + ActOpt + " '" + displaywvalue + "'" + '</td>';
                        col = col + '<td>' + ("<input type='text' id='text_"+displaywvalue+"' name='aliasname' required='required' class='form-control col-md-1' style='height: 28px; width:200px;' />") + '</td>';
                    }else{
                        if (DataType == "INT") {
                            var col = '<td>' + (WhereFielddata.where) + " " + WhereFielddata.selectoperator + " " + WhereFielddata.inputvalue+'</td>';
                            col = col + '<td></td>';
                        }
                        else if(DataType == "DATETIME") {
                            if(textboxvalue.length>0){
                                var col = '<td>' + (WhereFielddata.where) + " " + ActOpt + " '" + displaywvalue + "'" + '</td>';
                                col = col + '<td></td>';
                            }
                            else if(selctboxvalue.length>0){
                                var col = '<td>' + (WhereFielddata.where) + " " + ActOpt + " " + displaywvalue + "" + '</td>';

                                //insertXIPvalue.push(displaywvalue);
                            }
                        }
                        else {
                            var col = '<td>' + (WhereFielddata.where) + " " + ActOpt + " '" + displaywvalue + "'" + '</td>';
                            col = col + '<td></td>';
                        }
                    }
                    col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deletewhereRow(this)'>Remove</button>"); +'</td>'
                    var row = '<tr>' + col + '</tr>';
                    $('#WhereTable').append(row);
                    var wherecontent = "";
                    if (sWhereFields == "") {
                        $('#WhereTable tbody tr').each(function () {
                            $(this).find('td').each(function () {
                                if ($(this).text()!="") {
                                    if(textboxvalue==""){
                                        if($(this).text()!="Remove"){
                                            var val1= "{"+$(this).text().split('=')[1].replace("'", "").replace("'", "").replace(" ", "")+"}";
                                            wherecontent = wherecontent + $(this).text().replace($(this).text().split('=')[1], val1) + " ";
                                        }
                                        else{
                                            wherecontent = wherecontent + $(this).text() + " ";
                                        }
                                    }
                                    else{
                                        wherecontent = wherecontent + $(this).text() + " ";
                                    }
                                }
                            })
                            wherecontent = wherecontent.replace("Remove ", "");
                        })
                        wherecontent = wherecontent.slice(0, -1);
                    }
                    else {
                        $('#WhereTable tbody tr').each(function () {
                            $(this).find('td').each(function () {
                                if ($(this).text() != "") {
                                    if($(this).text().indexOf('XIP|')>-1){
                                        var val1= "{"+$(this).text().split('=')[1].replace("'", "").replace("'", "").replace(" ", "")+"}";
                                        wherecontent = wherecontent + $(this).text().replace($(this).text().split('=')[1], val1) + " ";
                                    }else{
                                        wherecontent = wherecontent + $(this).text() + " ";
                                    }
                                }
                            })
                            wherecontent = wherecontent.replace("Remove ", "");
                        })
                        wherecontent = wherecontent.slice(0, -1);
                    }
                    sWhereFields = " WHERE " + wherecontent;
                    HiddenWhereFielddata = HiddenWhereFielddata.replace(" WHERE ", "");
                    hiddenwherefields = " WHERE " + HiddenWhereFielddata;
                    whereeditwithtype = WhereEditDataType;
                    BuildQuery();
                    var query = $("#VisibleQuery").val();
                    query = query.replace(/&#39;/g, "'");
                    document.getElementById("VisibleQuery").value = "";
                    document.getElementById("VisibleQuery").value = query;
                    $('#WhereDDL').val(0);
                    $('#WhereDDL').prop('disabled', true);

                    $('#WhereValue').hide();
                    $('#ORText').hide();
                    $('#Runtime').hide();
                    $('#Operators').hide();
                    clicked = "clicked";
                    $("#whereope").show();
                    $("#WhereOkBtn").prop("disabled", true);
                    $("#WhereAddBtn").prop("disabled", false);
                    $('#value').removeAttr('disabled');
                    $('#value1').removeAttr('disabled');
                    $('#oprator').hide();
                    $('#WhereOperators').hide();
                    $('#NVsTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#ParamsTab').hide();
                    $('#AddMoreParam').hide();
                    $('#SaveNDVs').hide();
                    $('#ButtonsTab').hide();
                    $('#AccessTab').hide();
                }
            }
        })
        $("#GroupByOkBtn").click(function () {
            var rowCount = $('#GroupByTable tr').length;
            var groupbyfields = $("#GroupBySelectBox :selected").text();
            var flag = 1;
            $('#GroupByTable tbody tr').each(function () {
                if(groupbyfields.trim() == this.firstChild.innerText)
                {
                    var txt= this.firstChild.innerText;
                    flag=0;
                }
            })
            if(flag){
                if (groupbyfields != "") {
                    groupbyfields = groupbyfields.replace(/ /g, ', ');
                    groupbyfields = groupbyfields.slice(0, -2);
                    var GroupFielddata = {
                        group: groupbyfields,
                    }
                    var col = '<td>' + (GroupFielddata.group) + '</td>';
                    col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deleteRow(this)'>Remove</button>"); +'</td>'
                    var row = '<tr>' + col + '</tr>';
                    $('#GroupByTable').append(row);
                    var groupcontent = "", orggrfield = "";
                    if (sGroupByFields == "") {
                        $('#GroupByTable tbody tr').each(function () {
                            $(this).find('td').each(function () {
                                groupcontent = groupcontent + $(this).text() + " ";
                            })
                            groupcontent = groupcontent.replace("Remove ", " ");
                        })
                    }
                    else {
                        $('#GroupByTable tbody tr').each(function () {
                            $(this).find('td').each(function () {
                                groupcontent = groupcontent + $(this).text() + " ";
                            })
                            groupcontent = groupcontent.replace(" Remove ", ", ");
                        })
                    }
                    sGroupByFields = " GROUP BY " + groupcontent;
                    originalgrfields = " GROUP BY " + groupcontent;
                    sGroupByFields = sGroupByFields.slice(0, -2);
                    originalgrfields = originalgrfields.slice(0, -2);
                    BuildQuery();
                } else {
                    ShowDialog('Please Select Atleast One Field');
                }
                $('#NVsTab').hide();
                $('#AddMore').hide();
                $('#SaveNVs').hide();
                $('#ParamsTab').hide();
                $('#AddMoreParam').hide();
                $('#SaveNDVs').hide();
                $('#ButtonsTab').hide();
                $('#AccessTab').hide();
            }
            else
            {
                ShowDialog('Field Already Selected');
            }
        })
        $("#OrderByOkBtn").click(function () {
            var rowCount = $('#OrderByTable tr').length;
            var flag=1;
            var OrderFielddata = {
                order: $("#OrderBySelectBox :selected").text(),
                ordertype: $("#OrderByType :selected").text(),
            }

            $('#OrderByTable tbody tr').each(function () {
                $(this).find('td').each(function () {
                    if($(this).text()==OrderFielddata.order){
                        flag=0;
                    }
                })
            })

            if(flag){
                if ($("#OrderBySelectBox :selected").val() != 0 && $("#OrderByType :selected").val() != 0) {
                    var col = '<td>' + (OrderFielddata.order) + '</td>';
                    col = col + '<td>' + OrderFielddata.ordertype + '</td>'
                    col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deleteorderRow(this)'>Remove</button>"); +'</td>'
                    var row = '<tr>' + col + '</tr>';
                    $('#OrderByTable').append(row);
                    var ordercontent = "";
                    if (sOrderByFields == "") {
                        $('#OrderByTable tbody tr').each(function () {
                            $(this).find('td').each(function () {
                                ordercontent = ordercontent + $(this).text() + " ";
                            })
                            ordercontent = ordercontent.replace("Remove ", " ");
                        })
                    }
                    else {
                        $('#OrderByTable tbody tr').each(function () {
                            $(this).find('td').each(function () {
                                ordercontent = ordercontent + $(this).text() + " ";
                            })
                            ordercontent = ordercontent.replace(" Remove ", ", ");
                        })
                    }
                    sOrderByFields = " ORDER BY " + ordercontent;
                    sOrderByFields = sOrderByFields.slice(0, -2);
                    BuildQuery();
                    $('#OrderBySelectBox').val(0);
                    $('#OrderByType').val(0);
                    if (sGroupByFields != "") {
                        if (sGroupByFields.indexOf(",") >= 0) {
                            if (sGroupByFields.charAt(sGroupByFields.length - 1) == " ") {
                                sGroupByFields = sGroupByFields.slice(0, -2);
                            }
                            sGroupByFields = sGroupByFields.replace(" GROUP BY ", "");
                        }
                        else {
                            sGroupByFields = sGroupByFields.replace(" GROUP BY ", "");
                        }
                        var gbf = sGroupByFields.split(/[\s,]+/);
                        var ofields = sOrderByFields;
                        ofields = ofields.replace(" ORDER BY ", "");
                        ofields = ofields.replace(/ ASC/g, "");
                        ofields = ofields.replace(/ DESC/g, "");
                        var obf = ofields.split(/[ ,]+/);
                        if (gbf != "") {
                            var AllFields = gbf.concat(obf);
                        } else {
                            var AllFields = obf;
                        }
                        $('#GroupByTable tbody').empty();
                        if (AllFields.length > 1) {
                            var Distinct = AllFields.filter(function (item, pos) { return AllFields.indexOf(item) == pos });
                        } else {
                            var Distinct = AllFields;
                        }

                        if (Distinct.length != 0) {
                            sGroupByFields = " GROUP BY ";
                            for (i = 0; i < Distinct.length; i++) {
                                var col = '<td>' + Distinct[i] + '</td>';
                                col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deleteRow(this)'>Remove</button>"); +'</td>'
                                var row = '<tr>' + col + '</tr>';
                                $('#GroupByTable').append(row);
                                sGroupByFields = sGroupByFields + Distinct[i] + ', ';
                            }
                        }
                        sGroupByFields = sGroupByFields.slice(0, -2);
                        BuildQuery();
                    }
                } else {
                    ShowDialog('Please Select Field');
                }
            }
            else{
                ShowDialog('Value Already selected!');
            }
            $('#NVsTab').hide();
            $('#AddMore').hide();
            $('#SaveNVs').hide();
            $('#ParamsTab').hide();
            $('#AddMoreParam').hide();
            $('#SaveNDVs').hide();
            $('#ButtonsTab').hide();
            $('#AccessTab').hide();
        })
        $("#reset").click(function () {
            sSelectFields = sWhereFields = sGroupByFields = sOrderByFields = "", headings="";
            BuildQuery();
            //$('input[type=text]').val("");
            $("#SelectRightValues").empty();
            $('#OrderBySelectBox').val(0);
            $('#WhereDDL').val(0);
            $('#OrderByType').val(0);
            $('#WhereDDL').removeAttr('disabled');
            $("#WhereOkBtn").removeAttr('disabled');
            $("#WhereAddBtn").prop("disabled", true);
            $("#WhereTable tbody").empty();
            $("#GroupByTable tbody").empty();
            $("#OrderByTable tbody").empty();
            $('.nav-tabs').find('li.active').removeClass('active');
            $('#tabs').find('div.active').removeClass('active');
            $('#liselect').addClass('active');
            $('#SelectTab').addClass('active');
            $('#QueryResult').empty();
            $('#ValidQuery').hide();
            $('#QueryStatus').hide();
            sLeftJoinArray.length=0;
            insertedBO.length=0;
            //selectBO_GroupBY.selectedIndex=0;
            //selectBO_where.selectedIndex=0;
            //selectBO_Order.selectedIndex=0;
            //selectBO.selectedIndex=0;
            BusinessObject();
        })

        $("#Save").click(function () {
            IsQuerySavable = true;
            Preview('Save');
        });
        $("#QueryDelete").click(function () {
            var queryid = $('#QueryID').text();
            $(".QueryFormWindow").html('Query will be deleted!!<br/>Do you want to continue?');
            $(".QueryFormWindow").dialog({
                title: "Query Generation",
                modal: true,
                buttons: [
                    {
                        text: "Yes",
                        click: function () {
                            $(".QueryFormWindow").dialog('close');
                            $.blockUI({ message: '<h3 class="nh3"><img src="@PhysicalPath/Scripts/ckfinder/plugins/gallery/colorbox/images/loading.gif" width="50px" /> Please wait while deleting...</h3>' });
                            $.ajax({
                                url: '@Url.Action("DeleteQuery", "QueryGeneration")',
                                type: 'POST',
                                datatype: 'JSON',
                                data: { QueryID: queryid },
                                cache: false,
                                success: function (data) {
                                    window.location.href = '@Url.Action("AddQuery", "QueryGeneration")';
                                },
                                error: function (data) {
                                },
                            });
                        }
                    },
                {
                    text: "No",
                    click: function () {
                        $(".QueryFormWindow").dialog('close');
                    }
                }
                ]
            });
            $.unblockUI();
        });

        $('.nav-tabs li').click(function (e) {
            if((this).disabled == true || (this).classList[0] == "disabled" || (this).classList[1] =="disabled"){}
            else{
                if ($(this).hasClass('orderclass')) {
                    $('#Save').show();
                    $('#Save').val("Save & Continue");
                    $('#Continue').hide();
                    $('#NVsTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#ParamTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#QueryResult').show();
                    $('#Querygen').show();
                    $('.QueryBtns').show();
                    $('#ButtonsTab').hide();
                    $('#AccessTab').hide();
                } else {
                    //if(!$('li#liaction').hasClass('disabled')){
                    $('#Save').hide();
                    $('#Continue').show();
                    $('#NVsTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#ParamsTab').hide();
                    $('#AddMoreParam').hide();
                    $('#SaveNDVs').hide();
                    $('#Querygen').show();
                    $('.QueryBtns').show();
                    $('#ButtonsTab').hide();
                    $('#AccessTab').hide();
                    //}
                }
                if ($('li#lisearch').hasClass('active') || $('li#liaction').hasClass('active')) {
                    $('#Save').show();
                    $('#Save').val("Save");
                    $('#Continue').hide();
                    $('#NVsTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#ParamsTab').hide();
                    $('#AddMoreParam').hide();
                    $('#SaveNDVs').hide();
                    $('#Querygen').hide();
                    $('.QueryBtns').hide();
                    $('#ButtonsTab').hide();
                    $('#AccessTab').hide();
                }
                else {
                    $('#Save').hide();
                    $('#Continue').show();
                    if (IsCustomQuery) {

                    }
                    else {
                        EditedWhere();
                        //AddSelectFields();
                        if ($(this).hasClass('disabled')) {
                            e.preventDefault();
                        }
                    }
                }
                if ($(this).hasClass('fieldactions')) {
                    $('#Save').show();
                    $('#Save').val("Save");
                    $('#Continue').hide();
                }
            }

        })
        $('.nav-tabs li#liquery').click(function () {
            if ($('li#liquery').hasClass('active')) {$('#Querygen').hide();$('.QueryBtns').hide();}
            if ($('li#liorder').hasClass('active')) {
                $('#Save').show();
                $('#Save').val("Save & Continue");
                $('#Continue').hide();
                $('#NVsTab').hide();
                $('#AddMore').hide();
                $('#SaveNVs').hide();
                $('#ParamsTab').hide();
                $('#AddMoreParam').hide();
                $('#SaveNDVs').hide();
                $('#Querygen').show();
                $('.QueryBtns').show();
                $('#ButtonsTab').hide();
                $('#AccessTab').hide();
            }
            else if ($('li#lisearch').hasClass('active') || $('li#liaction').hasClass('active') || $('li#litarget').hasClass('active')|| $('li#lischeduler').hasClass('active')) {
                //$('#Save').show();
                //$('#Save').val('Save');
                //$('#Continue').hide();
            } else {
                //$('#Save').hide();
                //$('#Continue').show();
            }
        });
        $('.nav-tabs li#lisearch').click(function () {
            if (!$('li#lisearch').hasClass('disabled')) {
                if ($('li#liorder').hasClass('active')) {
                    $('#Save').show();
                    $('#Save').val('Save & Continue');
                    $('#Continue').hide();
                    $('#NVsTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#ParamsTab').hide();
                    $('#AddMoreParam').hide();
                    $('#SaveNDVs').hide();
                    $('#Querygen').show();
                    $('.QueryBtns').show();
                    $('#ButtonsTab').hide();
                    $('#AccessTab').hide();
                } else if ($('li#lisearch').hasClass('active') || $('li#liaction').hasClass('active') || $('li#litarget').hasClass('active') || $('li#lischeduler').hasClass('active')) {
                    $('#Save').show();
                    $('#Save').val('Save');
                    $('#Continue').hide();
                    $('.QueryBtns').hide()
                    $('#QueryDelete').hide();
                    $('#Close').show();
                } else {
                    $('#QueryBtns').hide();
                    $('#Save').hide();
                    $('#Continue').show();
                }
            }
        });
        $('.nav-tabs li#liaction').click(function () {
            if (!$(this).hasClass('disabled')) {
                if ($('li#liorder').hasClass('active')) {
                    $('#Save').val('Save & Continue');
                    $('#Save').show();
                    $('#Continue').hide();
                    $('#NVsTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#ParamsTab').hide();
                    $('#AddMoreParam').hide();
                    $('#SaveNDVs').hide();
                    $('#Querygen').show();
                    $('.QueryBtns').hide();
                    $('#ButtonsTab').hide();
                    $('#AccessTab').hide();
                } else if ($('li#lisearch').hasClass('active') || $('li#liaction').hasClass('active') || $('li#litarget').hasClass('active') || $('li#lischeduler').hasClass('active')) {
                    $('#Save').show();
                    $('#Save').val('Save');
                    $('.QueryBtns').hide()
                    $('#Continue').hide();
                    $('#QueryDelete').hide(); $('#Close').show();
                } else {
                    $('#QueryBtns').hide();
                    $('#Save').hide();
                    $('#Continue').show();
                }
            }
            //else
            //{
            //    $('.QueryBtns').hide();
            //}
        });
        $('.nav-tabs li#litarget').click(function () {
            if (!$(this).hasClass('disabled')) {
                if ($('li#liorder').hasClass('active')) {
                    $('#Save').val('Save & Continue');
                    $('#Save').show();
                    $('#Continue').hide();
                    $('#NVsTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#ParamsTab').hide();
                    $('#AddMoreParam').hide();
                    $('#SaveNDVs').hide();
                    $('#Querygen').hide();
                    $('.QueryBtns').hide();
                    $('#ButtonsTab').hide();
                    $('#AccessTab').hide();
                } else if ($('li#lisearch').hasClass('active') || $('li#liaction').hasClass('active') || $('li#litarget').hasClass('active') || $('li#litarget').hasClass('active')) {
                    $('#Save').show();
                    $('#Save').val('Save');
                    $('#Continue').hide();
                    $('#QueryDelete').hide(); $('#Close').show();
                    $('.QueryBtns').hide();
                } else {
                    $('#Querygen').hide();
                    $('#Save').hide();
                    $('#Continue').show();
                }
            }
            //else
            //{
            //    $('.QueryBtns').hide();
            //}
        });
        $('.nav-tabs li#lischeduler').click(function () {
            if (!$(this).hasClass('disabled')) {
                if ($('li#liorder').hasClass('active')) {
                    $('#Save').val('Save & Continue');
                    $('#Save').show();
                    $('#Continue').hide();
                    $('#NVsTab').hide();
                    $('#AddMore').hide();
                    $('#SaveNVs').hide();
                    $('#ParamsTab').hide();
                    $('#AddMoreParam').hide();
                    $('#SaveNDVs').hide();
                    $('.QueryBtns').hide();
                    $('#ButtonsTab').hide();
                    $('#AccessTab').hide();
                } else if ($('li#lisearch').hasClass('active') || $('li#liaction').hasClass('active') || $('li#litarget').hasClass('active') || $('li#litarget').hasClass('active')) {
                    $('#Save').show();
                    $('#Save').val('Save');
                    $('#Continue').hide();
                    $('#QueryDelete').hide(); $('#Close').show();
                    $('.QueryBtns').hide();
                } else {
                    $('#Querygen').hide();
                    $('#Save').hide();
                    $('#Continue').show();
                }
            }
            //else
            //{
            //    $('.QueryBtns').hide();
            //}
        });

        $('li#liNVs').click(function(){
            if(!($(this).hasClass('disabled'))){
                $('#Save').show();
                $('#Save').val("Update & Continue");
                $('#Continue').hide();
                $('#Querygen').hide();
                $('#QueryResult').hide();
                $('#NVsTab').show();
                $('#AddMore').show();
                $('#SaveNVs').show();
                $('#ParamsTab').hide();
                $('#AddMoreParam').hide();
                $('#SaveNDVs').hide();
                $('.QueryBtns').hide();
                $('#ButtonsTab').hide();
                $('#AccessTab').hide();
            }
        });

        $('li#liParams').click(function(){
            if(!($(this).hasClass('disabled'))){
                $('#Save').show();
                $('#Save').val("Update & Continue");
                $('#Continue').hide();
                $('#Querygen').hide();
                $('#QueryResult').hide();
                $('#NVsTab').hide();
                $('#AddMore').hide();
                $('#SaveNVs').hide();
                $('#ParamsTab').show();
                $('#AddMoreParam').show();
                $('#SaveNDVs').show();
                $('.QueryBtns').hide();
                $('#ButtonsTab').hide();
            }
        });

        $('li#liButtons').click(function(){
            if(!($(this).hasClass('disabled'))){
                $('#Save').show();
                $('#Save').val("Update & Continue");
                $('#Continue').hide();
                $('#QueryArea').hide();
                $('#Querygen').hide();
                $('#QueryResult').hide();
                $('#NVsTab').hide();
                $('#SaveNVs').hide();
                $('#ParamsTab').hide();
                $('#ButtonsTab').show();
                $('#AddMore').hide();
                $('#AddMoreParam').hide();
                $('#SaveNDVs').hide();
                $('.QueryBtns').hide();
                $('#QueryResult').hide();
                $('#AccessTab').hide();
            }
        });

        $('li#li1Access').click(function(){
            if(!($(this).hasClass('disabled'))){
                $('#Save').show();
                $('#Save').val("Update & Continue");
                $('#Continue').hide();
                $('#QueryArea').hide();
                $('#Querygen').hide();
                $('#QueryResult').hide();
                $('#NVsTab').hide();
                $('#SaveNVs').hide();
                $('#ParamsTab').hide();
                $('#ButtonsTab').hide();
                $('#AddMore').hide();
                $('#AddMoreParam').hide();
                $('#SaveNDVs').hide();
                $('.QueryBtns').hide();
                $('#QueryResult').hide();
                Save1ClickPermission($('#QueryID').text());
            }
        });

        $('#Continue').click(function () {
            $('.nav-tabs').find('li.active').removeClass('active').next('li').addClass('active');
            $('#tabs').find('div.active').removeClass('active').next('div.tab-pane').addClass('active');
            $("ul.nav-tabs").find("li").each(function () {
                $(this).removeClass('disabled');
            });
            $("ul.nav-tabs").find("a").each(function () {
                $(this).attr('data-toggle', 'tab');
            });
            $("ul.nav-tabs").find("li#liquery").each(function () {
                $(this).prop('disabled', true).addClass('disabled');
            });
            $("ul.nav-tabs").find("li#liquery a").each(function () {
                $(this).removeAttr('data-toggle');
            });
            $('li#lisearch').removeClass('active');
            $('li#lisearch a').removeAttr('data-toggle');
            $('li#lisearch').prop('disabled', true).addClass('disabled');
            $('li#liaction').removeClass('active');
            $('li#liaction a').removeAttr('data-toggle');
            $('li#liaction').prop('disabled', true).addClass('disabled');
            $('li#litarget').removeClass('active');
            $('li#litarget a').removeAttr('data-toggle');
            $('li#litarget').prop('disabled', true).addClass('disabled');
            $('li#lischeduler').removeClass('active');
            $('li#lischeduler a').removeAttr('data-toggle');
            $('li#lischeduler').prop('disabled', true).addClass('disabled');
            if ($('li#liorder').hasClass('active')) {
                $('#Save').show();
                $('#Save').val("Save & Continue");
                $('#Continue').hide();
            }
        });

        $('li#liorder').on('click', function () {
            var i, j, k;
            var Selfields = new Array();
            var Grpfields = new Array();
            if ($(this).hasClass('disabled')) {
                if ($('li#lisearch').hasClass('active') || $('li#liaction').hasClass('active')) {
                    $('#Save').show();
                    $('#Save').val('Save');
                    $('#Continue').hide();
                } else {
                    $('#Save').hide();
                    $('#Continue').show();
                }
            } else {
                if (sGroupByFields != "") {
                    var SelectFields = hiddenselectgrfields.split(/[\s,]+/);
                    if (originalgrfields != "") {
                        var grp = originalgrfields.replace(" GROUP BY ", "");
                        var GroupFields = grp.split(/[\s,]+/);
                    }
                    else {
                        var grp = "";
                        var GroupFields = "";
                    }
                    for (i = 0; i < SelectFields.length; i++) {
                        if (SelectFields[i].indexOf("COUNT") >= 0) {

                        }
                        else {
                            Selfields.push(SelectFields[i]);
                        }
                    }
                    for (i = 0; i < GroupFields.length; i++) {
                        Grpfields.push(GroupFields[i]);
                    }
                    var AllFields = Grpfields.concat(Selfields);
                    var Distinct = AllFields.filter(function (item, pos) { return AllFields.indexOf(item) == pos });
                    $('#GroupByTable tbody').empty();
                    if (Distinct.length != 0) {
                        sGroupByFields = " GROUP BY ";
                        for (i = 0; i < Distinct.length; i++) {
                            var col = '<td>' + Distinct[i] + '</td>';
                            col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deleteRow(this)'>Remove</button>"); +'</td>'
                            var row = '<tr>' + col + '</tr>';
                            $('#GroupByTable').append(row);
                            sGroupByFields = sGroupByFields + Distinct[i] + ', ';
                        }
                    }
                    sGroupByFields = sGroupByFields.slice(0, -2);
                    BuildQuery();
                }
                $('#Save').show();
                $('#Save').val("Save & Continue");
                $('#Continue').hide();
                $('#NVsTab').hide();
                $('#AddMore').hide();
                $('#SaveNVs').hide();
                $('#ParamsTab').hide();
                $('#AddMoreParam').hide();
                $('#SaveNDVs').hide();
                if($(this).hasClass('active')){
                    $("#VisibleQuery").show();
                }
            }
        });
        //$('#ViewPopUP').click(function () {
        //    $('#ViewPopUPFields').show();
        //    $('#EditPopUPFields').hide();
        //});
        //$('#EditPopUP').click(function () {
        //    $('#ViewPopUPFields').hide();
        //    $('#EditPopUPFields').show();
        //});
        $('#Close').click(function () {
            opener.location.reload();
            window.close();
        });
        $('#TypeID').change(function () {
            var type = $('#TypeID :selected').val();
            if (type == 1) {
                $('#ClassType').prop('disabled', false);
                $('#ClassTypeError').show();
            }
            else {
                $('#ClassType').prop('disabled', true);
                $('#ClassTypeError').hide();
            }
        });
        $('#queryreset').click(function () {
            $('#QueryForm')[0].reset();
            $('.qryerrormsg span').empty();

        });
        $('#SearchSave').click(function(){
            var bIsXICreatedBy, bIsXICreatedWhen, bIsXIUpdatedBy, bIsXIUpdatedWhen, FKiCrtd1ClickID, FKiUpdtd1ClickID;
            if($("#bIsXICreatedBy").is(':checked')){
                bIsXICreatedBy = true;
                FKiCrtd1ClickID = $("#FKiCtrdOneClickIDs").val();
            }
            else
            {
                bIsXICreatedBy = false;
                FKiCrtd1ClickID = 0;
            }
            //if($("#bIsXICreatedWhen").is(':checked')){
            //    $("#bIsXICreatedWhen").val();
            //}
            if($("#bIsXIUpdatedBy").is(':checked')){
                bIsXIUpdatedBy = true;
                FKiUpdtd1ClickID = $("#bIsXIUpdatedWhen").val();
            }
            else
            {
                bIsXIUpdatedBy = false;
                FKiUpdtd1ClickID = 0;
            }
            //if($("#bIsXIUpdatedWhen").is(':checked')){
            //    $("#bIsXIUpdatedWhen").val();
            //}
            var IsMultiSearch =$("#IsMultipleBoserachTab").is(':checked');
            var SavableSearchFields="";
            var allsearchvalues = $("#SearchRightValues li");
            var assignedsearchfields = "";
            if (allsearchvalues.length != 0) {
                for (var i = 0; i < allsearchvalues.length; i++) {
                    if (allsearchvalues[i].id == "") {
                        assignedsearchfields = assignedsearchfields + allsearchvalues[i].textContent + ', ';
                    }
                    else {
                        assignedsearchfields = assignedsearchfields + '{' + allsearchvalues[i].id + '}, ';
                    }
                    aftersearchfields = assignedsearchfields.replace(/,\s*$/, '');
                }
                SavableSearchFields = aftersearchfields;
            }
            if(SavableSearchFields.length>0 || bIsXICreatedBy == true || bIsXIUpdatedBy== true){
                var Values={QueryID:'@Model.ID', SearchFields:SavableSearchFields, bIsMultiSearch:IsMultiSearch, bIsXICreatedBy:bIsXICreatedBy, bIsXIUpdatedBy:bIsXIUpdatedBy, FKiCrtd1ClickID:FKiCrtd1ClickID, FKiUpdtd1ClickID: FKiUpdtd1ClickID}
                $.ajax({
                    url: '@Url.Action("SaveQuerySearchFields", "QueryGeneration")',
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    datatype: "json",
                    cache: false,
                    async: false,
                    data: JSON.stringify(Values),
                    success: function (e) {
                        if(e>0){
                            $(".QueryFormWindow").html('Search fields saved successfully!!');
                            $(".QueryFormWindow").dialog({
                                title: "Query Generation",
                                modal: true,
                                buttons: [
                                {
                                    text: "Ok",
                                    click: function () {
                                        $(".QueryFormWindow").dialog('close');
                                        $('li#lisearch').removeClass('active');
                                        $('li#liaction').addClass('active');
                                        $('#SearchTab').removeClass('active');
                                        $('#ActionsTab').addClass('active');
                                        $('.QueryBtns').hide();
                                        $('#QueryArea').hide();
                                    }
                                }
                                ]
                            });
                        }
                        else{
                            $(".QueryFormWindow").html('Something went wrong. Please try again!!');
                            $(".QueryFormWindow").dialog({
                                title: "Query Generation",
                                modal: true,
                                buttons: [
                                {
                                    text: "Ok",
                                    click: function () {
                                        $(".QueryFormWindow").dialog('close');
                                    }
                                }
                                ]
                            });
                        }
                    },
                    error: function (data) {
                    }
                });
            }
            else{
                $('li#lisearch').removeClass('active');
                $('li#liaction').addClass('active');
                $('#SearchTab').removeClass('active');
                $('#ActionsTab').addClass('active');
                $('.QueryBtns').hide();
                $('#QueryArea').hide();
            }
        });

        $('#ActionsSave').click(function(){
            var QueryID = $('#QueryID').text();
            var InnerReportID = $('#InnerReport').val();
            var IsRowClick, RowXiLinkID;
            var IsColumnClick, OnClickColumn, OnClickParameter, ColumnXiLinkID;
            var IsCellClick, OnClickCell, CellXiLinkID;
            var IsRowTotal,IsColumnTotal;
            var EditFields;
            var IsCreate,CreateRoleID,CreateGroupID;
            var IsEdit,EditRoleID,EditGroupID;
            var IsDelete,DeleteRoleID;
            var iLayoutID;
            var Label = $("#LabelName").val();
            var IsRefresh;var bIsCopy; var bIsView; var bIsCheckbox;
            var bIsExport;var FileExtension;
            var sType = ($('#sCreateType option:selected').text());
            if($("#IsRowClick").is(':checked')){
                IsRowClick = true;
                RowXiLinkID = $('#RowXiLinkID').val();
            }
            if($("#IsColumnClick").is(':checked')){
                IsColumnClick = true;
                OnClickParameter = $('#OnClickParameter').val();
                OnClickColumn = $('#OnClickColumn').val();
                ColumnXiLinkID = $('#ColumnXiLinkID').val();
            }
            if($("#IsCellClick").is(':checked')){
                IsCellClick = true;
                OnClickCell = $('#OnClickCell').val();
                CellXiLinkID = $('#CellXiLinkID').val();
            }
            if($("#IsRowTotal").is(':checked')){
                IsRowTotal = true;
            }
            if($("#IsColumnTotal").is(':checked')){
                IsColumnTotal=true;
            }
            if($("#IsCreate").is(':checked')){
                IsCreate = true;
                CreateRoleID = $('#CreateRoleID').val();
                CreateGroupID = $('#CreateGroupID').val();

            }
            if($("#IsEdit").is(':checked')){
                IsEdit = true;
                EditRoleID = $('#EditRoleID').val();
                EditGroupID = $('#EditGroupID').val();
            }
            if($("#IsDelete").is(':checked')){
                IsDelete = true;
                DeleteRoleID = $('#DeleteRoleID').val();
            }
            if($("#IsRefresh").is(':checked')){
                IsRefresh = true;
            }
            if($("#bIsCopy").is(':checked')){
                bIsCopy = true;
            }
            if($("#bIsView").is(':checked')){
                bIsView = true;
            }
            if($("#bIsCheckbox").is(':checked')){
                bIsCheckbox = true;
            }
            if($("#IsExport").is(':checked')){
                bIsExport = true;
                FileExtension= $('#FileExtension').val();
            }
            iLayoutID = $('#LayoutID').val();
            var actionfieldvalue = $('#OnRowClick :selected').val();
            var viewfields = "", eidtablefields = "";
            var editable = $('#EditablerightValues li');
            if (editable.length != 0) {
                for (i = 0; i < editable.length; i++) {
                    if (editable[i].id == "") {
                        var names = editable[i].attributes;
                        for (j = 0; j < names.length; j++) {
                            if (names[j].name == "data-type") {
                                if (names[j].nodeValue == "NonEditable") {
                                    eidtablefields = eidtablefields + 'NE-' + editable[i].textContent + ', ';
                                }
                                else {
                                    eidtablefields = eidtablefields + editable[i].textContent + ', ';
                                }
                            }
                        }
                    } else {
                        var names = editable[i].attributes;
                        for (j = 0; j < names.length; j++) {
                            if (names[j].name == "data-type") {
                                if (names[j].nodeValue == "NonEditable") {
                                    eidtablefields = eidtablefields + 'NE-' + '{' + editable[i].id + '}' + ', ';
                                }
                                else {
                                    eidtablefields = eidtablefields + '{' + editable[i].id + '}' + ', ';
                                }
                            }
                        }
                    }
                }
                eidtablefields = eidtablefields.slice(0, -2);
                EditFields = eidtablefields;
                ViewFields = null;
            }
            var Values = {QueryID:QueryID, InnerReportID:InnerReportID,
                IsRowClick:IsRowClick, RowXiLinkID:RowXiLinkID,
                IsColumnClick:IsColumnClick, OnClickColumn:OnClickColumn, OnClickParameter:OnClickParameter, ColumnXiLinkID:ColumnXiLinkID,
                IsCellClick:IsCellClick, OnClickCell:OnClickCell, CellXiLinkID:CellXiLinkID,
                IsRowTotal:IsRowTotal, IsColumnTotal:IsColumnTotal,
                EditableFields:EditFields,
                IsCreate:IsCreate,CreateRoleID:CreateRoleID,CreateGroupID:CreateGroupID,
                IsEdit:IsEdit,EditRoleID:EditRoleID,EditGroupID:EditGroupID,
                IsDelete:IsDelete,DeleteRoleID:DeleteRoleID,
                bIsExport:bIsExport,sFileExtension:FileExtension,
                iLayoutID:iLayoutID,
                iCreateXILinkID : iCreateXiLinkID,
                sAddLabel:Label,
                IsRefresh : IsRefresh,bIsCheckbox:bIsCheckbox,bIsView:bIsView,bIsCopy:bIsCopy,@*bIsExport:bIsExport,*@
                sCreateType : sType
            }
            $.ajax({
                url: '@Url.Action("SaveQueryActions", "QueryGeneration")',
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                cache: false,
                async: false,
                data: JSON.stringify(Values),
                success: function (e) {
                    if(e>0){
                        $(".QueryUpdateWindow").html('Actions updated successfully!!');
                        $(".QueryUpdateWindow").dialog({
                            title: "Query Generation",
                            modal: true,
                            buttons: [
                            {
                                text: "Ok",
                                click: function () {
                                    $(".QueryUpdateWindow").dialog('close');
                                    if('@Model.OrganizationID'>0){
                                        $('.nav-tabs').find('li.active').removeClass('active').next('li').addClass('active');
                                        $('#tabs').find('div.active').removeClass('active').next('div.tab-pane').addClass('active');
                                    }
                                    $('.QueryBtns').hide();
                                    $('#QueryArea').hide();
                                }
                            }
                            ]
                        });
                    }
                    else{
                        $(".QueryUpdateWindow").html('Something went wrong. Please try again!!');
                        $(".QueryUpdateWindow").dialog({
                            title: "Query Generation",
                            modal: true,
                            buttons: [
                            {
                                text: "Ok",
                                click: function () {
                                    $(".QueryUpdateWindow").dialog('close');
                                }
                            }
                            ]
                        });
                    }
                },
                error: function (data) {
                }
            });
        });
        $(".CreateCancel").click(function () {
            window.close();
        });
    })

    function BuildQuery(){
        $('#VisibleQuery').val('');
        sJoinString ="";
        if(sLeftJoinArray.length > 0){
            $.each(sLeftJoinArray, function(i, item){
                sJoinString += item;
            })
        }
        $('#VisibleQuery').val(sSelectFields + sFromBO + sJoinString + sWhereFields + sGroupByFields + sOrderByFields);
        $('#HiddenQuery').val(sSelectFields + sFromBO + sJoinString + sWhereFieldshidden + sGroupByFields + sOrderByFields);

        //document.getElementById("VisibleQuery").value = "";
        //document.getElementById("VisibleQuery").value = sSelectFields + sFromBO + sWhereFields + sGroupByFields + sOrderByFields;
    }

    function deleteRow(r) {
        var z = r.parentNode.parentNode.rowIndex;
        document.getElementById("GroupByTable").deleteRow(z);
        var groupcontent = "";
        $('#GroupByTable tbody tr').each(function () {
            $(this).find('td').each(function () {
                groupcontent = groupcontent + $(this).text() + " ";
            })
            groupcontent = groupcontent.replace(" Remove ", ", ");
        })
        sGroupByFields = " GROUP BY " + groupcontent;
        originalgrfields = " GROUP BY " + groupcontent;
        if (sGroupByFields == " GROUP BY ") {
            sGroupByFields = "";
            originalgrfields = "";
        }
        else {
            sGroupByFields = sGroupByFields.slice(0, -2);
            originalgrfields = originalgrfields.slice(0, -2);
        }
        BuildQuery();
        var count = $('#GroupByTable tr').length;
        if (count == 0) {
            $('#GroupByTable').empty();
        }
    }
    function deletewhereRow(r) {
        var z = r.parentNode.parentNode.rowIndex;
        var y = z - 1;
        var rowcontent = $(r).parent().parent().text();
        if (rowcontent.indexOf('AND') >= 0 || rowcontent.indexOf('OR') >= 0) {
            $("#WhereTable tr:eq(" + z + ")").remove();
            $("#WhereTable tr:eq(" + z + ")").remove();
        }
        else {
            $("#WhereTable tr:eq(" + z + ")").remove();
            if (z == 1) {
                var rows = $('#WhereTable tbody tr').length;
                if (rows >= 1) {
                    $("#WhereTable tr:eq(" + z + ")").remove();
                }

            } else {
                $("#WhereTable tr:eq(" + y + ")").remove();
                //$("#WhereTable").deleteRow(y);
            }
        }
        var rowCount = $('#WhereTable tbody tr').length;
        var wherecontent = "", hidwhrcontent = "";
        $('#WhereTable tbody tr').each(function () {
            var tdvalues = new Array();
            $(this).find('td').each(function () {
                tdvalues.push($(this).text());
            });
            for (i = 0; i < tdvalues.length - 1; i++) {
                if (i == 0) {
                    hidwhrcontent = hidwhrcontent + tdvalues[i] + " ";
                }
                if (i == 1 && tdvalues[i] != "") {
                    if (tdvalues[i] == "STARTS WITH") {
                        hidwhrcontent = hidwhrcontent + 'Like' + " ";
                    }
                    else if (tdvalues[i] == "NOT STARTS WITH") {
                        hidwhrcontent = hidwhrcontent + 'NOT Like' + " ";
                    }
                    else if (tdvalues[i] == "ENDS WITH") {
                        hidwhrcontent = hidwhrcontent + 'Like' + " ";
                    }
                    else if (tdvalues[i] == "NOT ENDS WITH") {
                        hidwhrcontent = hidwhrcontent + 'Like' + " ";
                    }
                    else {
                        hidwhrcontent = hidwhrcontent + tdvalues[i];
                    }
                }
                if (i == 2 && tdvalues[i] != "") {
                    if (tdvalues[2].match("^'")) {
                        var value = tdvalues[i];
                        value = value.slice(1, -1);
                        if (tdvalues[1] == "STARTS WITH") {
                            hidwhrcontent = hidwhrcontent + "'" + value + '%' + "' ";
                        }
                        else if (tdvalues[1] == "NOT STARTS WITH") {
                            hidwhrcontent = hidwhrcontent + "'" + value + '%' + "' ";
                        }
                        else if (tdvalues[1] == "ENDS WITH") {
                            hidwhrcontent = hidwhrcontent + "'" + '%' + value + "' ";
                        }
                        else if (tdvalues[1] == "NOT ENDS WITH") {
                            hidwhrcontent = hidwhrcontent + "'" + '%' + value + "' ";
                        }
                        else {
                            hidwhrcontent = hidwhrcontent + tdvalues[i] + " ";
                        }
                    }
                    else {
                        hidwhrcontent = hidwhrcontent + tdvalues[i] + " ";
                    }

                }
            }
        })
        $('#WhereTable tbody tr').each(function () {
            $(this).find('td').each(function () {
                if($(this).text().indexOf('XIP|')>-1){
                    var val1= $(this).text().split('=')[1].replace("'", "").replace("'", "").replace(" ", "");
                    wherecontent = wherecontent + $(this).text().replace($(this).text().split('=')[1], "{"+val1+"}") + " ";
                }else{
                    wherecontent = wherecontent + $(this).text() + " ";
                }
            })
            wherecontent = wherecontent.replace("Remove ", "");
        })
        sWhereFields = " WHERE " + wherecontent;
        HiddenWhereFielddata = " WHERE " + hidwhrcontent;
        if (sWhereFields == " WHERE ") {
            sWhereFields = "";
            HiddenWhereFielddata = "";
        }
        else {
            sWhereFields = sWhereFields.slice(0, -1);
            HiddenWhereFielddata = HiddenWhereFielddata.slice(0, -1);
        }
        hiddenwherefields = HiddenWhereFielddata;
        BuildQuery();
        if (rowCount == 0) {
            $('#WhereDDL').removeAttr('disabled');
            $("#WhereOkBtn").removeAttr('disabled');
            $("#WhereAddBtn").prop("disabled", true);
        }
    }
    function deleteorderRow(r) {
        var i = r.parentNode.parentNode.rowIndex;
        document.getElementById("OrderByTable").deleteRow(i);
        var ordercontent = "";
        $('#OrderByTable tbody tr').each(function () {
            $(this).find('td').each(function () {
                ordercontent = ordercontent + $(this).text() + " ";
            })
            ordercontent = ordercontent.replace(" Remove ", ", ");
        })
        sOrderByFields = " ORDER BY " + ordercontent;
        if (sOrderByFields == " ORDER BY ") {
            sOrderByFields = "";
        }
        else {
            sOrderByFields = sOrderByFields.slice(0, -2);
        }
        BuildQuery();
        if (sGroupByFields != "") {
            var Selfields = new Array();
            var Grpfields = new Array();
            var SelectFields = hiddenselectgrfields.split(/[\s,]+/);
            var grp = originalgrfields.replace(" GROUP BY ", "");
            var GroupFields = grp.split(/[\s,]+/);
            for (i = 0; i < SelectFields.length; i++) {
                Selfields.push(SelectFields[i]);
            }
            for (i = 0; i < GroupFields.length; i++) {
                Grpfields.push(GroupFields[i]);
            }
            var AllFields = Grpfields.concat(Selfields);
            var ofields = sOrderByFields;
            ofields = ofields.replace(" ORDER BY ", "");
            ofields = ofields.replace(/ ASC/g, "");
            ofields = ofields.replace(/ DESC/g, "");
            var obf = ofields.split(/[ ,]+/);
            if (obf == "") {

            } else {
                AllFields = AllFields.concat(obf);
            }
            Distinct = AllFields.filter(function (item, pos) { return AllFields.indexOf(item) == pos });
            $('#GroupByTable tbody').empty();
            if (Distinct.length != 0) {
                sGroupByFields = " GROUP BY ";
                for (i = 0; i < Distinct.length; i++) {
                    var col = '<td>' + Distinct[i] + '</td>';
                    col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deleteRow(this)'>Remove</button>"); +'</td>'
                    var row = '<tr>' + col + '</tr>';
                    $('#GroupByTable').append(row);
                    sGroupByFields = sGroupByFields + Distinct[i] + ', ';
                }
            }
            sGroupByFields = sGroupByFields.slice(0, -2);
            BuildQuery();
        }
    }
    //function DeleteQuery() {
    //    $.blockUI({ message: '<h3><img src="/Scripts/ckfinder/plugins/gallery/colorbox/images/loading.gif" width="50px" /> Please wait while saving details...</h3>' });
    //}
    function EditedWhere() {
        var wherecount = $('#WhereTable tbody tr').length;
        var query = $('#VisibleQuery').val();
        var newquery = document.getElementById('VisibleQuery').innerText;
        var selectpart = "";
        if (query.toLowerCase().indexOf("select ") >= 0) {
            selectpart = query.substr(0, query.toLowerCase().indexOf(' from '));
        }
        sSelectFields = selectpart;
        if (query.indexOf(" WHERE ") >= 0) {
            var whererows = new Array();
            var modifiedrow = new Array();
            var wherestring = query.substring(query.indexOf(' WHERE ') + 7);
            if (wherestring.indexOf(" GROUP BY ") >= 0) {
                wherestring = wherestring.substr(0, wherestring.indexOf(' GROUP BY '));
            } else if (wherestring.indexOf(" ORDER BY ") >= 0) {
                wherestring = wherestring.substr(0, wherestring.indexOf(' ORDER BY '));
            }
            if (wherestring.indexOf(" AND ") > 0) {
                var andcount = (wherestring.match(/AND/g)).length;
            } else {
                var andcount = 0;
            }
            if (wherestring.indexOf(" OR ") > 0) {
                var orcount = (wherestring.match(/OR/g)).length;
            } else {
                var orcount = 0;
            }
            if (andcount == 0 && orcount == 0) {
                whererows.push(wherestring);
            }
            var totoptrs = andcount + orcount;
            $('#WhereTable tbody').empty();
            for (i = 0; i < totoptrs; i++) {
                var andindex = 0; var orindex = 0;
                if (wherestring.indexOf(" AND ") > 0) {
                    andindex = wherestring.indexOf("AND");
                }
                if (wherestring.indexOf(" OR ") > 0) {
                    orindex = wherestring.indexOf("OR");
                }
                if (andindex > 0 && orindex > 0) {
                    if (andindex < orindex) {
                        var andstring = wherestring.substr(0, andindex - 1);
                        wherestring = wherestring.substr(andindex + 4);
                        whererows.push(andstring);
                        whererows.push("AND");
                    }
                    else {
                        var andstring = wherestring.substr(0, orindex - 1);
                        wherestring = wherestring.substr(orindex + 3);
                        whererows.push(andstring);
                        whererows.push("OR");
                    }
                }
                else if (andindex > 0) {
                    var andstring = wherestring.substr(0, andindex - 1);
                    wherestring = wherestring.substr(andindex + 4);
                    whererows.push(andstring);
                    whererows.push("AND");
                }
                else if (orindex > 0) {
                    var andstring = wherestring.substr(0, orindex - 1);
                    wherestring = wherestring.substr(orindex + 3);
                    whererows.push(andstring);
                    whererows.push("OR");
                }
                if (i == totoptrs - 1) {
                    whererows.push(wherestring);
                }
            }
            var hiddenwherecontent = "", whrcontent = "";
            for (i = 0; i < whererows.length; i++) {
                var row = whererows[i];
                if (row.indexOf(" STARTS WITH ") > 0) {
                    row = row.replace("STARTS WITH", "LIKE");
                    var oprindex = row.indexOf("LIKE");
                    var clause = row.substr(0, oprindex + 5);
                    var value = row.substr(oprindex + 5);
                    value = value.slice(1, -1);
                    value = "'" + value + "%'";
                    row = clause + value;
                    hiddenwherecontent = hiddenwherecontent + row + " ";
                }
                else if (row.indexOf(" ENDS WITH ") > 0) {
                    row = row.replace("ENDS WITH", "LIKE");
                    var oprindex = row.indexOf("LIKE");
                    var clause = row.substr(0, oprindex + 5);
                    var value = row.substr(oprindex + 5);
                    value = value.slice(1, -1);
                    value = "'%" + value + "'";
                    row = clause + value;
                    hiddenwherecontent = hiddenwherecontent + row + " ";
                }
                else if (row.indexOf(" CONTAINS ") > 0) {
                    row = row.replace("CONTAINS", "LIKE");
                    var oprindex = row.indexOf("LIKE");
                    var clause = row.substr(0, oprindex + 5);
                    var value = row.substr(oprindex + 5);
                    value = value.slice(1, -1);
                    value = "'%" + value + "%'";
                    row = clause + value;
                    hiddenwherecontent = hiddenwherecontent + row + " ";
                }
                else {
                    hiddenwherecontent = hiddenwherecontent + row + " ";
                }
                //var col = '<td>' + whererows[i] + '</td>';
                var col = '<td>' + whererows[i].replace(/[{}]/g, ""); + '</td>';
                if(whererows[i].indexOf('XIP|')>-1){
                    var re = /{([^}]+)}/g, text;
                    text = re.exec(whererows[i])
                    col = col + '<td>' + ("<input type='text' id='text_"+text[1]+"' name='aliasname' required='required' class='form-control col-md-1' style='height: 28px; width:200px;' />") + '</td>';
                }
                else{
                    col = col + '<td></td>';
                }
                col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deletewhereRow(this)'>Remove</button>"); +'</td>'
                var whrrow = '<tr>' + col + '</tr>';
                $('#WhereTable').append(whrrow);
                whrcontent = whrcontent + whererows[i] + " ";
            }
            hiddenwherefields = " WHERE ";
            hiddenwherefields = hiddenwherefields + hiddenwherecontent;
            hiddenwherefields = hiddenwherefields.slice(0, -1);
            HiddenWhereFielddata = hiddenwherefields;
            sWhereFields = " WHERE ";
            sWhereFields = sWhereFields + whrcontent;
            sWhereFields = sWhereFields.slice(0, -1);
            BuildQuery();
        }
    }
    function BusinessObject() {
        var selectedItem = $('#bussobjID').val();
        //var sBOTableName = "";
        var querytype = $('#TypeID :selected').val();
        var classtype = $('#ClassType :selected').val();
        if (classtype) {
        } else {
            classtype = 0;
        }
        $.ajax({
            url: '@Url.Action("GetAvailableFields", "QueryGeneration")',
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",
            cache: false,
            data: { BOID: selectedItem, Type: querytype, ClassType: classtype },
            success: function (data) {
                debugger
                sBOTableName = data[0].TableName;
                sFromBO = " FROM " + sBOTableName;
                BOName = sBOTableName;
                document.getElementById("VisibleQuery").value = "";
                document.getElementById("VisibleQuery").value = sFromBO;
                $("#SelectRightValues").empty();
                $("#WhereDDL").empty();
                $("#GroupBySelectBox").empty();
                $("#OrderBySelectBox").empty();
                $("#SelectLeftValues").html(""); // clear before appending new list
                $("#WhereDDL").html("<option value='0'>--Select--</option>");
                $("#OrderBySelectBox").html("<option value='0'>--Select--</option>");
                $.each(data, function (i, availableval) {
                    if (availableval.ID > 0) {
                        $("#SearchLeftValues").append(
                             $('<li name="' + availableval.Name + "-" + availableval.Type + '"data-value="' + availableval.LabelName + '" data-name=['+BOName+'].'+availableval.Name+'></li>').html("["+BOName+"]."+ availableval.Name));
                        $("#EditableleftValues").append(
                        $('<li name="' + availableval.Name + "-" + availableval.Type + '" data-value="' + availableval.LabelName + '"data-type="Editable"></li>').html(availableval.Name));
                        $("#NonEditableleftValues").append(
                        $('<li name="' + availableval.Name + "-" + availableval.Type + '" data-value="' + availableval.LabelName + '" data-type="NonEditable"></li>').html(availableval.Name));
                        $('#TargetColumns').append(
                            '<option value="'+availableval.ID+'">'+availableval.Name+'</option>'
                            );
                    }
                    $("#serachTabBO").val(BOName);
                    if (availableval.IsVisible == true) {
                        $("#SelectLeftValues").append(
                        $('<li name="' + availableval.Name + "-" + availableval.Type + '"data-value="' + availableval.LabelName + '" data-name=['+BOName+'].'+availableval.Name+' FKTableName="'+availableval.FKTableName+'" PKColumn="'+availableval.PKColumnID+'"></li>').html("["+BOName+"]."+ availableval.Name));
                    }
                    if (availableval.IsWhere == true) {
                        if (availableval.ID > 0) {
                            $("#WhereDDL").append(
                        $('<option id="' + availableval.ID + '"></option>').val(availableval.Name + "-" + availableval.Type).html("["+BOName+"]."+availableval.Name));
                        } else {
                            $("#WhereDDL").append(
                        $('<option id="' + availableval.ID + '" data-value="' + availableval.FieldValue + '"></option>').val(availableval.Name + "-" + availableval.Type).html("["+BOName+"]."+availableval.Name));
                        }
                    }
                    if (availableval.IsGroupBy == true) {
                        $("#GroupBySelectBox").append(
                        $('<option></option>').val(availableval.ID).html("["+BOName+"]."+availableval.Name + " "));
                    }
                    if (availableval.IsOrderBy == true) {
                        $("#OrderBySelectBox").append(
                        $('<option></option>').val(availableval.ID).html("["+BOName+"]."+availableval.Name));
                    }
                });
                alldefaultdemovalues=$("#SelectLeftValues li");
                if (data.length > 0) {
                    var names = data[0].GroupNames;
                    var sqlfields = data[0].GroupSqlFields;
                    var fields = data[0].GroupFields
                    var ids = data[0].GroupIDs;
                    if (names != null) {
                        $.each(names, function (i, val) {
                            $("#SelectLeftValues").append(
                            $('<li style="color:#F5A301 !important;" id="' + ids[i] + '" data-name="'+names[i]+'" name="' + fields[i] + '" data-value="' + sqlfields[i] + '"></li>').html("["+BOName+"].{"+val+"}"));
                        });
                    }
                }
            },
            error: function (data) {

            }
        });
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetGroupsByBOID", "QueryGeneration")',
            data: { BOID: selectedItem},
            cache: false,
            async: false,
            dataType: 'json',
            success: function (data) {
                $('#CreateGroupID').empty();
                $('#CreateGroupID').find('option').remove();
                optionArray = [];
                optionArray[0] = "<option value='0'>--Select--</option>";
                $.each(data, function (i, option) {
                    optionArray[i + 1] = "<option value='" + option.Value + "'>" + option.text + "</option>";
                });
                $('#CreateGroupID').append(optionArray.join(''));
                $('#EditGroupID').append(optionArray.join(''));
                $('#CreateGroupID').find('option').each(function(i,e){
                    if($(e).val() == '@Model.CreateGroupID'){
                        $('#CreateGroupID').prop('selectedIndex',i);
                    }
                });
                $('#EditGroupID').find('option').each(function(i,e){
                    if($(e).val() == '@Model.EditGroupID'){
                        $('#EditGroupID').prop('selectedIndex',i);
                    }
                });
            }
        });
    }

    function Preview(PreviewType) {
        var CustomQuery = $('#VisibleQuery').val();
        var selectedItem = $("#SelectRightValues li");
        sWhereFieldshidden="";
        var wherefiels=sWhereFields.replace("WHERE ", "");
        var results =new Array() , re = /{([^}]+)}/g, text;
        while(text = re.exec(wherefiels)) {
            results.push(text[1]);
        }

        if(results.length>0){
            var wherestr=sWhereFields
            $("#WhereTable tbody").find('tr').each(function(){
                if($(this).find('td').first().text().indexOf('XIP|')>-1){
                    var re = /{([^}]+)}/g; var reg =/'^'/g;
                    var name =$(this).find('td').first().text().split('=')[1].trim().replace(/\'/g, "");
                    var val=$(this).find('td').find('input[name="aliasname"]').val();
                    wherestr=wherestr.replace("{"+name+"}", val);
                }
            })
            sWhereFieldshidden=wherestr;
        }

        if (CustomQuery.length > 0) {
            if (CustomQuery.toUpperCase() == " FROM LEADS") {
                ShowDialog('Not A Valid Query. Please Check');
                IsQuerySavable = false;
                $('#QueryStatus').hide();
                $('#QueryResult').hide();
            }
            else {

                if ($('#DisplayAs').val() == "@ResultList") {
                    //AddSelectFields();
                    EditedWhere();
                    AddGroupFields();
                    AddOrderFields();
                }
                //var NewQuery = document.getElementById("VisibleQuery").value;
                if(sWhereFieldshidden!=""){
                    var NewQuery = $("#HiddenQuery").val();
                }
                else
                {
                    var NewQuery = $("#VisibleQuery").val();
                }
                var BOID = $('#bussobjID').val();
                var Display = $('#DisplayAs').val();
                var ID=$('#QueryID').text();
                $.ajax({
                    url: '@Url.Action("CheckQueryStatus", "QueryGeneration")',
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    datatype: "json",
                    cache: false,
                    async:true,
                    data: {Query: NewQuery, BOID: BOID },
                    beforeSend:function(request) {
                        if(PreviewType=="Save"){
                            $.blockUI({ message: '<h3 class="nh3"><img src="@PhysicalPath/Scripts/ckfinder/plugins/gallery/colorbox/images/loading.gif" width="50px" /> Please wait while validating and updating 1-click...</h3>' });
                        }
                        else{
                            $.blockUI({ message: '<h3 class="nh3"><img src="@PhysicalPath/Scripts/ckfinder/plugins/gallery/colorbox/images/loading.gif" width="50px" /> Please wait while showing preview...</h3>' });
                        }
                    },
                    success: function (data) {
                        if(data=="Success"){
                            if(PreviewType=="Save" || PreviewType=="Preview"){
                                GetValidPreview(PreviewType)
                            }
                            else{
                                ShowRunResult();
                            }
                        }
                        else{
                            ErrorPreview(NewQuery);
                        }
                    },
                    error: function () {
                    }
                });
                return IsCustomQuery;
            }
        }
        else {
            ShowDialog('No Query. Please Check');
        }
    }

    function GetValidPreview(PreviewType){
        //var NewQuery = $("#VisibleQuery").val();
        if(sWhereFieldshidden!=""){
            var NewQuery = $("#HiddenQuery").val();
        }
        else
        {
            var NewQuery = $("#VisibleQuery").val();
        }
        var BOID = $('#bussobjID').val();
        var ID=$('#QueryID').text();
        $.ajax({
            url: '@Url.Action("GetPreviewInForm", "QueryGeneration")',
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            cache: false,
            async:true,
            data: { ID:ID, Query: NewQuery, Fields: headings, BOID: BOID },
            success: function (data) {
                $.unblockUI();
                IsQuerySavable = true;
                $('#QueryResult').html(data);
                $('#QueryStatus').hide();
                $('#ValidQuery').show();
                $('#ValidQuery').html('<span style="color:green">Its A Valid Query</span>');
                $('#QueryResult').show();
                if(PreviewType=="Save"){
                    if(IsQuerySavable){
                        SaveQuery();
                    }
                }
            },
            error: function (data) {
            }
        });
    }

    //Show Query Status If Not Valid
    function ErrorPreview(query) {
        var BOID = $('#bussobjID').val();
        var ID=$('#QueryID').text();
        $.ajax({
            url: '@Url.Action("GetQueryStatus", "QueryGeneration")',
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            cache: false,
            data: {ID:ID, Query: query, Fields: headings, BOID:BOID },
            success: function (data) {
                $.unblockUI();
                $('#ValidQuery').hide();
                $('#QueryResult').html('');
                if (data.Select == "True") {
                    $('.sbval').html('<span style="color:green;">&#10003;</span>');
                } else {
                    $('.sbval').html('<span style="color:red;">'+ data.Select +'</span>');
                }
                if (data.Where == "True") {
                    $('.wbval').html('<span style="color:green;">&#10003;</span>');
                } else {
                    $('.wbval').html('<span style="color:red;">' + data.Where + '</span>');
                }
                if (data.GroupBY == "True") {
                    $('.gbval').html('<span style="color:green;">&#10003;</span>');
                } else {
                    $('.gbval').html('<span style="color:red;">' + data.GroupBY + '</span>');
                }
                if (data.OrderBY == "True") {
                    $('.obval').html('<span style="color:green;">&#10003;</span>');
                } else {
                    $('.obval').html('<span style="color:red;">' + data.OrderBY + '</span>');
                }
                $('#QueryStatus').show();
                ShowDialog('Not A Valid Query');
            },
            error: function () {
                $('#QueryResult tbody').empty();
                ShowDialog('Not A Valid Query1');
            }
        });

    }

    //Show Run Result of query
    function ShowRunResult(){
        var BOID = $('#bussobjID').val();
        var ID=$('#QueryID').text();
        var NewQuery = $("#VisibleQuery").val();
        var DisplayAs = $('#DisplayAs').val();
        $.ajax({
            url: '@Url.Action("RunInForm", "Inbox")',
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            cache: false,
            async:true,
            data: {ID:ID, Query: NewQuery, DisplayAs: DisplayAs, BOID: BOID, Fields: headings,BOName:BOName },
            success: function (data) {
                $.unblockUI();
                $('#QueryResult').html(data);
                $('#QueryStatus').hide();
                $('#ValidQuery').show();
                $('#ValidQuery').html('<span style="color:green">Its A Valid Query</span>');
                $('#QueryResult').show();
            },
            error: function () {
            }
        });
    }

    function AddGroupFields() {
        var Selfields = new Array();
        var Grpfields = new Array();
        if (sGroupByFields != "") {
            var SelectFields = hiddenselectgrfields.split(/[\s,]+/);
            var grp = sGroupByFields.replace(" GROUP BY ", "");
            var GroupFields = grp.split(/[\s,]+/);
            for (i = 0; i < SelectFields.length; i++) {
                if (SelectFields[i].indexOf("COUNT") >= 0) {

                }
                else {
                    Selfields.push(SelectFields[i]);
                }
            }
            for (i = 0; i < GroupFields.length; i++) {
                Grpfields.push(GroupFields[i]);
            }
            var AllFields = Grpfields.concat(Selfields);
            Distinct = AllFields.filter(function (item, pos) { return AllFields.indexOf(item) == pos });
            $('#GroupByTable tbody').empty();
            if (Distinct.length != 0) {
                sGroupByFields = " GROUP BY ";
                for (i = 0; i < Distinct.length; i++) {
                    var col = '<td>' + Distinct[i] + '</td>';
                    col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deleteRow(this)'>Remove</button>"); +'</td>'
                    var row = '<tr>' + col + '</tr>';
                    $('#GroupByTable').append(row);
                    sGroupByFields = sGroupByFields + Distinct[i] + ', ';
                }
            }
            sGroupByFields = sGroupByFields.slice(0, -2);
            BuildQuery();
        }

    }
    function AddOrderFields() {
        var Selfields = new Array();
        var Grpfields = new Array();
        if (sOrderByFields != "") {
            var ofields = sOrderByFields;
            ofields = ofields.replace(" ORDER BY ", "");
            ofields = ofields.replace(/ ASC/g, "");
            ofields = ofields.replace(/ DESC/g, "");
            var obf = ofields.split(/[ ,]+/);
            if (sGroupByFields != "") {
                if (sGroupByFields.indexOf(",") >= 0) {
                    if (sGroupByFields.charAt(sGroupByFields.length - 1) == " ") {
                        sGroupByFields = sGroupByFields.slice(0, -2);
                    }
                    sGroupByFields = sGroupByFields.replace(" GROUP BY ", "");
                }
                else {
                    sGroupByFields = sGroupByFields.replace(" GROUP BY ", "");
                }
                var gbf = sGroupByFields.split(/[\s,]+/);
                var AllOrderFields = gbf.concat(obf);
                $('#GroupByTable tbody').empty();
                var DistinctOrder = AllOrderFields.filter(function (item, pos) { return AllOrderFields.indexOf(item) == pos });
                if (DistinctOrder.length != 0) {
                    sGroupByFields = " GROUP BY ";
                    for (i = 0; i < DistinctOrder.length; i++) {
                        var col = '<td>' + DistinctOrder[i] + '</td>';
                        col = col + '<td>' + ("<button id='remove' class='savebtn btn btn-warning btn-xs' onclick='deleteRow(this)'>Remove</button>"); +'</td>'
                        var row = '<tr>' + col + '</tr>';
                        $('#GroupByTable').append(row);
                        sGroupByFields = sGroupByFields + DistinctOrder[i] + ', ';
                    }
                }
                sGroupByFields = sGroupByFields.slice(0, -2);
                BuildQuery();
            }
        }
    }
    function SaveQuery() {
        $('#ValidQuery').hide();
        $('#QueryResult').hide();
        var id = $('#QueryID').text();
        $('#SaveQueryID').val(id);
        if(HSelectFields.length>0){
            var HiddenQuery = "SELECT " +HSelectFields + sFromBO + sJoinString + sWhereFields + sGroupByFields + sOrderByFields;
            $('#HiddenQuery').val(HiddenQuery.replace(/&#39;/g,"'").replace("&amp;lt;","<").replace("&amp;gt;",">").replace("&lt;","<").replace("&gt;",">"));
        }
        else{
            var HiddenQuery = $('#VisibleQuery').val();
            $('#HiddenQuery').val(HiddenQuery.replace(/&#39;/g,"'").replace("&amp;lt;","<").replace("&amp;gt;",">").replace("&lt;","<").replace("&gt;",">"));
        }
        var name = $("#QueryName").val();
        $("#SaveQueryName").val(name);
        hiddenselfields = hiddenselectfields.replace("SELECT ", "");
        hiddenselectfields = hiddenselectfields.replace("SELECT ", "");
        $("#SaveSelectFields").val(HSelectFields);
        frombos = sFromBO.replace(" FROM ", "");
        $("#SaveFromBO").val(frombos);
        //sWhereFields = hiddenwherefields.replace(" WHERE ", "");
        sWhereFields =sWhereFields.replace(" WHERE ", "");
        $("#SaveWhereFields").val(sWhereFields);
        $("#IsMultiBO").val($("#IsMultipleBo").is(':checked'));
        hiddengrfields = sGroupByFields.replace(" GROUP BY ", "");
        $("#SaveGroupFields").val(hiddengrfields);
        hiddenordfields = sOrderByFields.replace(" ORDER BY ", "");
        $("#SaveOrderFields").val(hiddenordfields);
        $('#SaveSelFldWithtype').val(selwithtype);
        $('#SaveWhereWithType').val(wherewithtype);
        if (PopupError == "") {
            $.ajax({
                url: '@Url.Action("UpdateQuery", "QueryGeneration")',
                type: 'POST',
                datatype: 'JSON',
                cache: false,
                async:true,
                data: $('#SaveQueryValues').serialize(),
                success: function (data) {
                    if(data>0){
                        $(".QueryFormWindow").html('1-Click saved successfully!!');
                        $(".QueryFormWindow").dialog({
                            title: "Query Generation",
                            modal: true,
                            buttons: [
                            {
                                text: "Ok",
                                click: function () {
                                    opener.location.reload();
                                    $(".QueryFormWindow").dialog('close');
                                    $('#OrderTab').removeClass('active');
                                    $('#ValidQuery').hide();
                                    $('#QueryResult').hide();
                                    $("ul.nav-tabs").find("li").each(function () {
                                        $(this).addClass('disabled');
                                        $(this).removeClass('active');
                                    });
                                    $("ul.nav-tabs").find("a").each(function () {
                                        $(this).removeAttr('data-toggle');
                                    });
                                    $("ul.nav-tabs").find("li#liquery").each(function () {
                                        $(this).prop('disabled', true).addClass('disabled');
                                    });
                                    $('li#lisearch').addClass('active');
                                    $('li#lisearch a').attr('data-toggle', 'tab');
                                    $('li#lisearch').prop('disabled', false).removeClass('disabled');
                                    $('li#liaction a').attr('data-toggle', 'tab');
                                    $('li#liaction').prop('disabled', false).removeClass('disabled');
                                    $('li#litarget a').attr('data-toggle', 'tab');
                                    $('li#litarget').prop('disabled', false).removeClass('disabled');
                                    $('li#lischeduler a').attr('data-toggle', 'tab');
                                    $('li#lischeduler').prop('disabled', false).removeClass('disabled');
                                    $('#SearchTab').addClass('active'); $('#Save').val('Save'); $('#Continue').hide();
                                    $("#labquery").hide(); $("#VisibleQuery").hide();
                                    $('#preview').hide(); $('#reset').hide();
                                    $('#QueryDelete').hide(); $('#Close').show();
                                    $('.QueryBtns').hide();
                                    $('li#liParams a').attr('data-toggle', 'tab');
                                    $('li#liParams').prop('disabled', false).removeClass('disabled');
                                    $('li#liNVs a').attr('data-toggle', 'tab');
                                    $('li#liNVs').prop('disabled', false).removeClass('disabled');
                                    $('li#liButtons a').attr('data-toggle', 'tab');
                                    $('li#liButtons').prop('disabled', false).removeClass('disabled');
                                    $('li#li1Access a').attr('data-toggle', 'tab');
                                    $('li#li1Access').prop('disabled', false).removeClass('disabled');
                                }
                            }
                            ]
                        });
                    }
                    else{
                        $(".QueryFormWindow").html('Something went wrong. Please try again!!');
                        $(".QueryFormWindow").dialog({
                            title: "Query Generation",
                            modal: true,
                            buttons: [
                            {
                                text: "Ok",
                                click: function () {
                                    $(".QueryFormWindow").dialog('close');
                                }
                            }
                            ]
                        });
                    }
                },
                error: function (data) {
                    ShowDialog('Something went wrong while saving!!');
                },
            });
        }
    }
    function ShowDialog(Message) {
        $(".QueryFormWindow").html(Message);
        $(".QueryFormWindow").dialog({
            title: "Query Generation",
            modal: true,
            buttons: [
            {
                text: "Ok",
                click: function () {
                    $(".QueryFormWindow").dialog('close');
                }
            }
            ]
        });
    }

    function fnceditlayout(){
        var LayoutID = $('#LayoutID').val();
        if(LayoutID > 0){
            fncShowLayout(LayoutID);
        }
    }

    function XiLinkManager(Type, Action){
        var XiLinkID = 0 ;
        if (Action == "Refresh")
        {
            $.ajax({
                type: 'GET',
                url: '@Url.Action("GetXiLinkListByOrg", "QueryGeneration")',
                //data: { OrgID: OrgID },
                cache: false,
                async: false,
                dataType: 'json',
                success: function (data) {
                    if(Type == "Row")
                    {
                        $('#RowXiLinkID').empty();
                        $('#RowXiLinkID').find('option').remove();
                    }
                    else if(Type == "Column")
                    {
                        $('#ColumnXiLinkID').empty();
                        $('#ColumnXiLinkID').find('option').remove();
                    }
                    else if(Type == "Cell")
                    {
                        $('#CellXiLinkID').empty();
                        $('#CellXiLinkID').find('option').remove();
                    }
                    optionArray = [];
                    $.each(data.XiLinksList, function (i, option) {
                        optionArray[i + 1] = "<option value='" + option.Value + "'>" + option.text + "</option>";
                    });
                    if(Type == "Row")
                    {
                        $('#RowXiLinkID').append(optionArray.join(''));
                    }
                    if(Type == "Column")
                    {
                        $('#ColumnXiLinkID').append(optionArray.join(''));
                    }
                    if(Type == "Cell")
                    {
                        $('#CellXiLinkID').append(optionArray.join(''));
                    }
                }
            });
        }
        else{
            if(Action =="Edit" || Action == "View")
            {
                if(Type=="Row"){
                    XiLinkID = $('#RowXiLinkID').val();
                }
                else if(Type=="Column"){
                    XiLinkID = $('#ColumnXiLinkID').val();
                }
                else if(Type=="Cell"){
                    XiLinkID = $('#CellXiLinkID').val();
                }

                if(Action =="Edit")
                {
                    if (editpopups.length > 0) {
                        for (i = 0; i < editpopups.length; i++) {
                            editpopups[i].close();
                        }
                    }
                    var editpopup = window.open('', '_blank', "scrollbars=1,resizable=1,width=" + screen.width + ", height=" + screen.height);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("AddEditXiLink", "XiLink")',
                        data: { XiLinkID: XiLinkID },
                        cache: false,
                        async: false,
                        dataType: 'html',
                        success: function (data) {
                            with (editpopup.document) {
                                open();
                                write(data);
                                close();
                            }
                            editpopups.push(editpopup);
                            editpopup.moveTo(0, 0);
                        }
                    });
                }
                else{
                    if (editpopups.length > 0) {
                        for (i = 0; i < editpopups.length; i++) {
                            editpopups[i].close();
                        }
                    }
                    var editpopup = window.open('', '_blank', "scrollbars=1,resizable=1,width=" + screen.width + ", height=" + screen.height);
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ViewXiLink", "XiLink")',
                        data: { XiLinkID: XiLinkID },
                        cache: false,
                        async: false,
                        dataType: 'html',
                        success: function (data) {
                            with (editpopup.document) {
                                open();
                                write(data);
                                close();
                            }
                            editpopups.push(editpopup);
                            editpopup.moveTo(0, 0);
                        }
                    });
                }
            }
            else{
                var url = "@Url.Action("AddEditXiLink", "XiLink")";
                if (Poppopups.length > 0) {
                    for (i = 0; i < Poppopups.length; i++) {
                        Poppopups[i].close();
                    }
                }
                var newpopup = window.open(url, '_blank', "scrollbars=1,resizable=1,width=" + screen.width + ", height=" + screen.height);
                Poppopups.push(newpopup);
                newpopup.moveTo(0, 0);
            }
        }
    }
</script>

<style>
    .errormsg {
        color: red;
    }

    .disabled a {
        color: #777 !important;
    }

    .qryerrormsg {
        margin-top: 30px;
    }

    .OtherPopupError {
        margin-top: 5px;
    }

    #VisibleQuery {
        margin-bottom: 10px;
    }

    #WhereOperators {
        display: none;
        padding-left: 0px;
        margin-top: 25px;
    }
</style>

<section class="content-header hedr">
    <h1> Add Query </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Query Management</a></li>
        <li class="active">Home</li>
    </ol>
</section>
<div class="content">
    <div class="nav-tabs-custom form-container">
        <ul class="nav nav-tabs">
            <li id="liquery" class="active"><a href="#QueryFormTab">Query</a></li>
            <li id="liselect" class="disabled"><a href="#SelectTab">Select Fields</a></li>
            <li id="liwhere" class="disabled"><a href="#WhereTab">Where Fields</a></li>
            <li id="ligroup" class="disabled"><a href="#GroupTab">Group Fields</a></li>
            <li id="liorder" class="disabled orderclass"><a href="#OrderTab">Order Fields</a></li>
            <li id="lisearch" class="disabled"><a href="#SearchTab">Search Fields</a></li>
            <li id="liaction" class="disabled fieldactions"><a href="#ActionsTab">Actions</a></li>
            @if (Model.OrganizationID > 0)
            {
                <li id="litarget" class="disabled"><a href="#TargetsTab">Targets</a></li>
                <li id="lischeduler" class="disabled"><a href="#SchedulerTab">Scheduler</a></li>
            }
            <li id="liNVs" class="disabled"><a href="#NVsTab">New Defaults</a></li>
            <li id="liParams" class="disabled"><a href="#ParamsTab">Parameters</a></li>
            <li id="liButtons" class="disabled"><a href="#ButtonsTab">Buttons</a></li>
            <li id="li1Access" class="disabled"><a href="#AccessTab">1Click Access</a></li>
        </ul>
        <div class="alert alert-danger" id="BootstrpError" style="display:none;">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">×</a>
        </div>
        <div class="alert alert-success" id="BootstrpAlertSuccess" style="display:none;">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">×</a>
        </div>
        <div class="tab-content" id="tabs" style="height: calc(100vh - 120px);overflow:hidden; overflow-y: auto;">
            @Html.ValidationSummary(true)
            @Html.AntiForgeryToken()
            <div class="active tab-pane" id="QueryFormTab">
                <p id="QueryID"></p>
                @using (Ajax.BeginForm("SaveQuery", "QueryGeneration", new AjaxOptions { OnBegin = "OnFormBegin()", HttpMethod = "POST", UpdateTargetId = "QueryID", OnSuccess = "OnComplete" }, new { @id = "QueryForm", @class = "form-horizontal" }))
                {
                    @Html.HiddenFor(m => m.ID)
                    @Html.HiddenFor(m => m.Type, new { @Value = "Create" })
                    <input type="hidden" id="ParamIDs" />
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Name<span class="danger">*</span></label>
                                                @Html.TextBoxFor(model => model.Name, new { @Name = "Name", @id = "QueryName", @placeholder = "Enter Query Name", @class = "form-control", @maxlength = "64" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(m => m.Name, null, new { @class = "red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Show As<span class="danger">*</span></label>
                                                @Html.TextBoxFor(model => model.Title, new { @Name = "Title", @id = "MenuName", @placeholder = "Enter Menu Title", @class = "form-control", @maxlength = "64" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(m => m.Title, null, new { @class = "red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Code<span class="danger"></span></label>
                                                @Html.TextBoxFor(model => model.Code, new { @placeholder = "Enter Code", @class = "form-control" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(m => m.Code, null, new { @class = "red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Business Object<span class="danger">*</span></label>
                                                @Html.TextBoxFor(model => model.BOName, new { @class = "form-control bonamecls", @id = "BusinessObject", @placeholder = "Enter BO Name" })
                                                @Html.HiddenFor(model => model.BOID, new { @id = "bussobjID" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(m => m.BOName, null, new { @class = "red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Description<span class="danger">*</span></label>
                                                @Html.TextAreaFor(model => model.Description, new { @placeholder = "Enter Description", @class = "form-control", @rows = 4 })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(m => m.Description, null, new { @class = "red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-5">
                                                @Html.CheckBoxFor(m => m.bIsLockToUser, new { @id = "bIsLockToUser" })
                                                <label for="inputEmail" class="gn">Lock To User</label>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-5">
                                                @Html.CheckBoxFor(m => m.IsParent, new { @id = "IsParent" })
                                                <label for="inputEmail" class="gn">Is Parent</label>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Parent 1-Click</label>
                                                @Html.TextBoxFor(model => model.parent, new { @class = "form-control", @id = "QuerySearchTBox", @placeholder = "Parent 1-click name" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(model => model.parent, null, new { @class = "red" })

                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Category<span class="danger"></span></label>
                                                @Html.DropDownListFor(model => model.CategoryID, new SelectList(new List<object>
                                                {
                                                new { key= 0 , value = "--Select--" },
                                                new { key= 1 , value = "1" },
                                                new { key= 2 , value = "2" },
                                                new { key= 3 , value = "3" },
                                                new { key= 4 , value = "4" },
                                                new { key= 5 , value = "5" },
                                                }, "key", "Value"), new { @class = "form-control", @id = "Category" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @*@Html.ValidationMessageFor(model => model.CategoryID, null, new { @class = "red" })*@
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Type<span class="danger">*</span></label>
                                                @Html.DropDownListFor(model => model.TypeID, new SelectList(new List<object>
                                                {
                                                new { key= "" , value = "--Select--" },
                                                new { key= 1, value = "Class Specific" },
                                                new { key= 2 , value = "Non Class Specific" }
                                                }, "key", "Value"), new { @class = "form-control", @id = "TypeID" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(m => m.TypeID, null, new { @class = "red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Class<span class="danger">*</span></label>
                                                @Html.DropDownListFor(m => m.Class, new SelectList(Model.Classes, "Value", "text"), "--Select--", new { @class = "form-control", @id = "ClassType" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(m => m.Class, null, new { @class = "red" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Log</label>
                                                @Html.DropDownListFor(m => m.sLog, new SelectList(new List<Object>
                                                {
                                                new { key= "No" , value = "No" },
                                                new { key= "Query" , value = "Query" },
                                                new { key= "User executed" , value = "User executed" }
                                                }, "key", "Value"), new { @class = "form-control" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Display<span class="danger">*</span></label>
                                                @Html.DropDownListFor(m => m.DisplayAs, new SelectList(Model.ReportTypes, "Value", "text"), "--Select--", new { @class = "form-control", @id = "DisplayAs" })
                                            </div>
                                            <div class="col-sm-7 qryerrormsg">
                                                @Html.ValidationMessageFor(m => m.DisplayAs, "", new { @class = "red" })
                                            </div>
                                        </div>
                                        <div id="XIComponentType" style="display:none">
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">XIRepeater Component<span class="danger">*</span></label>
                                                    @Html.DropDownListFor(m => m.FKiComponentID, new SelectList(Model.XIComponentList, "Value", "text"), new { @class = "form-control", @id = "XIRepeaterComponent" })
                                                </div>
                                                <div class="col-sm-7 qryerrormsg">
                                                    @Html.ValidationMessageFor(m => m.FKiComponentID, "", new { @class = "red" })
                                                </div>
                                            </div>
                                            <button type="button" class="btn btn-theme" id="XIComponentBtn"><i class="fas fa-bars"></i></button>
                                        </div>
                                        <div id="HideResultListDisplayType">
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">Loading Type<span class="danger">*</span></label>
                                                    @Html.DropDownListFor(model => model.ResultListDisplayType, new SelectList(new List<object>
                                                    {
                                                    new { key= 1 , value = "Pagination" },
                                                    new { key= 0 , value = "Auto-Load" },
                                                    }, "key", "Value"), new { @class = "form-control", @id = "ResultListDisplayType" })
                                                </div>
                                                <div class="col-sm-7 qryerrormsg">
                                                    @Html.ValidationMessageFor(model => model.ResultListDisplayType, null, new { @class = "red" })
                                                </div>
                                            </div>
                                        </div>
                                        <div id="paginationRange" style="display:none">
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">PaginationCount</label>
                                                    @Html.TextBoxFor(model => model.iPaginationCount, new { @class = "form-control paginationcountcls", @id = "paginationcounttxt" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Result In</label>
                                                @Html.DropDownListFor(m => m.ResultIn, new SelectList(new List<object>
                                                {
                                                new { key= "Inline" , value = "Inline" },
                                                new { key= "Popup" , value = "Popup" },
                                                new { key= "Dialog" , value = "Dialog" }
                                                }, "key", "Value"), new { @class = "form-control" })
                                            </div>
                                        </div>
                                        <div id="DialogTypeDiv">
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">Dialog Type</label>
                                                    @Html.DropDownListFor(m => m.DialogType, new SelectList(new List<object>
                                                    {
                                                    new { key= "Center" , value = "Center" },
                                                    new { key= "Left" , value = "Left" },
                                                    new { key= "Right" , value = "Right" },
                                                    new { key= "Top" , value = "Top" },
                                                    new { key= "Bottom" , value = "Bottom" },
                                                    new { key= "Specific" , value = "Specific" }
                                                    }, "key", "Value"), new { @class = "form-control" })
                                                </div>
                                            </div>
                                        </div>
                                        <div id="PopupTypeDiv">
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">Popup Type</label>
                                                    @Html.DropDownListFor(m => m.PopupType, new SelectList(new List<object>
                                                    {
                                                    new { key= "Default" , value = "Default" },
                                                    new { key= "Max" , value = "Max" },
                                                    new { key= "Medium" , value = "Medium" },
                                                    new { key= "Small" , value = "Small" },
                                                    new { key= "Specific" , value = "Specific" }
                                                    }, "key", "Value"), new { @class = "form-control" })
                                                </div>
                                            </div>
                                        </div>
                                        <div id="PopupPositionsDiv">
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">Left<span class="danger">*</span></label>
                                                    @Html.TextBoxFor(model => model.PopupLeft, new { @class = "form-control", @placeholder = "Enter left value" })
                                                </div>
                                                <div class="col-sm-7 qryerrormsg">
                                                    @Html.ValidationMessageFor(model => model.PopupLeft, null, new { @class = "red" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">Top<span class="danger">*</span></label>
                                                    @Html.TextBoxFor(model => model.PopupTop, new { @class = "form-control", @placeholder = "Enter Top value" })
                                                </div>
                                                <div class="col-sm-7 qryerrormsg">
                                                    @Html.ValidationMessageFor(model => model.PopupTop, null, new { @class = "red" })
                                                </div>
                                            </div>
                                        </div>
                                        <div id="DialogPositionsDiv">
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">my</label>
                                                    @Html.DropDownListFor(m => m.DialogMy1, new SelectList(new List<object>
                                                    {
                                                    new { key= "left" , value = "Left" },
                                                    new { key= "center" , value = "Center" },
                                                    new { key= "right" , value = "Right" }
                                                    }, "key", "Value"), new { @class = "form-control" })
                                                    @Html.DropDownListFor(m => m.DialogMy2, new SelectList(new List<object>
                                                        {
                                                        new { key= "top" , value = "Top" },
                                                        new { key= "center" , value = "Center" },
                                                        new { key= "bottom" , value = "Bottom" }
                                                        }, "key", "Value"), new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">at</label>
                                                    @Html.DropDownListFor(m => m.DialogAt1, new SelectList(new List<object>
                                                    {
                                                    new { key= "left" , value = "Left" },
                                                    new { key= "center" , value = "Center" },
                                                    new { key= "right" , value = "Right" }
                                                    }, "key", "Value"), new { @class = "form-control" })
                                                    @Html.DropDownListFor(m => m.DialogAt2, new SelectList(new List<object>
                                                        {
                                                        new { key= "top" , value = "Top" },
                                                        new { key= "center" , value = "Center" },
                                                        new { key= "bottom" , value = "Bottom" }
                                                        }, "key", "Value"), new { @class = "form-control" })
                                                </div>
                                            </div>
                                        </div>
                                        <div id="PopupLengthsDiv">
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">Width<span class="danger">*</span></label>
                                                    @Html.TextBoxFor(model => model.PopupWidth, new { @class = "form-control", @placeholder = "Enter width value" })
                                                </div>
                                                <div class="col-sm-7 qryerrormsg">
                                                    @Html.ValidationMessageFor(model => model.PopupWidth, null, new { @class = "red" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-3">
                                                    <label for="inputEmail" class="gn">Height<span class="danger">*</span></label>
                                                    @Html.TextBoxFor(model => model.PopupHeight, new { @class = "form-control", @placeholder = "Enter height value" })
                                                </div>
                                                <div class="col-sm-7 qryerrormsg">
                                                    @Html.ValidationMessageFor(model => model.PopupHeight, null, new { @class = "red" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group" id="XIVisualisationDiv">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">XI Visualisation<span class="danger"></span></label>
                                                @Html.DropDownListFor(m => m.FKiVisualisationID, new SelectList(Model.ddlVisualisations, "Value", "text"), new { @class = "form-control" })
                                            </div>
                                        </div>

                                        <div class="form-group" id="ColumnDiv">
                                            <div class="col-md-3">
                                                <label for="inputEmail" class="gn">Status<span class="danger"></span></label>
                                                @Html.DropDownListFor(m => m.StatusTypeID, new SelectList(Model.StatusTypes, "Value", "text"), new { @class = "form-control" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-5">
                                                @Html.CheckBoxFor(m => m.IsFilterSearch, new { @id = "IsFilterSearch" })
                                                <label for="inputEmail" class="gn">Is Filter Search</label>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-5">
                                                @Html.CheckBoxFor(m => m.IsNaturalSearch, new { @id = "IsNaturalSearch" })
                                                <label for="inputEmail" class="gn">Is Natural Search</label>
                                            </div>
                                        </div>
                                        @*<div class="form-group">
                                            <div class="col-md-5">
                                                @Html.CheckBoxFor(m => m.IsExport, new { @id = "IsExport" })
                                                <label for="inputEmail" class="gn">Is Export</label>
                                            </div>
                                        </div>*@
                                        <div class="form-group">
                                            <div class="col-md-5">
                                                @Html.CheckBoxFor(m => m.IsDynamic, new { @id = "IsDynamic" })
                                                <label for="inputEmail" class="gn">Is Dynamic</label>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-md-5">
                                                @Html.CheckBoxFor(m => m.IsStoredProcedure, new { @id = "IsStoredProcedure" })
                                                <label for="inputEmail" class="gn">Is Stored Procedure</label>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <div class="col-sm-10">
                                                <button type="submit" class="btn btn-theme" id="querysave">Save & Continue</button>
                                                <button type="button" class="btn btn-theme reverse" id="queryreset">Reset</button>
                                                <button type="button" class="btn btn-theme decline" id="QueryCancel">Cancel</button>
                                            </div>
                                        </div>
                }
            </div>
            <div class="tab-pane" id="SelectTab">
                <h6 class="QueryDetails"></h6>
                <div class="box_filters">
                    <div class="form-group">
                        <div class="col-md-5" id="CheckMultiple">
                            @Html.CheckBoxFor(m => m.bIsMultiBO, new { @id = "IsMultipleBo" })
                            <label for="inputEmail" class="gn" id="multiplecheck">Is Multiple BO</label>
                        </div>
                    </div>
                </div>
                @*<div class="box_filters">
                          <div class="CheckMultiplefor form-group col-md-3">
                              <label for="inputEmail" class="gn">From Business Object<span class="danger"></span></label>
                              @Html.DropDownListFor(model => model.BOID, new SelectList(Model.AllBOs, "value", "text"), "--Select--", new { @class = "form-control FromMultipleBO", @id = "selectBO", style = "height: 28px; width: 240px;" })
                          </div>
                          <div class="col-sm-7 qryerrormsg">
                              @Html.ValidationMessageFor(model => model.BOID, null, new { @class = "red" })
                          </div>
                </div>*@
                <div class="box_filters">
                    <div class="CheckMultiplefor form-group col-md-3">
                        <label for="inputEmail" class="gn">Business Object<span class="danger">*</span></label>
                        @Html.TextBoxFor(model => model.BOName, new { @class = "form-control FromMultipleBO", @id = "selectBO", @placeholder = "Enter BO Name" })
                        @Html.HiddenFor(model => model.BOID, new { @id = "bussobjSelectTab" })
                    </div>
                    <div class="col-sm-7 qryerrormsg">
                        @Html.ValidationMessageFor(m => m.BOName, null, new { @class = "red" })
                    </div>
                </div>
                <div class="box_filters">
                    <div class="selectJoin form-group col-md-3">
                        <label class="inputEmail">SELECT JOIN</label>
                        <select id="innerjoinType" class="form-control" style="height: 28px; width: 240px; border-radius:10px">
                            <option value="INNER JOIN">INNER JOIN</option>
                            <option value="LEFT JOIN">LEFT JOIN</option>
                        </select>
                    </div>
                </div>
                <div class="box_filters">
                    <div class="feature-box col-md-5">
                        <h4>Available Fields</h4>
                        <ul class="list1 task availableTasks form-control" id="SelectLeftValues"></ul>
                        @*<select id="leftValues" multiple class="task availableTasks form-control"></select>*@
                    </div>
                    <div class="arrows_div col-md-2">
                        <div>
                            <button class="btn btn-rr" type="button" id="SelectBtnRight"> <i class="fa fa-chevron-right" aria-hidden="true"></i> </button>
                            <br>
                            <button class="btn btn-ll" id="SelectBtnLeft" type="button"> <i class="fa fa-chevron-left" aria-hidden="true"></i></button>
                        </div>
                    </div>
                    <div class="feature-box col-md-5">
                        <h4>Selected Fields<span class="danger">*</span></h4>
                        <ul id="SelectRightValues" class="AssignedFields list2 task form-control"></ul>
                        @*<select id="rightValues" multiple class="task availableTasks form-control"></select>*@
                    </div>
                </div>
            </div>
            <div class="tab-pane" id="WhereTab">
                <h6 class="QueryDetails"></h6>
                <div class="box_filters">
                    <div class="form-group">
                        <div class="col-md-5" id="CheckMultiple_where">
                            @Html.CheckBoxFor(m => m.IsMultipleBo, new { @id = "IsMultipleBo_where" })
                            <label for="inputEmail" class="gn" id="multiplecheck">Is Multiple BO</label>
                        </div>
                    </div>
                </div>
                <div class="box_filters">
                    <div class="CheckMultiplefor_where form-group col-md-3">
                        <label for="inputEmail" class="gn">Business Object<span class="danger">*</span></label>
                        @Html.TextBoxFor(model => model.BOName, new { @class = "form-control FromMultipleBOWhere", @id = "selectBO_where", @placeholder = "Enter BO Name" })
                        @Html.HiddenFor(model => model.BOID, new { @id = "bussobjWhereTab" })
                    </div>
                    <div class="col-sm-7 qryerrormsg">
                        @Html.ValidationMessageFor(m => m.BOName, null, new { @class = "red" })
                    </div>
                </div>
                <form class="col-xs-12" style="padding:0px;">
                    <div id="WhereOperators" class="form-group col-md-1">
                        <select id="Whereoperator" class="form-control">
                            <option value="AND">AND</option>
                            <option value="OR">OR</option>
                        </select>
                    </div>
                    <div class="form-group col-md-2" style="padding-left:0px;">
                        <label for="exampleInputEmail1">Select Field</label>
                        @Html.DropDownListFor(model => model.ID, new SelectList(new List<object>
                                       { }
                                                , "BOID", "Name", 0), "---Select---", new { @class = "form-control", @id = "WhereDDL" })
                    </div>
                    <div id="WhereCondition">
                        <div class="form-group col-md-2" id="Operators"></div>
                        <div class="form-group col-md-2" id="Runtime"></div>
                        <div class="form-group col-md-1" id="ORText"><label></label></div>
                        <div class="form-group col-md-2" id="WhereValue"></div>
                    </div>
                    <div class="form-group col-md-2 ttb_bt_where">
                        <input type="button" id="WhereOkBtn" class="btn btn-theme" value="OK">
                        <input type="button" id="WhereAddBtn" class="btn btn-theme" disabled value="Add More">
                    </div>
                </form>
                <div class="tab_scroll col-sm-12" style="padding:0px;">
                    <table id="WhereTable" class="table table_v2 table-striped custom-table table-condensed table-hover tablesorter dataTable tablelook no-footer">
                        <thead>
                            <tr>
                                <th>Clause</th>
                                <th>Value</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                    <div class="row"> </div>
                </div>
            </div>
            <div class="tab-pane" id="GroupTab">
                <h6 class="QueryDetails"></h6>
                <div class="box_filters">
                    <div class="form-group">
                        <div class="col-md-5" id="CheckMultiple_GroupBY">
                            @Html.CheckBoxFor(m => m.IsMultipleBo, new { @id = "IsMultipleBo_GroupBY" })
                            <label for="inputEmail" class="gn" id="multiplecheck">Is Multiple BO</label>
                        </div>
                    </div>
                </div>
                <div class="box_filters">
                    <div class="CheckMultiplefor_GroupBY form-group col-md-3">
                        <label for="inputEmail" class="gn">Business Object<span class="danger">*</span></label>
                        @Html.TextBoxFor(model => model.BOName, new { @class = "form-control FromMultipleBOGroupBY", @id = "selectBO_GroupBY", @placeholder = "Enter BO Name" })
                        @Html.HiddenFor(model => model.BOID, new { @id = "bussobjGroupBY" })
                    </div>
                    <div class="col-sm-7 qryerrormsg">
                        @Html.ValidationMessageFor(m => m.BOName, null, new { @class = "red" })
                    </div>
                </div>
                <form class="col-xs-12" style="padding:0px;">
                    <div class="form-group col-md-3" style="padding-left:0px;">
                        <label for="exampleInputEmail1">Select Field</label>
                        <select id="GroupBySelectBox" multiple class="form-control" style="height:180px;"></select>
                    </div>
                    <div class="form-group col-md-3 ttb_bt">
                        <input type="button" id="GroupByOkBtn" class="btn btn-theme" value="OK">
                    </div>
                </form>
                <div class="tab_scroll col-sm-12" style="padding:0px;">
                    <table id="GroupByTable" class="table table_v2 table-striped custom-table table-condensed table-hover tablesorter dataTable tablelook no-footer">
                        <thead>
                            <tr>
                                <th>Clause</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
            <div class="tab-pane" id="OrderTab">
                <h6 class="QueryDetails"></h6>
                <div class="box_filters">
                    <div class="form-group">
                        <div class="col-md-5" id="CheckMultiple_Order">
                            @Html.CheckBoxFor(m => m.IsMultipleBo, new { @id = "IsMultipleBo_Order" })
                            <label for="inputEmail" class="gn" id="multiplecheck">Is Multiple BO</label>
                        </div>
                    </div>
                </div>
                <div class="box_filters">
                    <div class="CheckMultiplefor_Order form-group col-md-3">
                        <label for="inputEmail" class="gn">Business Object<span class="danger">*</span></label>
                        @Html.TextBoxFor(model => model.BOName, new { @class = "form-control FromMultipleBOOrderBY", @id = "selectBO_OrderBY", @placeholder = "Enter BO Name" })
                        @Html.HiddenFor(model => model.BOID, new { @id = "bussobjOrderBY" })
                    </div>
                    <div class="col-sm-7 qryerrormsg">
                        @Html.ValidationMessageFor(m => m.BOName, null, new { @class = "red" })
                    </div>
                </div>
                <form class="col-xs-12" style="padding:0px;">
                    <div class="form-group col-md-3" style="padding-left:0px;">
                        <label class="exampleInputEmail1">Order Field</label>
                        <select id="OrderBySelectBox" class="form-control">
                            <option value="0">--Select--</option>
                        </select>
                        @*@Html.DropDownListFor(model => model.ID, new SelectList(ViewBag.columnlist , "BOID", "Name", 0), "--Select--", new { @class = "form-control", @id = "orderfeild" })*@
                    </div>

                    <div class="form-group col-md-3">
                        <label class="exampleInputEmail1">Order Type</label>
                        <select id="OrderByType" class="form-control">
                            <option value="0">--Select--</option>
                            <option value="ASC">ASC</option>
                            <option value="DESC">DESC</option>
                        </select>
                    </div>
                    <div class="form-group col-md-3 ttb_bt">
                        <input type="button" id="OrderByOkBtn" class="btn btn-theme" value="OK">

                    </div>
                </form>
                <div class="tab_scroll col-sm-12" style="padding:0px;">
                    <table id="OrderByTable" class="table table_v2 table-striped custom-table table-condensed table-hover tablesorter dataTable tablelook no-footer">
                        <thead>
                            <tr>
                                <th>Clause</th>
                                <th>Type</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
            <div class="tab-pane" id="SearchTab">
                <h6 class="QueryDetails"></h6>
                <div class="box_filters">
                    <div class="form-group">
                        <div class="col-md-5" id="CheckMultiplesearchtab">
                            @Html.CheckBoxFor(m => m.bIsMultiSearch, new { @id = "IsMultipleBoserachTab" })
                            <label for="inputEmail" class="gn" id="multiplecheck">Is Multiple BO</label>
                        </div>
                    </div>
                </div>
                <div class="box_filters">
                    <div class="CheckMultiplefor_Searchtab form-group col-md-3">
                        <label for="inputEmail" class="gn">Business Object<span class="danger">*</span></label>
                        @Html.TextBoxFor(model => model.BOName, new { @class = "form-control FromMultipleBOserachTab", @id = "serachTabBO", @placeholder = "Enter BO Name", style = "height: 28px; width: 240px;" })
                        @Html.HiddenFor(model => model.BOID, new { @id = "bussobjserachTab" })
                    </div>
                    <div class="col-sm-7 qryerrormsg">
                        @Html.ValidationMessageFor(m => m.BOName, null, new { @class = "red" })
                    </div>
                </div>
                <div class="box_filters">
                    <div class="feature-box col-xs-5">
                        <h4>Select Fields</h4>
                        <ul class="list1 task availableTasks form-control" id="SearchLeftValues"></ul>
                        @*<select id="selectvalues" multiple class="task availableTasks form-control"></select>*@
                    </div>
                    <div class="arrows_div col-xs-2">
                        <div>
                            <button class="btn btn-rr" type="button" id="btnsearright"><i class="fa fa-chevron-right" aria-hidden="true"></i></button>
                            <br>
                            <button class="btn btn-ll" id="btnsearchleft" type="button"><i class="fa fa-chevron-left" aria-hidden="true"></i></button>
                        </div>
                    </div>
                    <div class="feature-box col-xs-5">
                        <h4>Search Fields</h4>
                        <ul id="SearchRightValues" class="AssignedFields list2 task form-control"></ul>
                        @*<select id="searchValues" multiple class="task availableTasks form-control"></select>*@
                    </div>
                </div>
                <div class="form-group" id="bIsXICreatedByID">
                    <div class="col-md-12">
                        @Html.CheckBoxFor(m => m.bIsXICreatedBy, new { @id = "bIsXICreatedBy" })
                        <label for="inputEmail" class="gn">Is Created By</label>
                    </div>
                </div>
                <div class="form-group col-md-12" id="FKiCtrdOneClickID">
                    <div class="col-md-3">
                        <label for="inputEmail" class="gn">CreatedBy 1-Click</label>
                        @Html.DropDownListFor(m => m.FKiCrtd1ClickID, new SelectList(Model.ddlOneClicks, "value", "text"), new { @class = "form-control", @id = "FKiCtrdOneClickIDs" })
                        @*<input type="text" placeholder="Enter 1-Click Name Here" class="form-control" id="FKiCtrdOneClickID" name="sOneClickName"/>*@
                    </div>
                </div>
                @*<div class="form-group">
                    <div class="col-md-12">
                        @Html.CheckBoxFor(m => m.bIsXICreatedWhen, new { @id = "bIsXICreatedWhen" })
                        <label for="inputEmail" class="gn">Is Created When</label>
                    </div>
                </div>*@
                <div class="form-group" id="bIszXUpdtByID">
                    <div class="col-md-12">
                        @Html.CheckBoxFor(m => m.bIsXIUpdatedBy, new { @id = "bIsXIUpdatedBy" })
                        <label for="inputEmail" class="gn">Is Updated By</label>
                    </div>
                </div>
                <div class="form-group col-md-12" id="FKiUpdtOneClickID">
                    <div class="col-md-3">
                        <label for="inputEmail" class="gn">UpdatedBy 1-Click</label>
                        @*<input type="text" placeholder="Enter 1-Click Name Here" class="form-control" id="FKiUpdtOneClickName" name="sOneClickName"/>*@
                        @Html.DropDownListFor(m => m.FKiUpdtd1ClickID, new SelectList(Model.ddlOneClicks, "value", "text"), new { @class = "form-control", @id = "FKiUpdtOneClickIDs" })
                    </div>
                </div>
                @*<div class="form-group">
                    <div class="col-md-12">
                        @Html.CheckBoxFor(m => m.bIsXIUpdatedWhen, new { @id = "bIsXIUpdatedWhen" })
                        <label for="inputEmail" class="gn">Is Updated When</label>
                    </div>
                </div>*@
                <div class="form-group">
                    <input type="button" value="Save" id="SearchSave" class="savebtn btn btn-theme">
                    <input type="button" value="Cancel" class="CreateCancel savebtn btn btn-theme decline">
                </div>
            </div>

            <div class="form-group" id="NVsTab">
                <div class="content">
                    <div class="row">
                        <div id="NameValuePairs" class="col-md-12 no-padding">
                            @if (Model.NVs == null || Model.NVs.Count == 0)
                            {
                                <div class="form-group NVPairs col-md-12">
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> Name<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" name="Names" placeholder="Name" class="form-control" />
                                    </div>
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> Value<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" name="Values" placeholder="Value" class="form-control" />
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-theme btn-xs DeleteNVPair">Delete</button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                foreach (var NVs in Model.NVs)
                                {
                                    <div class="form-group NVPairs col-md-12">
                                        <div>
                                            <input type="hidden" name="ID" value="@NVs.ID" />
                                        </div>
                                        <div class="col-sm-1">
                                            <label for="inputEmail" class="gn">Name<span class="danger"></span></label>
                                        </div>
                                        <div class="col-sm-2">
                                            <input type="text" name="Names" placeholder="Name" class="form-control" value="@NVs.sName" />
                                        </div>
                                        <div class="col-sm-1">
                                            <label for="inputEmail" class="gn">Value<span class="danger"></span></label>
                                        </div>
                                        <div class="col-sm-2">
                                            <input type="text" name="Values" placeholder="Value" class="form-control" value="@NVs.sValue" />
                                        </div>
                                        <div class="col-md-2">
                                            <button type="button" class="btn btn-theme btn-xs DeleteNVPair" value="@NVs.ID">Delete</button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2">
                            <input type="button" id="AddMore" value="Add" class="btn btn-theme btn-xs">
                            <input type="button" class="btn btn-theme btn-xs" value="Save" id="SaveNVs" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group" id="ParamsTab">
                <div class="content">
                    <div class="row">
                        <div id="NameDefaultValuePairs" class="col-md-12 no-padding">
                            @if (Model.NDVs == null || Model.NDVs.Count == 0)
                            {
                                <div class="form-group NDVPairs col-md-12">
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> Name<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" name="Names" placeholder="Name" class="form-control" />
                                    </div>
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> Default<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-2"><input type="text" name="Defaults" placeholder="Default Value" class="form-control" /></div>
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> Value<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" name="Values" placeholder="Value" class="form-control" />
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-theme btn-xs DeleteNDVPair">Delete</button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                foreach (var NDVs in Model.NDVs)
                                {
                                    <div class="form-group NDVPairs col-md-12">
                                        <div>
                                            <input type="hidden" name="ID" value="@NDVs.ID" />
                                        </div>
                                        <div class="col-sm-1">
                                            <label for="inputEmail" class="gn">Name<span class="danger"></span></label>
                                        </div>
                                        <div class="col-sm-2">
                                            <input type="text" name="Names" placeholder="Name" class="form-control" value="@NDVs.sName" />
                                        </div>
                                        <div class="col-sm-1">
                                            <label for="inputEmail" class="gn"> Default<span class="danger"></span></label>
                                        </div>
                                        <div class="col-sm-2">
                                            <input type="text" name="Defaults" placeholder="Default Value" class="form-control" value="@NDVs.sContext" />
                                        </div>
                                        <div class="col-sm-1">
                                            <label for="inputEmail" class="gn">Value<span class="danger"></span></label>
                                        </div>
                                        <div class="col-sm-2">
                                            <input type="text" name="Values" placeholder="Value" class="form-control" value="@NDVs.sValue" />
                                        </div>
                                        <div class="col-md-2">
                                            <button type="button" class="btn btn-theme btn-xs DeleteNDVPair" value="@NDVs.ID">Delete</button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2">
                            <input type="button" id="AddMoreParam" value="Add" class="btn btn-theme btn-xs">
                            <input type="button" class="btn btn-theme btn-xs" value="Save" id="SaveNDVs" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group" id="ButtonsTab">
                <div class="content">
                    <div class="row">
                        <div id="OneClickLinkPairs" class="col-md-12 no-padding">
                            @if (Model.OneClickXILinks == null || Model.OneClickXILinks.Count() == 0)
                            {
                                <div class="form-group OneClickLPairs col-md-12" data-name="QSLinkNV">
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> Name<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" name="sName" placeholder="Name" class="form-control" />
                                    </div>
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> XILink<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-2">
                                        <input type="text" name="QSLinktbox" placeholder="Enter XILink Name" class="form-control OneClickLinkValue" />
                                    </div>
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> Code<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-1">
                                        <input type="text" name="sCode" placeholder="Code" class="form-control" />
                                    </div>
                                    <div class="col-sm-1">
                                        <label for="inputEmail" class="gn"> Type<span class="danger"></span></label>
                                    </div>
                                    <div class="col-sm-2">
                                        <select class="form-control" id="iType" name="iType">
                                            <option value="0">--Select--</option>
                                            <option value="10">Button</option>
                                            <option value="20">HTML Merge</option>
                                        </select>
                                    </div>
                                    <div class="col-sm-1">
                                        <button type="button" class="btn btn-theme btn-xs DeleteXI1ClickLinkPair">Delete</button>
                                    </div>
                                </div>
                                                    <div class="form-group OneClickLPairs col-md-12" data-name="QSLinkNV">
                                                        <div class="col-sm-1">
                                                            <label for="inputEmail" class="gn"> Name<span class="danger"></span></label>
                                                        </div>
                                                        <div class="col-sm-2">
                                                            <input type="text" name="sName" placeholder="Name" class="form-control" />
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <label for="inputEmail" class="gn"> XILink<span class="danger"></span></label>
                                                        </div>
                                                        <div class="col-sm-2">
                                                            <input type="text" name="QSLinktbox" placeholder="Enter XILink Name" class="form-control OneClickLinkValue" />
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <label for="inputEmail" class="gn"> Code<span class="danger"></span></label>
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <input type="text" name="sCode" placeholder="Code" class="form-control" />
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <label for="inputEmail" class="gn"> Type<span class="danger"></span></label>
                                                        </div>
                                                        <div class="col-sm-2">
                                                            <select class="form-control" id="iType" name="iType">
                                                                <option value="0">--Select--</option>
                                                                <option value="10">Button</option>
                                                                <option value="20">HTML Merge</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <button type="button" class="btn btn-theme btn-xs DeleteXI1ClickLinkPair">Delete</button>
                                                        </div>
                                                    </div>
                                                    <div class="form-group OneClickLPairs col-md-12" data-name="QSLinkNV">
                                                        <div class="col-sm-1">
                                                            <label for="inputEmail" class="gn"> Name<span class="danger"></span></label>
                                                        </div>
                                                        <div class="col-sm-2">
                                                            <input type="text" name="sName" placeholder="Name" class="form-control" />
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <label for="inputEmail" class="gn"> XILink<span class="danger"></span></label>
                                                        </div>
                                                        <div class="col-sm-2">
                                                            <input type="text" name="QSLinktbox" placeholder="Enter XILink Name" class="form-control OneClickLinkValue" />
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <label for="inputEmail" class="gn"> Code<span class="danger"></span></label>
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <input type="text" name="sCode" placeholder="Code" class="form-control" />
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <label for="inputEmail" class="gn"> Type<span class="danger"></span></label>
                                                        </div>
                                                        <div class="col-sm-2">
                                                            <select class="form-control" id="iType" name="iType">
                                                                <option value="0">--Select--</option>
                                                                <option value="10">Button</option>
                                                                <option value="20">HTML Merge</option>
                                                            </select>
                                                        </div>
                                                        <div class="col-sm-1">
                                                            <button type="button" class="btn btn-theme btn-xs DeleteXI1ClickLinkPair">Delete</button>
                                                        </div>
                                                    </div>
                            }
                            else
                            {
                                foreach (var link in Model.OneClickXILinks)
                                {
                                    <div id="OneClickLinkPairs" class="col-md-12 no-padding">
                                        <div class="form-group OneClickLPairs col-md-12" data-name="QSLinkNV">
                                            <div>
                                                <input type="hidden" name="ID" value="@link.ID" />
                                            </div>
                                            <div class="col-md-1">
                                                <label for="inputEmail" class="gn"> Name<span class="danger"></span></label>
                                            </div>
                                            <div class="col-md-2">
                                                <input type="text" name="sName" placeholder="Name" class="form-control" value="@link.sName" />
                                            </div>
                                            <div class="col-md-1">
                                                <label for="inputEmail" class="gn"> XILink<span class="danger"></span></label>
                                            </div>
                                            <div class="col-md-2">
                                                <input type="text" name="QSLinktbox" placeholder="Enter XILink Name" class="form-control OneClickLinkValue" value="@link.XILinkName" />
                                            </div>
                                            <div class="col-md-1">
                                                <label for="inputEmail" class="gn"> Code<span class="danger"></span></label>
                                            </div>
                                            <div class="col-md-1">
                                                <input type="text" name="sCode" placeholder="Code" class="form-control" value="@link.sCode" />
                                            </div>
                                            <div class="col-md-1">
                                                <label for="inputEmail" class="gn"> Type<span class="danger"></span></label>
                                            </div>
                                            <div class="col-md-2">
                                                <select class="form-control" id="iType" name="iType">
                                                    <option value="0">--Select--</option>
                                                    @if (link.iType == 10)
                                                    {
                                                        <option value="10" selected>Button</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="10">Button</option>
                                                    }
                                                    @if (link.iType == 20)
                                                    {
                                                        <option value="20" selected>HTML Merge</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="20">HTML Merge</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-1">
                                                <button type="button" class="btn btn-theme btn-xs DeleteXI1ClickLinkPair" value="@link.ID">Delete</button>
                                            </div>

                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2">
                            <button type="button" id="AddMore1ClickLink" class="btn btn-theme btn-xs">Add</button>
                            <button type="button" id="Save1ClickFieldsBtn" class="btn btn-theme btn-xs">Save</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group" id="AccessTab">
                <div class="content">
                    <div class="row">
                        <div class="box-body col-md-3" id="test2">
                            <h5>Available Roles</h5>
                            @*<div id="UserMainTreeClick" class="tree">
                                @{Html.RenderPartial("_OneClickPermission");}
                            </div>*@
                            <div id="UserMainTreeClick" class="tree"></div>
                            <div class="form-group">
                                <div class="col-md-2">
                                    <br />
                                    <input type="button" class="btn btn-theme" id="ClickPermission" name="ClickPermission" value="Save" />
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <div class="tab-pane" id="ActionsTab">
                <h6 class="QueryDetails"></h6>
                <div id="ActionButtons">
                    @*<div class="form-group" id="Inner1Clicks">
                        <label for="inputName" class="col-sm-2 control-label">Inner 1-Click</label>
                        <div class="col-sm-4">
                            @Html.DropDownListFor(m => m.InnerReportID, new SelectList(Model.InnerReports, "value", "text"), "--Select--", new { @class = "form-control", @id = "InnerReport" })
                        </div>
                        <div class="col-sm-4 OtherPopupError"></div>
                    </div>*@
                    <div id="RowDiv">
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.CheckBoxFor(m => m.IsRowClick, new { @id = "IsRowClick" })
                                <label for="inputEmail" class="gn">Is Row Click</label>
                            </div>
                        </div>
                        <div id="RowClickDiv">
                            <div id="RowPopups">
                                <div class="form-group">
                                    <label for="inputSkills" class="col-sm-2 control-label">XiLinks</label>
                                    <div class="col-sm-4">
                                        @Html.DropDownListFor(m => m.RowXiLinkID, new SelectList(Model.XiLinksList, "value", "text"), new { @class = "form-control" })
                                    </div>
                                    <div class="col-sm-4">
                                        <input type="button" class="btn btn-theme btn-xs" value="Refresh" onclick="XiLinkManager('Row','Refresh')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="Add" onclick="XiLinkManager('Row','Add')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="Edit" onclick="XiLinkManager('Row','Edit')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="View" onclick="XiLinkManager('Row','View')" />
                                    </div>
                                    <div class="col-sm-4 ColumnClickError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="ColDiv">
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.CheckBoxFor(m => m.IsColumnClick, new { @id = "IsColumnClick" })
                                <label for="inputEmail" class="gn">Is Column Click</label>
                            </div>
                        </div>
                        <div id="ColumnClickDiv">
                            <div class="form-group">
                                <label for="inputSkills" class="col-sm-2 control-label">Column</label>
                                <div class="col-sm-4">
                                    @Html.DropDownListFor(model => model.OnClickColumn, new SelectList(new List<object>
                                                            {
                                                            new { key= "--Select--" , value = "--Select--" },
                                                            }, "key", "Value"), new { @class = "form-control", @id = "OnClickColumn" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="inputSkills" class="col-sm-2 control-label">Column Function</label>
                                <div class="col-sm-4">
                                    @Html.TextBoxFor(model => model.OnClickParameter, new { @placeholder = "Column Function", @class = "form-control", @id = "OnClickParameter" })
                                </div>
                            </div>
                            <div id="ColumnPopups">
                                <div class="form-group">
                                    <label for="inputSkills" class="col-sm-2 control-label">XiLinks</label>
                                    <div class="col-sm-4">
                                        @Html.DropDownListFor(m => m.ColumnXiLinkID, new SelectList(Model.XiLinksList, "value", "text"), new { @class = "form-control" })
                                    </div>
                                    <div class="col-sm-4">
                                        <input type="button" class="btn btn-theme btn-xs" value="Refresh" onclick="XiLinkManager('Column','Refresh')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="Add" onclick="XiLinkManager('Column','Add')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="Edit" onclick="XiLinkManager('Column','Edit')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="View" onclick="XiLinkManager('Column','View')" />
                                    </div>
                                    <div class="col-sm-4 ColumnClickError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="CellDiv">
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.CheckBoxFor(m => m.IsCellClick, new { @id = "IsCellClick" })
                                <label for="inputEmail" class="gn">Is Cell Click</label>
                            </div>
                        </div>
                        <div id="CellClickDiv">
                            <div class="form-group">
                                <label for="inputSkills" class="col-sm-2 control-label">Column</label>
                                <div class="col-sm-4">
                                    @Html.DropDownListFor(model => model.OnClickCell, new SelectList(new List<object>
                                                            {
                                                            new { key= "--Select--" , value = "--Select--" },
                                                            }, "key", "Value"), new { @class = "form-control", @id = "OnClickCell" })
                                </div>
                            </div>
                            <div id="CellPopups">
                                <div class="form-group">
                                    <label for="inputSkills" class="col-sm-2 control-label">XiLinks</label>
                                    <div class="col-sm-4">
                                        @Html.DropDownListFor(m => m.CellXiLinkID, new SelectList(Model.XiLinksList, "value", "text"), new { @class = "form-control" })
                                    </div>
                                    <div class="col-sm-4">
                                        <input type="button" class="btn btn-theme btn-xs" value="Refresh" onclick="XiLinkManager('Cell','Refresh')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="Add" onclick="XiLinkManager('Cell','Add')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="Edit" onclick="XiLinkManager('Cell','Edit')" />
                                        <input type="button" class="btn btn-theme btn-xs" value="View" onclick="XiLinkManager('Cell','View')" />
                                    </div>
                                    <div class="col-sm-4 CellClickError"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="TotalsDiv">
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.CheckBoxFor(m => m.IsRowTotal, new { @id = "IsRowTotal" })
                                <label for="inputEmail" class="gn">Is Row Total</label>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.CheckBoxFor(m => m.IsColumnTotal, new { @id = "IsColumnTotal" })
                                <label for="inputEmail" class="gn">Is Column Total</label>
                            </div>
                        </div>
                    </div>
                    <div id="GridButtonsDiv">
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.CheckBoxFor(m => m.IsCreate, new { @id = "IsCreate" })
                                <label for="inputEmail" class="gn">Is Create</label>
                            </div>
                            <div id="CreateClickDiv">
                                <div class="form-group">
                                    <div class="col-md-1">
                                        <label for="inputEmail" class="gn col-sm-1">Label<span class="danger"></span></label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.sAddLabel, new { @id = "LabelName", @placeholder = "Label Name", @class = "form-control" })
                                    </div>
                                    <div class="col-md-1">
                                        <label for="inputEmail" class="gn col-sm-1">Type</label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.sCreateType, new SelectList(new List<Object>
                                                                {
                                                                new { key= "0" , value = "--Select--" },
                                                                new { key= "Dialog" , value = "Dialog" },
                                                                new { key= "Popup" , value = "Popup" },
                                                                new { key= "InlineTop" , value = "InlineTop" },
                                                                new { key= "InlineBottom" , value = "InlineBottom" }
                                                                }, "key", "Value"), new { @class = "form-control", @id = "sCreateType" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-6">
                                        <label for="inputSkills" class="col-sm-1 control-label">Layout</label>
                                        <div class="col-md-3">
                                            @Html.DropDownListFor(m => m.iLayoutID, new SelectList(Model.ddlLayouts, "value", "text"), new { @class = "form-control", @id = "LayoutID" })
                                        </div>
                                        <div class="col-sm-4">
                                            <button type="button" class="btn btn-theme btn-xs"><i class="fa fa-search" aria-hidden="true"></i></button>
                                            <button type="button" class="btn btn-theme btn-xs" onclick="fnceditlayout()"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></button>
                                            <button type="button" class="btn btn-theme btn-xs" onclick="fncautocreatelayout('@Model.BO','@Model.ID')">Auto Create</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-6">
                                        <label for="inputSkills" class="col-sm-1 control-label">Map</label>
                                        <div class="col-sm-4">
                                            @Html.DropDownListFor(m => m.RowXiLinkID, new SelectList(Model.ddlLayoutMappings, "value", "text"), new { @class = "form-control", @id = "MapID" })
                                        </div>
                                        <div class="col-sm-4">
                                            <button type="button" class="btn btn-theme btn-xs"><i class="fa fa-search" aria-hidden="true"></i></button>
                                            <button type="button" class="btn btn-theme btn-xs"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></button>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-2">
                                        <label for="inputEmail" class="gn">Role<span class="danger"></span></label>
                                        @Html.DropDownListFor(m => m.CreateRoleID, new SelectList(Model.ddlRoles, "value", "text"), new { @class = "form-control" })
                                    </div>
                                    <div class="col-md-2">
                                        <label for="inputEmail" class="gn">Group<span class="danger"></span></label>
                                        @Html.DropDownListFor(model => model.CreateGroupID, new SelectList(Model.ddlBOGroups, "value", "text"), new { @class = "form-control" })
                                    </div>
                                    <div class="col-md-2">
                                        <label for="inputEmail" class="gn">Script<span class="danger"></span></label>
                                        <button type="button" class="btn btn-theme"><i class="fa fa-bars"></i></button>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.CheckBoxFor(m => m.IsRefresh, new { @id = "IsRefresh" })
                                    <label for="inputEmail" class="gn">Is Refresh</label>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.CheckBoxFor(m => m.bIsCheckbox, new { @id = "bIsCheckbox" })
                                    <label for="inputEmail" class="gn">Is Checkbox</label>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.CheckBoxFor(m => m.bIsCopy, new { @id = "bIsCopy" })
                                    <label for="inputEmail" class="gn">Is Copy</label>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.CheckBoxFor(m => m.bIsView, new { @id = "bIsView" })
                                    <label for="inputEmail" class="gn">Is View</label>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.CheckBoxFor(m => m.IsEdit, new { @id = "IsEdit" })
                                    <label for="inputEmail" class="gn">Is Edit</label>
                                </div>
                                <div id="EditClickDiv">
                                    <div class="form-group">
                                        <div class="col-md-2">
                                            <label for="inputEmail" class="gn">Role<span class="danger"></span></label>
                                            @Html.DropDownListFor(m => m.EditRoleID, new SelectList(Model.ddlRoles, "value", "text"), new { @class = "form-control" })
                                        </div>
                                        <div class="col-md-2">
                                            <label for="inputEmail" class="gn">Group<span class="danger"></span></label>
                                            @Html.DropDownListFor(model => model.EditGroupID, new SelectList(Model.ddlBOGroups, "value", "text"), new { @class = "form-control" })
                                        </div>
                                        <div class="col-md-2">
                                            <label for="inputEmail" class="gn">Script<span class="danger"></span></label>
                                            <button type="button" class="btn btn-theme"><i class="fa fa-bars"></i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.CheckBoxFor(m => m.IsDelete, new { @id = "IsDelete" })
                                    <label for="inputEmail" class="gn">Is Delete</label>
                                </div>
                                <div id="DeleteClickDiv">
                                    <div class="form-group">
                                        <div class="col-md-2">
                                            <label for="inputEmail" class="gn">Role<span class="danger"></span></label>
                                            @Html.DropDownListFor(m => m.DeleteRoleID, new SelectList(Model.ddlRoles, "value", "text"), new { @class = "form-control" })
                                        </div>
                                        <div class="col-md-2">
                                            <label for="inputEmail" class="gn">Script<span class="danger"></span></label>
                                            <button type="button" class="btn btn-theme"><i class="fa fa-bars"></i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.CheckBoxFor(m => m.IsExport, new { @id = "IsExport" })
                                    <label for="inputEmail" class="gn">Is Export</label>
                                </div>
                                <div id="FileExtensionDiv">
                                    <div class="form-group">
                                        <div class="col-md-1">
                                            <label for="inputEmail" class="gn col-sm-1">File Extension<span class="danger"></span></label>
                                        </div>
                                        <div class="col-md-3">
                                            @Html.TextBoxFor(m => m.sFileExtension, new { @id = "FileExtension", @placeholder = "File Extension", @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="EditPopUPFields">
                    <h4>Select Fields For View/Edit Record</h4>
                    <div class="box_filters col-xs-5 m-pad-0">
                        <div class="feature-box">
                            <h4>Available Editable Fields</h4>

                            <ul class="list1 task availableTasks form-control" id="EditableleftValues"></ul>
                        </div>

                        <div class="feature-box">
                            <h4>Available Non Editable Fields</h4>

                            <ul class="list1 task availableTasks form-control" id="NonEditableleftValues"></ul>
                        </div>
                    </div>
                    <div class="arrows_div popuparrows col-xs-2 actionbuttons">
                        <div style="padding-top:230px;">
                            <button class="btn btn-rr" type="button" id="EditablebtnRight"> <i class="fa fa-chevron-right" aria-hidden="true"></i></button>
                            <br>
                            <button class="btn btn-ll" id="EditablebtnLeft" type="button"> <i class="fa fa-chevron-left" aria-hidden="true"></i> </button>
                        </div>
                    </div>
                    <div class="box_filters col-xs-5 m-pad-0">


                        <div class="feature-box">
                            <h4>Selected Fields</h4>
                            <ul id="EditablerightValues" class="AssignedFields list2 task form-control"></ul>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <input type="button" value="Save" id="ActionsSave" class="savebtn btn btn-theme">
                    <input type="button" value="Cancel" class="CreateCancel savebtn btn btn-theme decline">
                </div>
            </div>

            @if (Model.OrganizationID > 0)
            {
                <div class="tab-pane" id="TargetsTab">
                    <h6 class="QueryDetails"></h6>
                    <div id="TargetForm">
                        @using (Ajax.BeginForm("SaveQueryTargets", "QueryGeneration", new AjaxOptions { HttpMethod = "POST", OnSuccess = "TargetComplete" }, new { @class = "form-horizontal", @id = "TargetsForm" }))
                        {
                            @Html.ValidationSummary(true);
                            @Html.HiddenFor(m => m.TarQueryID, new { @id = "SavedQueryID" })
                            @Html.HiddenFor(m => m.TargetID, new { @id = "TargetID" })
                            <div class="form-group">
                                <div class="col-md-3">
                                    <label for="inputEmail" class="gn">User<span class="danger">*</span></label>
                                    @Html.DropDownListFor(m => m.TargetUsers, new SelectList(Model.TargetUsersList, "value", "text"), "--Select--", new { @class = "form-control", @id = "TargetUsers" })
                                </div>
                                <div class="col-sm-7 qryerrormsg">
                                    @Html.ValidationMessageFor(m => m.TargetUsers, null, new { @class = "red" })
                                </div>
                            </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Column<span class="danger">*</span></label>
                                                        @Html.DropDownListFor(model => model.TargetColumns, new SelectList(new List<object> { }, "key", "Value"), "--Select--", new { @class = "form-control", @id = "TargetColumns" })
                                                    </div>
                                                    <div class="col-sm-7 qryerrormsg">
                                                        @Html.ValidationMessageFor(m => m.TargetColumns, null, new { @class = "red" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Target<span class="danger">*</span></label>
                                                        @Html.TextBoxFor(model => model.Targets, new { @placeholder = "Enter Target", @class = "form-control", @id = "Targets" })
                                                    </div>
                                                    <div class="col-sm-7 qryerrormsg">
                                                        @Html.ValidationMessageFor(m => m.Targets, null, new { @class = "red" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Period</label>
                                                        @Html.DropDownListFor(model => model.TargetPeriod, new SelectList(new List<object>
                                                    {
                                                    new { key= "Daily" , value = "Daily" },
                                                    new { key= "Weekly" , value = "Weekly" },
                                                    new { key= "Monthly" , value = "Monthly" },
                                                    }, "key", "Value"), new { @class = "form-control", @id = "TargetPeriod" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Colour</label>
                                                        @Html.DropDownListFor(model => model.Colour, new SelectList(new List<object>
                                                    {
                                                    new { key= "Red" , value = "Red" },
                                                    new { key= "Amber" , value = "Amber" },
                                                    new { key= "Green" , value = "Green" },
                                                    }, "key", "Value"), new { @class = "form-control", @id = "TargetColour" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-5">
                                                        @Html.CheckBoxFor(m => m.IsSMS, new { @id = "IsSMS" })
                                                        <label for="inputEmail" class="gn">Is SMS</label>
                                                    </div>
                                                </div>
                                                <div class="form-group" id="TRSMSTemplates">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Template<span class="danger">*</span></label>
                                                        @Html.DropDownListFor(m => m.SMSTemplateID, new SelectList(Model.SMSTemplates, "value", "text"), "--Select--", new { @class = "form-control" })
                                                    </div>
                                                    <div class="col-sm-7 qryerrormsg">
                                                        @Html.ValidationMessageFor(m => m.SMSTemplateID, null, new { @class = "red" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-5">
                                                        @Html.CheckBoxFor(m => m.IsEmail, new { @id = "IsEmail" })
                                                        <label for="inputEmail" class="gn">Is Email</label>
                                                    </div>
                                                </div>
                                                <div class="form-group" id="TREmailTemplates">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Template<span class="danger">*</span></label>
                                                        @Html.DropDownListFor(m => m.EmailTemplateID, new SelectList(Model.EmailTemplates, "value", "text"), "--Select--", new { @class = "form-control" })
                                                    </div>
                                                    <div class="col-sm-7 qryerrormsg">
                                                        @Html.ValidationMessageFor(m => m.EmailTemplateID, null, new { @class = "red" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-5">
                                                        @Html.CheckBoxFor(m => m.IsNotification, new { @id = "IsNotification" })
                                                        <label for="inputEmail" class="gn">Is Notification</label>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <input type="submit" value="Save" class="savebtn btn btn-theme">
                                                        <input type="button" value="Cancel" class="CreateCancel savebtn btn btn-theme decline">
                                                    </div>
                                                </div>
                        }
                    </div>
                    <div id="TargetsGrid">
                        @{
                            Html.RenderAction("GetTargetsGrid", "QueryGeneration", new { ID = Model.ID, OrgID = Model.OrganizationID });
                        }
                    </div>
                </div>
                                    <div class="tab-pane" id="SchedulerTab">
                                        <h6 class="QueryDetails"></h6>
                                        <div id="SchedulerForm">
                                            @using (Ajax.BeginForm("SaveQueryScheduler", "QueryGeneration", new AjaxOptions { HttpMethod = "POST", OnSuccess = "SchedulerComplete" }, new { @class = "form-horizontal", @id = "SchedulersForm" }))
                                            {
                                                @Html.ValidationSummary(true);
                                                @Html.HiddenFor(m => m.SchQueryID, new { @id = "SchQueryID" })
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">User<span class="danger">*</span></label>
                                                        @Html.DropDownListFor(m => m.UserID, new SelectList(Model.TargetUsersList, "value", "text"), "--Select--", new { @class = "form-control" })
                                                    </div>
                                                    <div class="col-sm-7 qryerrormsg">
                                                        @Html.ValidationMessageFor(m => m.UserID, null, new { @class = "red" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Period</label>
                                                        @Html.DropDownListFor(model => model.TargetPeriod, new SelectList(new List<object>
                                                    {
                                                    new { key= "Daily" , value = "Daily" },
                                                    new { key= "Weekly" , value = "Weekly" },
                                                    new { key= "Monthly" , value = "Monthly" },
                                                    }, "key", "Value"), new { @class = "form-control", @id = "SchedulerPeriod" })
                                                    </div>
                                                </div>
                                                <div class="form-group" id="Dates">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Date</label>
                                                        @Html.DropDownListFor(model => model.Date, new SelectList(new List<object>
                                                    {
                                                    new { key= "1" , value = "01" },
                                                    new { key= "2" , value = "02" },
                                                    new { key= "3" , value = "03" },
                                                    new { key= "4" , value = "04" },
                                                    new { key= "5" , value = "05" },
                                                    new { key= "6" , value = "06" },
                                                    new { key= "7" , value = "07" },
                                                    new { key= "8" , value = "08" },
                                                    new { key= "9" , value = "09" },
                                                    new { key= "10" , value = "10" },
                                                    new { key= "11" , value = "11" },
                                                    new { key= "12" , value = "12" },
                                                    new { key= "13" , value = "13" },
                                                    new { key= "14" , value = "14" },
                                                    new { key= "15" , value = "15" },
                                                    new { key= "16" , value = "16" },
                                                    new { key= "17" , value = "17" },
                                                    new { key= "18" , value = "18" },
                                                    new { key= "19" , value = "19" },
                                                    new { key= "20" , value = "20" },
                                                    new { key= "21" , value = "21" },
                                                    new { key= "22" , value = "22" },
                                                    new { key= "23" , value = "23" },
                                                    new { key= "24" , value = "24" },
                                                    new { key= "25" , value = "25" },
                                                    new { key= "26" , value = "26" },
                                                    new { key= "27" , value = "27" },
                                                    new { key= "28" , value = "28" },
                                                    new { key= "29" , value = "29" },
                                                    new { key= "30" , value = "30" },
                                                    new { key= "31" , value = "31" },
                                                    }, "key", "Value"), new { @class = "form-control" })
                                                    </div>
                                                </div>
                                                <div class="form-group" id="Days">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Day</label>
                                                        @Html.DropDownListFor(model => model.Day, new SelectList(new List<object>
                                                    {
                                                    new { key= "Monday" , value = "Monday" },
                                                    new { key= "Tuesday" , value = "Tuesday" },
                                                    new { key= "Wednesday" , value = "Wednesday" },
                                                    new { key= "Thursday" , value = "Thursday" },
                                                    new { key= "Friday" , value = "Friday" },
                                                    new { key= "Saturday" , value = "Saturday" },
                                                    new { key= "Sunday" , value = "Sunday" },
                                                    }, "key", "Value"), new { @class = "form-control" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Time(Hours)</label>
                                                        @Html.DropDownListFor(model => model.Time, new SelectList(new List<object>
                                                    {
                                                    new { key= "01:00" , value = "01:00" },
                                                    new { key= "02:00" , value = "02:00" },
                                                    new { key= "03:00" , value = "03:00" },
                                                    new { key= "04:00" , value = "04:00" },
                                                    new { key= "05:00" , value = "05:00" },
                                                    new { key= "06:00" , value = "06:00" },
                                                    new { key= "07:00" , value = "07:00" },
                                                    new { key= "08:00" , value = "08:00" },
                                                    new { key= "09:00" , value = "09:00" },
                                                    new { key= "10:00" , value = "10:00" },
                                                    new { key= "11:00" , value = "11:00" },
                                                    new { key= "12:00" , value = "12:00" },
                                                    new { key= "13:00" , value = "13:00" },
                                                    new { key= "14:00" , value = "14:00" },
                                                    new { key= "15:00" , value = "15:00" },
                                                    new { key= "16:00" , value = "16:00" },
                                                    new { key= "17:00" , value = "17:00" },
                                                    new { key= "18:00" , value = "18:00" },
                                                    new { key= "19:00" , value = "19:00" },
                                                    new { key= "20:00" , value = "20:00" },
                                                    new { key= "21:00" , value = "21:00" },
                                                    new { key= "22:00" , value = "22:00" },
                                                    new { key= "23:00" , value = "23:00" },
                                                    new { key= "24:00" , value = "24:00" }
                                                    }, "key", "Value"), new { @class = "form-control" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Type</label>
                                                        @Html.DropDownListFor(model => model.AlertType, new SelectList(new List<object>
                                                    {
                                                    new { key= "" , value = "--Select--" },
                                                    new { key= "Email" , value = "Email" },
                                                    new { key= "SMS" , value = "SMS" },
                                                    new { key= "Notification" , value = "Notification" },
                                                    }, "key", "Value"), new { @class = "form-control", @id = "AlertType" })
                                                    </div>
                                                    <div class="col-sm-7 qryerrormsg">
                                                        @Html.ValidationMessageFor(m => m.AlertType, null, new { @class = "red" })
                                                    </div>
                                                </div>
                                                <div class="form-group" id="EmailTemplates">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Template<span class="danger">*</span></label>
                                                        @Html.DropDownListFor(m => m.EmailTemplateID, new SelectList(Model.EmailTemplates, "value", "text"), "--Select--", new { @class = "form-control" })
                                                    </div>
                                                    <div class="col-sm-7 qryerrormsg">
                                                        @Html.ValidationMessageFor(m => m.EmailTemplateID, null, new { @class = "red" })
                                                    </div>
                                                </div>
                                                <div class="form-group" id="SMSTemplates">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Template<span class="danger">*</span></label>
                                                        @Html.DropDownListFor(m => m.SMSTemplateID, new SelectList(Model.SMSTemplates, "value", "text"), "--Select--", new { @class = "form-control" })
                                                    </div>
                                                    <div class="col-sm-7 qryerrormsg">
                                                        @Html.ValidationMessageFor(m => m.SMSTemplateID, null, new { @class = "red" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <label for="inputEmail" class="gn">Status</label>
                                                        @Html.DropDownListFor(model => model.StatusTypeID, new SelectList(new List<object>
                                                    {
                                                    new { key= "10" , value = "Active" },
                                                    new { key= "20" , value = "Inactive" },
                                                    }, "key", "Value"), new { @class = "form-control" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="col-md-3">
                                                        <input type="submit" value="Save" class="savebtn btn btn-theme">
                                                        <input type="button" id="SchReset" value="Reset" class="savebtn btn btn-theme reverse">
                                                        <input type="button" value="Cancel" class="EditCancel savebtn btn btn-theme decline">
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <div id="SchedulersGrid">
                                            @{
                                                if (Model.OrganizationID > 0)
                                                {
                                                    Html.RenderAction("GetSchedulersGrid", "QueryGeneration", new { ID = Model.ID, OrgID = Model.OrganizationID });
                                                }
                                            }
                                        </div>
                                    </div>
                                                }
            <div id="Querygen">
                <form id="SaveQueryValues" style="display:table;width:100%">
                    <input type="hidden" class="form-control" name="ID" id="SaveQueryID">
                    <input type="hidden" class="form-control" name="Name" id="SaveQueryName" placeholder="Name">
                    <div id="labquery">
                        <h4>Generated Query</h4>
                    </div>
                    <div>
                        <textarea id="VisibleQuery" spellcheck="false" class="form-control" name="VisibleQuery" rows="4"></textarea>
                        <textarea id="HiddenQuery" class="form-control" rows="4" name="Query" style="display:none;"></textarea>
                    </div>

                    <input type="hidden" id="SaveSelectFields" name="SelectFields" class="form-control">
                    <input type="hidden" id="SaveSelFldWithtype" name="SelWithTypes" class="form-control">
                    <input type="hidden" id="SaveWhereWithType" name="WhereWithTypes" class="form-control">
                    <input type="hidden" id="SaveFromBO" name="FromBos" class="form-control">
                    <input type="hidden" id="IsMultiBO" name="bIsMultiBO" class="form-control">
                    <input type="hidden" id="SaveWhereFields" name="WhereFields" class="form-control">
                    <input type="hidden" id="SaveGroupFields" name="GroupFields" class="form-control">
                    <input type="hidden" id="SaveOrderFields" name="OrderFields" class="form-control">
                    <div class="form-group" style="padding-left:0px;">
                        <div class="col-sm-7 groupname form-group QueryBtns" style="padding-left:0px;">
                            <input type="button" id="Save" value="" class="savebtn btn btn-theme" style="display:none;">
                            <input type="button" id="Continue" value="Continue" class="savebtn btn btn-theme">
                            <input type="button" id="QueryDelete" value="Cancel" class="savebtn btn btn-theme">
                            <input type="button" id="reset" value="Reset" class="savebtn btn btn-theme reverse">
                            <input type="button" id="Close" value="Close" class="savebtn btn btn-theme" style="display:none;">
                            <input type="button" id="preview" value="Preview Query" class="savebtn btn btn-theme" onclick="Preview('Preview')" style="background-color: #3c8dbc !important;">
                            <input type="button" id="RunQuery" value="Run" class="savebtn btn btn-theme" onclick="Preview('Run')">
                        </div>
                        <div class="col-sm-5 groupname" style="padding-left:0px;" id="QueryStatus">
                            <div class="col-sm-2 sbox">Select<p class="sbval"></p></div>
                            <div class="col-sm-2 wbox">Where<p class="wbval"></p></div>
                            <div class="col-sm-2 gbox">Group<p class="gbval"></p></div>
                            <div class="col-sm-2 obox">Order<p class="obval"></p></div>
                        </div>
                        <div class="col-sm-6" id="ValidQuery">

                        </div>
                    </div>
                </form>
            </div>
            <div id="QueryResult">
            </div>
        </div>

        <div id="QueryDlg" class="dialog-box" title="Confirm Message" style="background-color:white;"></div>
    </div>
</div>
<div class="dialog-box QueryFormWindow" title="Confirm Message" style="background-color:white;"></div>
<script>
    var ReportID;
    function OnFormBegin() {
        $('#QueryForm').block({
            message: '<h4>Saving</h4>',
            blockMsgClass: 'report-success',
        });
    }
    function OnComplete(data) {
        var ID = data;
        var ParamIDs = $('#ParamIDs').val();
        if (ParamIDs != "" && ParamIDs.length > 0) {
            $.ajax({
                type: 'get',
                url: '@Url.Action("UpdateMappingIDToParams", "XIComponents")',
                contentType: "application/json; charset=utf-8",
                data: { sType: "Query", iLoadID: ID, Params: ParamIDs },
                cache: false,
                async: false,
                dataType: 'json',
                success: function (Mappingdata) {
                    CustomMessage(Mappingdata.ResponseMessage, Mappingdata.Status);
                }
            });
        }

        $('#QueryForm').unblock();
        if(data>0){
            BusinessObject();
            $('#QueryID').val(data);
            ReportID = data;
            $('#ID').val(data);
            $('#SchQueryID').val(data);
            $('#SavedQueryID').val(data);
            $('#Querygen').show();
            $('#liquery').removeClass('active');
            $('#QueryFormTab').removeClass('active');
            $('#liselect').addClass('active');
            $('#SelectTab').addClass('active');
            $('#NVsTab').addClass('active');
            $('#ParamsTab').addClass('active');
            $("ul.nav-tabs").find("li").each(function () {
                $(this).removeClass('disabled');
            });
            $("ul.nav-tabs").find("a").each(function () {
                $(this).attr('data-toggle', 'tab');
            });
            $("ul.nav-tabs").find("li#liquery").each(function () {
                $(this).prop('disabled', true).addClass('disabled');
                $('li#lisearch').prop('disabled', true).addClass('disabled');
            });
            $("ul.nav-tabs").find("li#liquery a").each(function () {
                $(this).removeAttr('data-toggle');
                $('li#lisearch a').removeAttr('data-toggle');
                $('li#liaction').prop('disabled', true).addClass('disabled');
                $('li#liaction a').removeAttr('data-toggle');
                $('li#litarget a').removeAttr('data-toggle');
                $('li#litarget').prop('disabled', true).addClass('disabled');
                $('li#lischeduler a').removeAttr('data-toggle');
                $('li#lischeduler').prop('disabled', true).addClass('disabled');
            });
            var queryheading = "";
            var queryname = $('#QueryName').val();
            var business = $('#bussobjID').val();
            var Type = $('#TypeID option:selected').text();
            var DisplayType = $('#DisplayAs option:selected').text();
            queryheading = queryname + " - " + business + " - " + Type + " - " + DisplayType;
            $('.QueryDetails').empty();
            $('.QueryDetails').append(queryheading);
            $.ajax({
                url: '@Url.Action("GetSchedulersGrid", "QueryGeneration")',
                type: 'GET',
                datatype: 'html',
                cache:false,
                data: { ID: data, OrgID:'@Model.OrganizationID' },
                success: function (data) {
                    $('#SchedulersGrid').html(data);
                    @*$.ajax({
                        url: '@Url.Action("GetTargetUsers", "QueryGeneration")',
                        type: 'GET',
                        datatype: 'JSON',
                        cache:false,
                        data: { ID: '@Model.ID' },
                        success: function (data) {
                            if(data.length>0){
                                $('#TargetUsers').empty();
                                $('#TargetUsers').html('<option value="">--Select--</option>')
                                for(i=0;i<data.length;i++){
                                    $('#TargetUsers').append('<option value="'+data[i].Value+'">'+data[i].text+'</option>');
                                }
                            }
                        },
                        error: function (data) {
                        }
                    });*@
                },
                error: function (data) {
                }
            });
        }
    }
    function TargetComplete(e){
        if(e>0){
            $('#TRSMSTemplates').hide();
            $('#TREmailTemplates').hide();
            $.ajax({
                url: '@Url.Action("GetTargetsGrid", "QueryGeneration")',
                type: 'GET',
                datatype: 'html',
                cache:false,
                data: { ID: ReportID, OrgID:'@Model.OrganizationID' },
                success: function (data) {
                    $('#TargetsGrid').html(data);
                    @*$.ajax({
                        url: '@Url.Action("GetTargetUsers", "QueryGeneration")',
                        type: 'GET',
                        datatype: 'JSON',
                        cache:false,
                        data: { ID: '@Model.ID' },
                        success: function (data) {
                            if(data.length>0){
                                $('#TargetUsers').empty();
                                $('#TargetUsers').html('<option value="">--Select--</option>')
                                for(i=0;i<data.length;i++){
                                    $('#TargetUsers').append('<option value="'+data[i].Value+'">'+data[i].text+'</option>');
                                }
                            }
                        },
                        error: function (data) {
                        }
                    });*@
                },
                error: function (data) {
                }
            });
            $('#TargetID').val(0);
            $('#TargetsForm')[0].reset();
            $('#TargetUsers').removeAttr('disabled');
            $('#TargetUsers').val('');
            $('#Targets').val('');
            $('#TargetPeriod').val('Daily');
            $('#TargetColour').val('Red');
            $(".QueryFormWindow").html("Target saved successfully");
        }
        else{
            $(".QueryFormWindow").html("Something went wrong. Please try again!!");
        }
        $(".QueryFormWindow").dialog({
            title: "Query Generation",
            modal: true,
            buttons: [
            {
                text: "Ok",
                click: function () {
                    $(".QueryFormWindow").dialog('close');
                }
            }
            ]
        });
    }
    function SchedulerComplete(e){
        if(e>0){
            $.ajax({
                url: '@Url.Action("GetSchedulersGrid", "QueryGeneration")',
                type: 'GET',
                datatype: 'html',
                cache:false,
                data: { ID: ReportID, OrgID:'@Model.OrganizationID' },
                success: function (data) {
                    $('#SchedulersGrid').html(data);
                },
                error: function (data) {
                }
            });
            $('#SchedulersForm')[0].reset();
            $('#SMSTemplates').hide();
            $('#EmailTemplates').hide();
            $('#Days').hide();
            $('#Dates').hide();
            $(".QueryUpdateWindow").html("Details saved successfully");
        }
        else{
            $(".QueryUpdateWindow").html("Something went wrong. Please try again!!");
        }
        $(".QueryUpdateWindow").dialog({
            title: "Scheduler",
            modal: true,
            buttons: [
            {
                text: "Ok",
                click: function () {
                    $(".QueryUpdateWindow").dialog('close');
                }
            }
            ]
        });
    }
    function OnChangeEvent() {
        var textvalue = $("#value1").val();
        if (textvalue == "") {
            $('#value').removeAttr('disabled');
        }
    }
    function KeyPressed() {
        $('#value').prop('disabled', true);
    }

    function selectchange() {
        var selectvalue = $('#value').val();
        if (selectvalue == 0) {
            $('#value1').removeAttr('disabled');
        }
        else {
            $('#value1').prop('disabled', true);
        }
    }
    function FocusOut() {
        var textvalue = $("#value1").val();
        if (textvalue == "") {
            $('#value').removeAttr('disabled');
        }
        else {
            $('#value').prop('disabled', true);
            $('#value1').removeAttr('disabled');
        }
    }
    $('#QueryCancel').click(function () {
        window.close();
    });

    function Save1ClickPermission(data) {
        if (data > 0) {
            $.ajax({
                url: '@Url.Action("Save1ClickPermission", "QueryGeneration")',
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                datatype: "JSON",
                cache: false,
                data: JSON.stringify({ NVPairs: null, i1ClickID: data,sType:"Add" }),
                success: function (Result) {
                    $('#AccessTab').show();
                    //$("#UserMainTreeClick").html(Result);
                    $("#UserMainTreeClick").html('');
                    $("#UserMainTreeClick1").html(Result);
                }
            });
        }
    }

    $("#ClickPermission").click(function () {
        var i1ClickID = $('#QueryID').text();
        if (IDs.length > 0) {
            $.ajax({
                url: '@Url.Action("Save1ClickPermission", "QueryGeneration")',
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                datatype: "JSON",
                cache: false,
                data: JSON.stringify({ NVPairs: NVPairs, i1ClickID: i1ClickID,sType:"Edit" }),
                success: function (data) {
                    if (data.Status == false) {
                        $("#BootstrpError").show();
                        $("#BootstrpError").html("<strong>Failure!</strong> OOPS looks like there is some error");
                        $(function () {
                            setTimeout(function () {
                                $("#BootstrpError").hide('blind', {}, 500)
                            }, 5000);
                        });
                    }
                    else {
                        $("#BootstrpAlertSuccess").show();
                        $("#BootstrpAlertSuccess").html("<strong>Success!</strong> OneClick Permissions Saved Successfully.");
                        $(function () {
                            setTimeout(function () {
                                $("#BootstrpAlertSuccess").hide('blind', {}, 500)
                            }, 5000);
                        });
                    }
                }
            });
        }
    });

</script>
<div id="XICParams"></div>
