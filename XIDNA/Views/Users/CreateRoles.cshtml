@model XICore.XIInfraRoles
@using XIDNA.Models
@{ Layout = "~/Views/Shared/_PopupLayout.cshtml";}
<script>
    function OnSuccess(resp) {
        var data = resp;
        if (resp.Response == true || resp.Id > 0) {
            $("#RoleError").html('');
            opener.location.reload();
            //$("#Name").val("");
            if (resp.Response) {
                CustomMessage("Data Saved Successfully", resp.Response);
            }
            else {
                CustomMessage("Error occured plase try again", resp.Response);
            }

            if (resp.Id != 0) {
                var position = 'inside';
                var parent = $('#UserMainTree').jstree('get_selected');
                //var parent1 = $('#CategoryTree').jstree('get_selected', true)[0];
                var newNode = {
                    id: resp.Id,// will be autogenerated if omitted
                    text: resp.RoleName, // node text
                    icon: true, // string for custom
                    state: {
                        opened: true, // is the node open
                        disabled: false,  // is the node disabled
                        selected: true,  // is the node selected
                    },
                    children: [], // array of strings or objects
                    li_attr: {
                        "id": resp.Id
                    }, // attributes for the generated LI node
                    a_attr: {
                        "data-ajax": true,
                        "data-ajax-method": "GET",
                        "data-ajax-mode": "replace",
                        "data-ajax-update": "#Categories",
                        "href": "#",
                        "id": resp.Id + "_anchor",
                    }  // attributes for the generated A node
                }
                if (resp.Type == "Create") {
                    $('#UserMainTree').jstree("create_node", parent, newNode, position, false, false);
                    $('#UserMainTree').jstree("open_node", parent);
                    $('#UserMainTree').jstree("deselect_node", parent);
                    $('#UserMainTree').jstree("select_node.jstree", resp.Id);
                    $('#GroupID').val(resp.Id);
                }
                else {
                    var text = resp.RoleName;
                    $("#UserMainTree").jstree('rename_node', newNode, text);
                }
            }
            // alert('Role Updated Successfully');
            //opener.location.reload();
            //window.close();
        }
        else {
            $("#RoleError").html(resp.Error);
        }
    }
</script>
<style>
    #RoleError {
        margin-top: 30px;
    }
</style>
<section class="content-header hedr">
    @if (Model.RoleID == 0)
    {
        <h1> Add Role </h1>
    }
    else
    {
        <h1> Edit Role </h1>
    }

    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Role Management</a></li>
        <li class="active">Home</li>
    </ol>
</section>
<div id="Dialog"></div>
<div class="content">
    <div class="row">
        <div class="box padding10Tab">
            <div class="innerborder">
                <div class="box-body col-md-3" id="test2">
                    <h5>Available Roles</h5>
                    <div id="UserMainTree" class="tree">
                        @{
                            Html.RenderAction("GroupTree", "Users", new { treedata = ViewBag.Group });
                        }
                    </div>
                </div>
                <div class="box-body col-md-9" id="addclass">
                    <div class="condata">
                        @using (Ajax.BeginForm("CreateRole", "Users", new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnSuccess" }, new { @class = "form-horizontal", @id = "AddRole" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.RoleID)
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(m => m.iParentID, new { @id = "GroupID" })
                            <div class="form-group">
                                <div class="col-md-5">
                                    <label for="inputEmail" class="gn">Role Name<span class="danger">*</span></label>
                                    @Html.TextBoxFor(model => model.sRoleName, new { @placeholder = "Enter Role Name", @class = "form-control", @id = "Name" })
                                </div>
                                <div class="col-sm-7 errormsg" id="RoleError">
                                    @Html.ValidationMessageFor(m => m.sRoleName, null, new { @class = "red" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    <label for="inputEmail" class="gn">Layout<span class="danger">*</span></label>
                                    @Html.DropDownListFor(m => m.iLayoutID, new SelectList(Model.LayoutsList, "Value", "text"), new { @class = "form-control", @id = "LayoutID" })
                                </div>
                                <div class="col-sm-7 errormsg" id="RoleError">
                                    @Html.ValidationMessageFor(m => m.iLayoutID, null, new { @class = "red" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    <label for="inputEmail" class="gn">Theme<span class="danger">*</span></label>
                                    @Html.DropDownListFor(m => m.iThemeID, new SelectList(Model.ThemesList, "Value", "text"), new { @class = "form-control", @id = "ThemeID" })
                                </div>
                                <div class="col-sm-7 errormsg" id="RoleError">
                                    @Html.ValidationMessageFor(m => m.iThemeID, null, new { @class = "red" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    <label for="inputEmail" class="gn">SignalR<span class="danger"></span></label>
                                    @Html.CheckBoxFor(model => model.bSignalR)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-5">
                                    <button type="submit" class="btn btn-theme" value="Save" id="save">Save</button>
                                    @if (Model.RoleID == 0)
                                    {
                                        <button type="button" class="btn btn-theme reverse" id="Reset">Reset</button>
                                    }
                                    <button type="button" class="btn btn-theme decline" id="Cancel">Cancel</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
<div id="ConformationDlg" class="dialog-box" title="Confirm Message" style="background-color:white;"></div>

<script>
    $('#Cancel').click(function () {
        window.close();
    });
    $('#Reset').click(function () {
        $(this).closest('form').find("input[type=text], textarea").val("");
        $('#RoleError label').html('');
        $('#RoleError span').html('');
        $('#LayoutID').val(0);
        $('#ThemeID').val(0);
    });
</script>